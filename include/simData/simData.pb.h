// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_simData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_simData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_simData_2eproto SDKDATA_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct SDKDATA_EXPORT TableStruct_simData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[49]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_simData_2eproto;
namespace simData {
class BeamCommand;
class BeamCommandDefaultTypeInternal;
SDKDATA_EXPORT extern BeamCommandDefaultTypeInternal _BeamCommand_default_instance_;
class BeamPrefs;
class BeamPrefsDefaultTypeInternal;
SDKDATA_EXPORT extern BeamPrefsDefaultTypeInternal _BeamPrefs_default_instance_;
class BeamPrefs_AntennaPattern;
class BeamPrefs_AntennaPatternDefaultTypeInternal;
SDKDATA_EXPORT extern BeamPrefs_AntennaPatternDefaultTypeInternal _BeamPrefs_AntennaPattern_default_instance_;
class BeamProperties;
class BeamPropertiesDefaultTypeInternal;
SDKDATA_EXPORT extern BeamPropertiesDefaultTypeInternal _BeamProperties_default_instance_;
class BeamUpdate;
class BeamUpdateDefaultTypeInternal;
SDKDATA_EXPORT extern BeamUpdateDefaultTypeInternal _BeamUpdate_default_instance_;
class BodyOrientation;
class BodyOrientationDefaultTypeInternal;
SDKDATA_EXPORT extern BodyOrientationDefaultTypeInternal _BodyOrientation_default_instance_;
class CategoryData;
class CategoryDataDefaultTypeInternal;
SDKDATA_EXPORT extern CategoryDataDefaultTypeInternal _CategoryData_default_instance_;
class CategoryData_Entry;
class CategoryData_EntryDefaultTypeInternal;
SDKDATA_EXPORT extern CategoryData_EntryDefaultTypeInternal _CategoryData_Entry_default_instance_;
class CommonPrefs;
class CommonPrefsDefaultTypeInternal;
SDKDATA_EXPORT extern CommonPrefsDefaultTypeInternal _CommonPrefs_default_instance_;
class CoordinateFrame;
class CoordinateFrameDefaultTypeInternal;
SDKDATA_EXPORT extern CoordinateFrameDefaultTypeInternal _CoordinateFrame_default_instance_;
class CoordinateFrame_TangentPlaneOffsets;
class CoordinateFrame_TangentPlaneOffsetsDefaultTypeInternal;
SDKDATA_EXPORT extern CoordinateFrame_TangentPlaneOffsetsDefaultTypeInternal _CoordinateFrame_TangentPlaneOffsets_default_instance_;
class CustomRenderingCommand;
class CustomRenderingCommandDefaultTypeInternal;
SDKDATA_EXPORT extern CustomRenderingCommandDefaultTypeInternal _CustomRenderingCommand_default_instance_;
class CustomRenderingPrefs;
class CustomRenderingPrefsDefaultTypeInternal;
SDKDATA_EXPORT extern CustomRenderingPrefsDefaultTypeInternal _CustomRenderingPrefs_default_instance_;
class CustomRenderingProperties;
class CustomRenderingPropertiesDefaultTypeInternal;
SDKDATA_EXPORT extern CustomRenderingPropertiesDefaultTypeInternal _CustomRenderingProperties_default_instance_;
class CustomRenderingUpdate;
class CustomRenderingUpdateDefaultTypeInternal;
SDKDATA_EXPORT extern CustomRenderingUpdateDefaultTypeInternal _CustomRenderingUpdate_default_instance_;
class GateCommand;
class GateCommandDefaultTypeInternal;
SDKDATA_EXPORT extern GateCommandDefaultTypeInternal _GateCommand_default_instance_;
class GatePrefs;
class GatePrefsDefaultTypeInternal;
SDKDATA_EXPORT extern GatePrefsDefaultTypeInternal _GatePrefs_default_instance_;
class GateProperties;
class GatePropertiesDefaultTypeInternal;
SDKDATA_EXPORT extern GatePropertiesDefaultTypeInternal _GateProperties_default_instance_;
class GateUpdate;
class GateUpdateDefaultTypeInternal;
SDKDATA_EXPORT extern GateUpdateDefaultTypeInternal _GateUpdate_default_instance_;
class GenericData;
class GenericDataDefaultTypeInternal;
SDKDATA_EXPORT extern GenericDataDefaultTypeInternal _GenericData_default_instance_;
class GenericData_Entry;
class GenericData_EntryDefaultTypeInternal;
SDKDATA_EXPORT extern GenericData_EntryDefaultTypeInternal _GenericData_Entry_default_instance_;
class LabelPrefs;
class LabelPrefsDefaultTypeInternal;
SDKDATA_EXPORT extern LabelPrefsDefaultTypeInternal _LabelPrefs_default_instance_;
class LabelPrefs_DisplayFields;
class LabelPrefs_DisplayFieldsDefaultTypeInternal;
SDKDATA_EXPORT extern LabelPrefs_DisplayFieldsDefaultTypeInternal _LabelPrefs_DisplayFields_default_instance_;
class LaserCommand;
class LaserCommandDefaultTypeInternal;
SDKDATA_EXPORT extern LaserCommandDefaultTypeInternal _LaserCommand_default_instance_;
class LaserPrefs;
class LaserPrefsDefaultTypeInternal;
SDKDATA_EXPORT extern LaserPrefsDefaultTypeInternal _LaserPrefs_default_instance_;
class LaserProperties;
class LaserPropertiesDefaultTypeInternal;
SDKDATA_EXPORT extern LaserPropertiesDefaultTypeInternal _LaserProperties_default_instance_;
class LaserUpdate;
class LaserUpdateDefaultTypeInternal;
SDKDATA_EXPORT extern LaserUpdateDefaultTypeInternal _LaserUpdate_default_instance_;
class LobGroupCommand;
class LobGroupCommandDefaultTypeInternal;
SDKDATA_EXPORT extern LobGroupCommandDefaultTypeInternal _LobGroupCommand_default_instance_;
class LobGroupPrefs;
class LobGroupPrefsDefaultTypeInternal;
SDKDATA_EXPORT extern LobGroupPrefsDefaultTypeInternal _LobGroupPrefs_default_instance_;
class LobGroupProperties;
class LobGroupPropertiesDefaultTypeInternal;
SDKDATA_EXPORT extern LobGroupPropertiesDefaultTypeInternal _LobGroupProperties_default_instance_;
class LobGroupUpdate;
class LobGroupUpdateDefaultTypeInternal;
SDKDATA_EXPORT extern LobGroupUpdateDefaultTypeInternal _LobGroupUpdate_default_instance_;
class LobGroupUpdatePoint;
class LobGroupUpdatePointDefaultTypeInternal;
SDKDATA_EXPORT extern LobGroupUpdatePointDefaultTypeInternal _LobGroupUpdatePoint_default_instance_;
class LocalGridPrefs;
class LocalGridPrefsDefaultTypeInternal;
SDKDATA_EXPORT extern LocalGridPrefsDefaultTypeInternal _LocalGridPrefs_default_instance_;
class LocalGridPrefs_GridSettings;
class LocalGridPrefs_GridSettingsDefaultTypeInternal;
SDKDATA_EXPORT extern LocalGridPrefs_GridSettingsDefaultTypeInternal _LocalGridPrefs_GridSettings_default_instance_;
class LocalGridPrefs_SpeedRing;
class LocalGridPrefs_SpeedRingDefaultTypeInternal;
SDKDATA_EXPORT extern LocalGridPrefs_SpeedRingDefaultTypeInternal _LocalGridPrefs_SpeedRing_default_instance_;
class PlatformCommand;
class PlatformCommandDefaultTypeInternal;
SDKDATA_EXPORT extern PlatformCommandDefaultTypeInternal _PlatformCommand_default_instance_;
class PlatformPrefs;
class PlatformPrefsDefaultTypeInternal;
SDKDATA_EXPORT extern PlatformPrefsDefaultTypeInternal _PlatformPrefs_default_instance_;
class PlatformProperties;
class PlatformPropertiesDefaultTypeInternal;
SDKDATA_EXPORT extern PlatformPropertiesDefaultTypeInternal _PlatformProperties_default_instance_;
class Position;
class PositionDefaultTypeInternal;
SDKDATA_EXPORT extern PositionDefaultTypeInternal _Position_default_instance_;
class ProjectorCommand;
class ProjectorCommandDefaultTypeInternal;
SDKDATA_EXPORT extern ProjectorCommandDefaultTypeInternal _ProjectorCommand_default_instance_;
class ProjectorPrefs;
class ProjectorPrefsDefaultTypeInternal;
SDKDATA_EXPORT extern ProjectorPrefsDefaultTypeInternal _ProjectorPrefs_default_instance_;
class ProjectorProperties;
class ProjectorPropertiesDefaultTypeInternal;
SDKDATA_EXPORT extern ProjectorPropertiesDefaultTypeInternal _ProjectorProperties_default_instance_;
class ProjectorUpdate;
class ProjectorUpdateDefaultTypeInternal;
SDKDATA_EXPORT extern ProjectorUpdateDefaultTypeInternal _ProjectorUpdate_default_instance_;
class Reference;
class ReferenceDefaultTypeInternal;
SDKDATA_EXPORT extern ReferenceDefaultTypeInternal _Reference_default_instance_;
class ScenarioProperties;
class ScenarioPropertiesDefaultTypeInternal;
SDKDATA_EXPORT extern ScenarioPropertiesDefaultTypeInternal _ScenarioProperties_default_instance_;
class ScenarioProperties_Classification;
class ScenarioProperties_ClassificationDefaultTypeInternal;
SDKDATA_EXPORT extern ScenarioProperties_ClassificationDefaultTypeInternal _ScenarioProperties_Classification_default_instance_;
class ScenarioProperties_SoundFile;
class ScenarioProperties_SoundFileDefaultTypeInternal;
SDKDATA_EXPORT extern ScenarioProperties_SoundFileDefaultTypeInternal _ScenarioProperties_SoundFile_default_instance_;
class TimeTickPrefs;
class TimeTickPrefsDefaultTypeInternal;
SDKDATA_EXPORT extern TimeTickPrefsDefaultTypeInternal _TimeTickPrefs_default_instance_;
class TrackPrefs;
class TrackPrefsDefaultTypeInternal;
SDKDATA_EXPORT extern TrackPrefsDefaultTypeInternal _TrackPrefs_default_instance_;
}  // namespace simData
PROTOBUF_NAMESPACE_OPEN
template<> SDKDATA_EXPORT ::simData::BeamCommand* Arena::CreateMaybeMessage<::simData::BeamCommand>(Arena*);
template<> SDKDATA_EXPORT ::simData::BeamPrefs* Arena::CreateMaybeMessage<::simData::BeamPrefs>(Arena*);
template<> SDKDATA_EXPORT ::simData::BeamPrefs_AntennaPattern* Arena::CreateMaybeMessage<::simData::BeamPrefs_AntennaPattern>(Arena*);
template<> SDKDATA_EXPORT ::simData::BeamProperties* Arena::CreateMaybeMessage<::simData::BeamProperties>(Arena*);
template<> SDKDATA_EXPORT ::simData::BeamUpdate* Arena::CreateMaybeMessage<::simData::BeamUpdate>(Arena*);
template<> SDKDATA_EXPORT ::simData::BodyOrientation* Arena::CreateMaybeMessage<::simData::BodyOrientation>(Arena*);
template<> SDKDATA_EXPORT ::simData::CategoryData* Arena::CreateMaybeMessage<::simData::CategoryData>(Arena*);
template<> SDKDATA_EXPORT ::simData::CategoryData_Entry* Arena::CreateMaybeMessage<::simData::CategoryData_Entry>(Arena*);
template<> SDKDATA_EXPORT ::simData::CommonPrefs* Arena::CreateMaybeMessage<::simData::CommonPrefs>(Arena*);
template<> SDKDATA_EXPORT ::simData::CoordinateFrame* Arena::CreateMaybeMessage<::simData::CoordinateFrame>(Arena*);
template<> SDKDATA_EXPORT ::simData::CoordinateFrame_TangentPlaneOffsets* Arena::CreateMaybeMessage<::simData::CoordinateFrame_TangentPlaneOffsets>(Arena*);
template<> SDKDATA_EXPORT ::simData::CustomRenderingCommand* Arena::CreateMaybeMessage<::simData::CustomRenderingCommand>(Arena*);
template<> SDKDATA_EXPORT ::simData::CustomRenderingPrefs* Arena::CreateMaybeMessage<::simData::CustomRenderingPrefs>(Arena*);
template<> SDKDATA_EXPORT ::simData::CustomRenderingProperties* Arena::CreateMaybeMessage<::simData::CustomRenderingProperties>(Arena*);
template<> SDKDATA_EXPORT ::simData::CustomRenderingUpdate* Arena::CreateMaybeMessage<::simData::CustomRenderingUpdate>(Arena*);
template<> SDKDATA_EXPORT ::simData::GateCommand* Arena::CreateMaybeMessage<::simData::GateCommand>(Arena*);
template<> SDKDATA_EXPORT ::simData::GatePrefs* Arena::CreateMaybeMessage<::simData::GatePrefs>(Arena*);
template<> SDKDATA_EXPORT ::simData::GateProperties* Arena::CreateMaybeMessage<::simData::GateProperties>(Arena*);
template<> SDKDATA_EXPORT ::simData::GateUpdate* Arena::CreateMaybeMessage<::simData::GateUpdate>(Arena*);
template<> SDKDATA_EXPORT ::simData::GenericData* Arena::CreateMaybeMessage<::simData::GenericData>(Arena*);
template<> SDKDATA_EXPORT ::simData::GenericData_Entry* Arena::CreateMaybeMessage<::simData::GenericData_Entry>(Arena*);
template<> SDKDATA_EXPORT ::simData::LabelPrefs* Arena::CreateMaybeMessage<::simData::LabelPrefs>(Arena*);
template<> SDKDATA_EXPORT ::simData::LabelPrefs_DisplayFields* Arena::CreateMaybeMessage<::simData::LabelPrefs_DisplayFields>(Arena*);
template<> SDKDATA_EXPORT ::simData::LaserCommand* Arena::CreateMaybeMessage<::simData::LaserCommand>(Arena*);
template<> SDKDATA_EXPORT ::simData::LaserPrefs* Arena::CreateMaybeMessage<::simData::LaserPrefs>(Arena*);
template<> SDKDATA_EXPORT ::simData::LaserProperties* Arena::CreateMaybeMessage<::simData::LaserProperties>(Arena*);
template<> SDKDATA_EXPORT ::simData::LaserUpdate* Arena::CreateMaybeMessage<::simData::LaserUpdate>(Arena*);
template<> SDKDATA_EXPORT ::simData::LobGroupCommand* Arena::CreateMaybeMessage<::simData::LobGroupCommand>(Arena*);
template<> SDKDATA_EXPORT ::simData::LobGroupPrefs* Arena::CreateMaybeMessage<::simData::LobGroupPrefs>(Arena*);
template<> SDKDATA_EXPORT ::simData::LobGroupProperties* Arena::CreateMaybeMessage<::simData::LobGroupProperties>(Arena*);
template<> SDKDATA_EXPORT ::simData::LobGroupUpdate* Arena::CreateMaybeMessage<::simData::LobGroupUpdate>(Arena*);
template<> SDKDATA_EXPORT ::simData::LobGroupUpdatePoint* Arena::CreateMaybeMessage<::simData::LobGroupUpdatePoint>(Arena*);
template<> SDKDATA_EXPORT ::simData::LocalGridPrefs* Arena::CreateMaybeMessage<::simData::LocalGridPrefs>(Arena*);
template<> SDKDATA_EXPORT ::simData::LocalGridPrefs_GridSettings* Arena::CreateMaybeMessage<::simData::LocalGridPrefs_GridSettings>(Arena*);
template<> SDKDATA_EXPORT ::simData::LocalGridPrefs_SpeedRing* Arena::CreateMaybeMessage<::simData::LocalGridPrefs_SpeedRing>(Arena*);
template<> SDKDATA_EXPORT ::simData::PlatformCommand* Arena::CreateMaybeMessage<::simData::PlatformCommand>(Arena*);
template<> SDKDATA_EXPORT ::simData::PlatformPrefs* Arena::CreateMaybeMessage<::simData::PlatformPrefs>(Arena*);
template<> SDKDATA_EXPORT ::simData::PlatformProperties* Arena::CreateMaybeMessage<::simData::PlatformProperties>(Arena*);
template<> SDKDATA_EXPORT ::simData::Position* Arena::CreateMaybeMessage<::simData::Position>(Arena*);
template<> SDKDATA_EXPORT ::simData::ProjectorCommand* Arena::CreateMaybeMessage<::simData::ProjectorCommand>(Arena*);
template<> SDKDATA_EXPORT ::simData::ProjectorPrefs* Arena::CreateMaybeMessage<::simData::ProjectorPrefs>(Arena*);
template<> SDKDATA_EXPORT ::simData::ProjectorProperties* Arena::CreateMaybeMessage<::simData::ProjectorProperties>(Arena*);
template<> SDKDATA_EXPORT ::simData::ProjectorUpdate* Arena::CreateMaybeMessage<::simData::ProjectorUpdate>(Arena*);
template<> SDKDATA_EXPORT ::simData::Reference* Arena::CreateMaybeMessage<::simData::Reference>(Arena*);
template<> SDKDATA_EXPORT ::simData::ScenarioProperties* Arena::CreateMaybeMessage<::simData::ScenarioProperties>(Arena*);
template<> SDKDATA_EXPORT ::simData::ScenarioProperties_Classification* Arena::CreateMaybeMessage<::simData::ScenarioProperties_Classification>(Arena*);
template<> SDKDATA_EXPORT ::simData::ScenarioProperties_SoundFile* Arena::CreateMaybeMessage<::simData::ScenarioProperties_SoundFile>(Arena*);
template<> SDKDATA_EXPORT ::simData::TimeTickPrefs* Arena::CreateMaybeMessage<::simData::TimeTickPrefs>(Arena*);
template<> SDKDATA_EXPORT ::simData::TrackPrefs* Arena::CreateMaybeMessage<::simData::TrackPrefs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace simData {

enum TimeTickPrefs_DrawStyle : int {
  TimeTickPrefs_DrawStyle_NONE = 0,
  TimeTickPrefs_DrawStyle_POINT = 1,
  TimeTickPrefs_DrawStyle_LINE = 2
};
SDKDATA_EXPORT bool TimeTickPrefs_DrawStyle_IsValid(int value);
constexpr TimeTickPrefs_DrawStyle TimeTickPrefs_DrawStyle_DrawStyle_MIN = TimeTickPrefs_DrawStyle_NONE;
constexpr TimeTickPrefs_DrawStyle TimeTickPrefs_DrawStyle_DrawStyle_MAX = TimeTickPrefs_DrawStyle_LINE;
constexpr int TimeTickPrefs_DrawStyle_DrawStyle_ARRAYSIZE = TimeTickPrefs_DrawStyle_DrawStyle_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeTickPrefs_DrawStyle_descriptor();
template<typename T>
inline const std::string& TimeTickPrefs_DrawStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimeTickPrefs_DrawStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimeTickPrefs_DrawStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimeTickPrefs_DrawStyle_descriptor(), enum_t_value);
}
inline bool TimeTickPrefs_DrawStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TimeTickPrefs_DrawStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimeTickPrefs_DrawStyle>(
    TimeTickPrefs_DrawStyle_descriptor(), name, value);
}
enum TrackPrefs_Mode : int {
  TrackPrefs_Mode_OFF = 0,
  TrackPrefs_Mode_POINT = 1,
  TrackPrefs_Mode_LINE = 2,
  TrackPrefs_Mode_RIBBON = 3,
  TrackPrefs_Mode_BRIDGE = 4
};
SDKDATA_EXPORT bool TrackPrefs_Mode_IsValid(int value);
constexpr TrackPrefs_Mode TrackPrefs_Mode_Mode_MIN = TrackPrefs_Mode_OFF;
constexpr TrackPrefs_Mode TrackPrefs_Mode_Mode_MAX = TrackPrefs_Mode_BRIDGE;
constexpr int TrackPrefs_Mode_Mode_ARRAYSIZE = TrackPrefs_Mode_Mode_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackPrefs_Mode_descriptor();
template<typename T>
inline const std::string& TrackPrefs_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackPrefs_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackPrefs_Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackPrefs_Mode_descriptor(), enum_t_value);
}
inline bool TrackPrefs_Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackPrefs_Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackPrefs_Mode>(
    TrackPrefs_Mode_descriptor(), name, value);
}
enum LabelPrefs_UseValue : int {
  LabelPrefs_UseValue_ACTUAL_VALUE = 0,
  LabelPrefs_UseValue_DISPLAY_VALUE = 1
};
SDKDATA_EXPORT bool LabelPrefs_UseValue_IsValid(int value);
constexpr LabelPrefs_UseValue LabelPrefs_UseValue_UseValue_MIN = LabelPrefs_UseValue_ACTUAL_VALUE;
constexpr LabelPrefs_UseValue LabelPrefs_UseValue_UseValue_MAX = LabelPrefs_UseValue_DISPLAY_VALUE;
constexpr int LabelPrefs_UseValue_UseValue_ARRAYSIZE = LabelPrefs_UseValue_UseValue_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LabelPrefs_UseValue_descriptor();
template<typename T>
inline const std::string& LabelPrefs_UseValue_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LabelPrefs_UseValue>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LabelPrefs_UseValue_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LabelPrefs_UseValue_descriptor(), enum_t_value);
}
inline bool LabelPrefs_UseValue_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LabelPrefs_UseValue* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LabelPrefs_UseValue>(
    LabelPrefs_UseValue_descriptor(), name, value);
}
enum LocalGridPrefs_Type : int {
  LocalGridPrefs_Type_CARTESIAN = 1,
  LocalGridPrefs_Type_POLAR = 2,
  LocalGridPrefs_Type_RANGE_RINGS = 3,
  LocalGridPrefs_Type_SPEED_RINGS = 4,
  LocalGridPrefs_Type_SPEED_LINE = 5
};
SDKDATA_EXPORT bool LocalGridPrefs_Type_IsValid(int value);
constexpr LocalGridPrefs_Type LocalGridPrefs_Type_Type_MIN = LocalGridPrefs_Type_CARTESIAN;
constexpr LocalGridPrefs_Type LocalGridPrefs_Type_Type_MAX = LocalGridPrefs_Type_SPEED_LINE;
constexpr int LocalGridPrefs_Type_Type_ARRAYSIZE = LocalGridPrefs_Type_Type_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalGridPrefs_Type_descriptor();
template<typename T>
inline const std::string& LocalGridPrefs_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocalGridPrefs_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocalGridPrefs_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocalGridPrefs_Type_descriptor(), enum_t_value);
}
inline bool LocalGridPrefs_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LocalGridPrefs_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocalGridPrefs_Type>(
    LocalGridPrefs_Type_descriptor(), name, value);
}
enum BeamProperties_BeamType : int {
  BeamProperties_BeamType_ABSOLUTE_POSITION = 1,
  BeamProperties_BeamType_BODY_RELATIVE = 2,
  BeamProperties_BeamType_TARGET = 3
};
SDKDATA_EXPORT bool BeamProperties_BeamType_IsValid(int value);
constexpr BeamProperties_BeamType BeamProperties_BeamType_BeamType_MIN = BeamProperties_BeamType_ABSOLUTE_POSITION;
constexpr BeamProperties_BeamType BeamProperties_BeamType_BeamType_MAX = BeamProperties_BeamType_TARGET;
constexpr int BeamProperties_BeamType_BeamType_ARRAYSIZE = BeamProperties_BeamType_BeamType_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeamProperties_BeamType_descriptor();
template<typename T>
inline const std::string& BeamProperties_BeamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BeamProperties_BeamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BeamProperties_BeamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BeamProperties_BeamType_descriptor(), enum_t_value);
}
inline bool BeamProperties_BeamType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BeamProperties_BeamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BeamProperties_BeamType>(
    BeamProperties_BeamType_descriptor(), name, value);
}
enum BeamPrefs_AntennaPattern_Type : int {
  BeamPrefs_AntennaPattern_Type_NONE = 0,
  BeamPrefs_AntennaPattern_Type_FILE = 1,
  BeamPrefs_AntennaPattern_Type_ALGORITHM = 2
};
SDKDATA_EXPORT bool BeamPrefs_AntennaPattern_Type_IsValid(int value);
constexpr BeamPrefs_AntennaPattern_Type BeamPrefs_AntennaPattern_Type_Type_MIN = BeamPrefs_AntennaPattern_Type_NONE;
constexpr BeamPrefs_AntennaPattern_Type BeamPrefs_AntennaPattern_Type_Type_MAX = BeamPrefs_AntennaPattern_Type_ALGORITHM;
constexpr int BeamPrefs_AntennaPattern_Type_Type_ARRAYSIZE = BeamPrefs_AntennaPattern_Type_Type_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeamPrefs_AntennaPattern_Type_descriptor();
template<typename T>
inline const std::string& BeamPrefs_AntennaPattern_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BeamPrefs_AntennaPattern_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BeamPrefs_AntennaPattern_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BeamPrefs_AntennaPattern_Type_descriptor(), enum_t_value);
}
inline bool BeamPrefs_AntennaPattern_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BeamPrefs_AntennaPattern_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BeamPrefs_AntennaPattern_Type>(
    BeamPrefs_AntennaPattern_Type_descriptor(), name, value);
}
enum BeamPrefs_AntennaPattern_FileFormat : int {
  BeamPrefs_AntennaPattern_FileFormat_TABLE = 6,
  BeamPrefs_AntennaPattern_FileFormat_MONOPULSE = 7,
  BeamPrefs_AntennaPattern_FileFormat_RELATIVE_TABLE = 9,
  BeamPrefs_AntennaPattern_FileFormat_BILINEAR = 10,
  BeamPrefs_AntennaPattern_FileFormat_NSMA = 11,
  BeamPrefs_AntennaPattern_FileFormat_EZNEC = 12,
  BeamPrefs_AntennaPattern_FileFormat_XFDTD = 13
};
SDKDATA_EXPORT bool BeamPrefs_AntennaPattern_FileFormat_IsValid(int value);
constexpr BeamPrefs_AntennaPattern_FileFormat BeamPrefs_AntennaPattern_FileFormat_FileFormat_MIN = BeamPrefs_AntennaPattern_FileFormat_TABLE;
constexpr BeamPrefs_AntennaPattern_FileFormat BeamPrefs_AntennaPattern_FileFormat_FileFormat_MAX = BeamPrefs_AntennaPattern_FileFormat_XFDTD;
constexpr int BeamPrefs_AntennaPattern_FileFormat_FileFormat_ARRAYSIZE = BeamPrefs_AntennaPattern_FileFormat_FileFormat_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeamPrefs_AntennaPattern_FileFormat_descriptor();
template<typename T>
inline const std::string& BeamPrefs_AntennaPattern_FileFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BeamPrefs_AntennaPattern_FileFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BeamPrefs_AntennaPattern_FileFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BeamPrefs_AntennaPattern_FileFormat_descriptor(), enum_t_value);
}
inline bool BeamPrefs_AntennaPattern_FileFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BeamPrefs_AntennaPattern_FileFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BeamPrefs_AntennaPattern_FileFormat>(
    BeamPrefs_AntennaPattern_FileFormat_descriptor(), name, value);
}
enum BeamPrefs_AntennaPattern_Algorithm : int {
  BeamPrefs_AntennaPattern_Algorithm_PEDESTAL = 1,
  BeamPrefs_AntennaPattern_Algorithm_GAUSS = 2,
  BeamPrefs_AntennaPattern_Algorithm_CSCSQ = 3,
  BeamPrefs_AntennaPattern_Algorithm_SINXX = 4,
  BeamPrefs_AntennaPattern_Algorithm_OMNI = 5
};
SDKDATA_EXPORT bool BeamPrefs_AntennaPattern_Algorithm_IsValid(int value);
constexpr BeamPrefs_AntennaPattern_Algorithm BeamPrefs_AntennaPattern_Algorithm_Algorithm_MIN = BeamPrefs_AntennaPattern_Algorithm_PEDESTAL;
constexpr BeamPrefs_AntennaPattern_Algorithm BeamPrefs_AntennaPattern_Algorithm_Algorithm_MAX = BeamPrefs_AntennaPattern_Algorithm_OMNI;
constexpr int BeamPrefs_AntennaPattern_Algorithm_Algorithm_ARRAYSIZE = BeamPrefs_AntennaPattern_Algorithm_Algorithm_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeamPrefs_AntennaPattern_Algorithm_descriptor();
template<typename T>
inline const std::string& BeamPrefs_AntennaPattern_Algorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BeamPrefs_AntennaPattern_Algorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BeamPrefs_AntennaPattern_Algorithm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BeamPrefs_AntennaPattern_Algorithm_descriptor(), enum_t_value);
}
inline bool BeamPrefs_AntennaPattern_Algorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BeamPrefs_AntennaPattern_Algorithm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BeamPrefs_AntennaPattern_Algorithm>(
    BeamPrefs_AntennaPattern_Algorithm_descriptor(), name, value);
}
enum BeamPrefs_DrawMode : int {
  BeamPrefs_DrawMode_WIRE = 0,
  BeamPrefs_DrawMode_SOLID = 1,
  BeamPrefs_DrawMode_WIRE_ON_SOLID = 2
};
SDKDATA_EXPORT bool BeamPrefs_DrawMode_IsValid(int value);
constexpr BeamPrefs_DrawMode BeamPrefs_DrawMode_DrawMode_MIN = BeamPrefs_DrawMode_WIRE;
constexpr BeamPrefs_DrawMode BeamPrefs_DrawMode_DrawMode_MAX = BeamPrefs_DrawMode_WIRE_ON_SOLID;
constexpr int BeamPrefs_DrawMode_DrawMode_ARRAYSIZE = BeamPrefs_DrawMode_DrawMode_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeamPrefs_DrawMode_descriptor();
template<typename T>
inline const std::string& BeamPrefs_DrawMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BeamPrefs_DrawMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BeamPrefs_DrawMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BeamPrefs_DrawMode_descriptor(), enum_t_value);
}
inline bool BeamPrefs_DrawMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BeamPrefs_DrawMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BeamPrefs_DrawMode>(
    BeamPrefs_DrawMode_descriptor(), name, value);
}
enum BeamPrefs_DrawType : int {
  BeamPrefs_DrawType_BEAM_3DB = 0,
  BeamPrefs_DrawType_ANTENNA_PATTERN = 1,
  BeamPrefs_DrawType_COVERAGE = 2
};
SDKDATA_EXPORT bool BeamPrefs_DrawType_IsValid(int value);
constexpr BeamPrefs_DrawType BeamPrefs_DrawType_DrawType_MIN = BeamPrefs_DrawType_BEAM_3DB;
constexpr BeamPrefs_DrawType BeamPrefs_DrawType_DrawType_MAX = BeamPrefs_DrawType_COVERAGE;
constexpr int BeamPrefs_DrawType_DrawType_ARRAYSIZE = BeamPrefs_DrawType_DrawType_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeamPrefs_DrawType_descriptor();
template<typename T>
inline const std::string& BeamPrefs_DrawType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BeamPrefs_DrawType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BeamPrefs_DrawType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BeamPrefs_DrawType_descriptor(), enum_t_value);
}
inline bool BeamPrefs_DrawType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BeamPrefs_DrawType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BeamPrefs_DrawType>(
    BeamPrefs_DrawType_descriptor(), name, value);
}
enum GateProperties_GateType : int {
  GateProperties_GateType_ABSOLUTE_POSITION = 1,
  GateProperties_GateType_BODY_RELATIVE = 2,
  GateProperties_GateType_TARGET = 3
};
SDKDATA_EXPORT bool GateProperties_GateType_IsValid(int value);
constexpr GateProperties_GateType GateProperties_GateType_GateType_MIN = GateProperties_GateType_ABSOLUTE_POSITION;
constexpr GateProperties_GateType GateProperties_GateType_GateType_MAX = GateProperties_GateType_TARGET;
constexpr int GateProperties_GateType_GateType_ARRAYSIZE = GateProperties_GateType_GateType_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GateProperties_GateType_descriptor();
template<typename T>
inline const std::string& GateProperties_GateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GateProperties_GateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GateProperties_GateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GateProperties_GateType_descriptor(), enum_t_value);
}
inline bool GateProperties_GateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GateProperties_GateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GateProperties_GateType>(
    GateProperties_GateType_descriptor(), name, value);
}
enum GatePrefs_DrawMode : int {
  GatePrefs_DrawMode_UNKNOWN = 0,
  GatePrefs_DrawMode_RANGE = 1,
  GatePrefs_DrawMode_GUARD = 2,
  GatePrefs_DrawMode_ANGLE = 4,
  GatePrefs_DrawMode_RAIN = 5,
  GatePrefs_DrawMode_CLUTTER = 6,
  GatePrefs_DrawMode_FOOTPRINT = 7,
  GatePrefs_DrawMode_SECTOR = 8,
  GatePrefs_DrawMode_PUSH = 9,
  GatePrefs_DrawMode_COVERAGE = 10
};
SDKDATA_EXPORT bool GatePrefs_DrawMode_IsValid(int value);
constexpr GatePrefs_DrawMode GatePrefs_DrawMode_DrawMode_MIN = GatePrefs_DrawMode_UNKNOWN;
constexpr GatePrefs_DrawMode GatePrefs_DrawMode_DrawMode_MAX = GatePrefs_DrawMode_COVERAGE;
constexpr int GatePrefs_DrawMode_DrawMode_ARRAYSIZE = GatePrefs_DrawMode_DrawMode_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GatePrefs_DrawMode_descriptor();
template<typename T>
inline const std::string& GatePrefs_DrawMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GatePrefs_DrawMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GatePrefs_DrawMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GatePrefs_DrawMode_descriptor(), enum_t_value);
}
inline bool GatePrefs_DrawMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GatePrefs_DrawMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GatePrefs_DrawMode>(
    GatePrefs_DrawMode_descriptor(), name, value);
}
enum GatePrefs_FillPattern : int {
  GatePrefs_FillPattern_STIPPLE = 0,
  GatePrefs_FillPattern_SOLID = 1,
  GatePrefs_FillPattern_ALPHA = 2,
  GatePrefs_FillPattern_WIRE = 3,
  GatePrefs_FillPattern_CENTROID = 4
};
SDKDATA_EXPORT bool GatePrefs_FillPattern_IsValid(int value);
constexpr GatePrefs_FillPattern GatePrefs_FillPattern_FillPattern_MIN = GatePrefs_FillPattern_STIPPLE;
constexpr GatePrefs_FillPattern GatePrefs_FillPattern_FillPattern_MAX = GatePrefs_FillPattern_CENTROID;
constexpr int GatePrefs_FillPattern_FillPattern_ARRAYSIZE = GatePrefs_FillPattern_FillPattern_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GatePrefs_FillPattern_descriptor();
template<typename T>
inline const std::string& GatePrefs_FillPattern_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GatePrefs_FillPattern>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GatePrefs_FillPattern_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GatePrefs_FillPattern_descriptor(), enum_t_value);
}
inline bool GatePrefs_FillPattern_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GatePrefs_FillPattern* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GatePrefs_FillPattern>(
    GatePrefs_FillPattern_descriptor(), name, value);
}
enum ModelDrawMode : int {
  MDM_SOLID = 0,
  MDM_WIRE = 1,
  MDM_POINTS = 2
};
SDKDATA_EXPORT bool ModelDrawMode_IsValid(int value);
constexpr ModelDrawMode ModelDrawMode_MIN = MDM_SOLID;
constexpr ModelDrawMode ModelDrawMode_MAX = MDM_POINTS;
constexpr int ModelDrawMode_ARRAYSIZE = ModelDrawMode_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelDrawMode_descriptor();
template<typename T>
inline const std::string& ModelDrawMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModelDrawMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModelDrawMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModelDrawMode_descriptor(), enum_t_value);
}
inline bool ModelDrawMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModelDrawMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModelDrawMode>(
    ModelDrawMode_descriptor(), name, value);
}
enum IconRotation : int {
  IR_2D_UP = 0,
  IR_2D_YAW = 1,
  IR_3D_YPR = 2,
  IR_3D_NORTH = 3,
  IR_3D_YAW = 4
};
SDKDATA_EXPORT bool IconRotation_IsValid(int value);
constexpr IconRotation IconRotation_MIN = IR_2D_UP;
constexpr IconRotation IconRotation_MAX = IR_3D_YAW;
constexpr int IconRotation_ARRAYSIZE = IconRotation_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IconRotation_descriptor();
template<typename T>
inline const std::string& IconRotation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IconRotation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IconRotation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IconRotation_descriptor(), enum_t_value);
}
inline bool IconRotation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IconRotation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IconRotation>(
    IconRotation_descriptor(), name, value);
}
enum ElapsedTimeFormat : int {
  ELAPSED_SECONDS = 1,
  ELAPSED_MINUTES = 2,
  ELAPSED_HOURS = 3
};
SDKDATA_EXPORT bool ElapsedTimeFormat_IsValid(int value);
constexpr ElapsedTimeFormat ElapsedTimeFormat_MIN = ELAPSED_SECONDS;
constexpr ElapsedTimeFormat ElapsedTimeFormat_MAX = ELAPSED_HOURS;
constexpr int ElapsedTimeFormat_ARRAYSIZE = ElapsedTimeFormat_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ElapsedTimeFormat_descriptor();
template<typename T>
inline const std::string& ElapsedTimeFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ElapsedTimeFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ElapsedTimeFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ElapsedTimeFormat_descriptor(), enum_t_value);
}
inline bool ElapsedTimeFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ElapsedTimeFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ElapsedTimeFormat>(
    ElapsedTimeFormat_descriptor(), name, value);
}
enum AngleUnits : int {
  UNITS_RADIANS = 10,
  UNITS_DEGREES = 11,
  UNITS_DEGREES_MINUTES = 12,
  UNITS_DEGREES_MINUTES_SECONDS = 13,
  UNITS_UTM = 14,
  UNITS_BAM = 15,
  UNITS_MIL = 16,
  UNITS_MILLIRADIANS = 17
};
SDKDATA_EXPORT bool AngleUnits_IsValid(int value);
constexpr AngleUnits AngleUnits_MIN = UNITS_RADIANS;
constexpr AngleUnits AngleUnits_MAX = UNITS_MILLIRADIANS;
constexpr int AngleUnits_ARRAYSIZE = AngleUnits_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AngleUnits_descriptor();
template<typename T>
inline const std::string& AngleUnits_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AngleUnits>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AngleUnits_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AngleUnits_descriptor(), enum_t_value);
}
inline bool AngleUnits_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AngleUnits* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AngleUnits>(
    AngleUnits_descriptor(), name, value);
}
enum GeodeticUnits : int {
  GEODETIC_DEGREES = 11,
  GEODETIC_DEGREES_MINUTES = 12,
  GEODETIC_DEGREES_MINUTES_SECONDS = 13
};
SDKDATA_EXPORT bool GeodeticUnits_IsValid(int value);
constexpr GeodeticUnits GeodeticUnits_MIN = GEODETIC_DEGREES;
constexpr GeodeticUnits GeodeticUnits_MAX = GEODETIC_DEGREES_MINUTES_SECONDS;
constexpr int GeodeticUnits_ARRAYSIZE = GeodeticUnits_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeodeticUnits_descriptor();
template<typename T>
inline const std::string& GeodeticUnits_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GeodeticUnits>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GeodeticUnits_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GeodeticUnits_descriptor(), enum_t_value);
}
inline bool GeodeticUnits_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GeodeticUnits* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GeodeticUnits>(
    GeodeticUnits_descriptor(), name, value);
}
enum DistanceUnits : int {
  UNITS_METERS = 20,
  UNITS_KILOMETERS = 21,
  UNITS_YARDS = 22,
  UNITS_MILES = 23,
  UNITS_FEET = 24,
  UNITS_INCHES = 25,
  UNITS_NAUTICAL_MILES = 26,
  UNITS_CENTIMETERS = 27,
  UNITS_MILLIMETERS = 28,
  UNITS_KILOYARDS = 29,
  UNITS_DATAMILES = 30,
  UNITS_FATHOMS = 31,
  UNITS_KILOFEET = 32
};
SDKDATA_EXPORT bool DistanceUnits_IsValid(int value);
constexpr DistanceUnits DistanceUnits_MIN = UNITS_METERS;
constexpr DistanceUnits DistanceUnits_MAX = UNITS_KILOFEET;
constexpr int DistanceUnits_ARRAYSIZE = DistanceUnits_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistanceUnits_descriptor();
template<typename T>
inline const std::string& DistanceUnits_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DistanceUnits>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DistanceUnits_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DistanceUnits_descriptor(), enum_t_value);
}
inline bool DistanceUnits_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DistanceUnits* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DistanceUnits>(
    DistanceUnits_descriptor(), name, value);
}
enum SpeedUnits : int {
  UNITS_METERS_PER_SECOND = 40,
  UNITS_KILOMETERS_PER_HOUR = 41,
  UNITS_KNOTS = 42,
  UNITS_MILES_PER_HOUR = 43,
  UNITS_FEET_PER_SECOND = 44,
  UNITS_KILOMETERS_PER_SECOND = 46,
  UNITS_DATAMILES_PER_HOUR = 47,
  UNITS_YARDS_PER_SECOND = 48
};
SDKDATA_EXPORT bool SpeedUnits_IsValid(int value);
constexpr SpeedUnits SpeedUnits_MIN = UNITS_METERS_PER_SECOND;
constexpr SpeedUnits SpeedUnits_MAX = UNITS_YARDS_PER_SECOND;
constexpr int SpeedUnits_ARRAYSIZE = SpeedUnits_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpeedUnits_descriptor();
template<typename T>
inline const std::string& SpeedUnits_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpeedUnits>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpeedUnits_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpeedUnits_descriptor(), enum_t_value);
}
inline bool SpeedUnits_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpeedUnits* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpeedUnits>(
    SpeedUnits_descriptor(), name, value);
}
enum Polarity : int {
  POL_UNKNOWN = 0,
  POL_HORIZONTAL = 1,
  POL_VERTICAL = 2,
  POL_CIRCULAR = 3,
  POL_HORZVERT = 4,
  POL_VERTHORZ = 5,
  POL_LEFTCIRC = 6,
  POL_RIGHTCIRC = 7,
  POL_LINEAR = 8
};
SDKDATA_EXPORT bool Polarity_IsValid(int value);
constexpr Polarity Polarity_MIN = POL_UNKNOWN;
constexpr Polarity Polarity_MAX = POL_LINEAR;
constexpr int Polarity_ARRAYSIZE = Polarity_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Polarity_descriptor();
template<typename T>
inline const std::string& Polarity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Polarity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Polarity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Polarity_descriptor(), enum_t_value);
}
inline bool Polarity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Polarity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Polarity>(
    Polarity_descriptor(), name, value);
}
enum CoordinateSystem : int {
  NED = 1,
  NWU = 2,
  ENU = 3,
  LLA = 4,
  ECEF = 5,
  ECI = 6,
  XEAST = 7,
  GTP = 8
};
SDKDATA_EXPORT bool CoordinateSystem_IsValid(int value);
constexpr CoordinateSystem CoordinateSystem_MIN = NED;
constexpr CoordinateSystem CoordinateSystem_MAX = GTP;
constexpr int CoordinateSystem_ARRAYSIZE = CoordinateSystem_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CoordinateSystem_descriptor();
template<typename T>
inline const std::string& CoordinateSystem_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CoordinateSystem>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CoordinateSystem_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CoordinateSystem_descriptor(), enum_t_value);
}
inline bool CoordinateSystem_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CoordinateSystem* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CoordinateSystem>(
    CoordinateSystem_descriptor(), name, value);
}
enum MagneticVariance : int {
  MV_WMM = 1,
  MV_TRUE = 2,
  MV_USER = 3
};
SDKDATA_EXPORT bool MagneticVariance_IsValid(int value);
constexpr MagneticVariance MagneticVariance_MIN = MV_WMM;
constexpr MagneticVariance MagneticVariance_MAX = MV_USER;
constexpr int MagneticVariance_ARRAYSIZE = MagneticVariance_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MagneticVariance_descriptor();
template<typename T>
inline const std::string& MagneticVariance_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MagneticVariance>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MagneticVariance_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MagneticVariance_descriptor(), enum_t_value);
}
inline bool MagneticVariance_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MagneticVariance* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MagneticVariance>(
    MagneticVariance_descriptor(), name, value);
}
enum VerticalDatum : int {
  VD_WGS84 = 1,
  VD_MSL = 2,
  VD_USER = 3
};
SDKDATA_EXPORT bool VerticalDatum_IsValid(int value);
constexpr VerticalDatum VerticalDatum_MIN = VD_WGS84;
constexpr VerticalDatum VerticalDatum_MAX = VD_USER;
constexpr int VerticalDatum_ARRAYSIZE = VerticalDatum_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VerticalDatum_descriptor();
template<typename T>
inline const std::string& VerticalDatum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VerticalDatum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VerticalDatum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VerticalDatum_descriptor(), enum_t_value);
}
inline bool VerticalDatum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VerticalDatum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VerticalDatum>(
    VerticalDatum_descriptor(), name, value);
}
enum PolygonFace : int {
  FRONT_AND_BACK = 0,
  FRONT = 1,
  BACK = 2
};
SDKDATA_EXPORT bool PolygonFace_IsValid(int value);
constexpr PolygonFace PolygonFace_MIN = FRONT_AND_BACK;
constexpr PolygonFace PolygonFace_MAX = BACK;
constexpr int PolygonFace_ARRAYSIZE = PolygonFace_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PolygonFace_descriptor();
template<typename T>
inline const std::string& PolygonFace_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PolygonFace>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PolygonFace_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PolygonFace_descriptor(), enum_t_value);
}
inline bool PolygonFace_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PolygonFace* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PolygonFace>(
    PolygonFace_descriptor(), name, value);
}
enum PolygonMode : int {
  POINT = 6912,
  LINE = 6913,
  FILL = 6914
};
SDKDATA_EXPORT bool PolygonMode_IsValid(int value);
constexpr PolygonMode PolygonMode_MIN = POINT;
constexpr PolygonMode PolygonMode_MAX = FILL;
constexpr int PolygonMode_ARRAYSIZE = PolygonMode_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PolygonMode_descriptor();
template<typename T>
inline const std::string& PolygonMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PolygonMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PolygonMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PolygonMode_descriptor(), enum_t_value);
}
inline bool PolygonMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PolygonMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PolygonMode>(
    PolygonMode_descriptor(), name, value);
}
enum CircleHilightShape : int {
  CH_PULSING_CIRCLE = 0,
  CH_CIRCLE = 1,
  CH_DIAMOND = 2,
  CH_SQUARE = 3,
  CH_SQUARE_RETICLE = 4
};
SDKDATA_EXPORT bool CircleHilightShape_IsValid(int value);
constexpr CircleHilightShape CircleHilightShape_MIN = CH_PULSING_CIRCLE;
constexpr CircleHilightShape CircleHilightShape_MAX = CH_SQUARE_RETICLE;
constexpr int CircleHilightShape_ARRAYSIZE = CircleHilightShape_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CircleHilightShape_descriptor();
template<typename T>
inline const std::string& CircleHilightShape_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CircleHilightShape>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CircleHilightShape_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CircleHilightShape_descriptor(), enum_t_value);
}
inline bool CircleHilightShape_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CircleHilightShape* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CircleHilightShape>(
    CircleHilightShape_descriptor(), name, value);
}
enum DynamicScaleAlgorithm : int {
  DSA_CONSISTENT_SIZING = 0,
  DSA_METERS_TO_PIXELS = 1
};
SDKDATA_EXPORT bool DynamicScaleAlgorithm_IsValid(int value);
constexpr DynamicScaleAlgorithm DynamicScaleAlgorithm_MIN = DSA_CONSISTENT_SIZING;
constexpr DynamicScaleAlgorithm DynamicScaleAlgorithm_MAX = DSA_METERS_TO_PIXELS;
constexpr int DynamicScaleAlgorithm_ARRAYSIZE = DynamicScaleAlgorithm_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DynamicScaleAlgorithm_descriptor();
template<typename T>
inline const std::string& DynamicScaleAlgorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DynamicScaleAlgorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DynamicScaleAlgorithm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DynamicScaleAlgorithm_descriptor(), enum_t_value);
}
inline bool DynamicScaleAlgorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DynamicScaleAlgorithm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DynamicScaleAlgorithm>(
    DynamicScaleAlgorithm_descriptor(), name, value);
}
enum AnimatedLineBend : int {
  ALB_AUTO = 0,
  ALB_STRAIGHT = 1,
  ALB_BEND = 2
};
SDKDATA_EXPORT bool AnimatedLineBend_IsValid(int value);
constexpr AnimatedLineBend AnimatedLineBend_MIN = ALB_AUTO;
constexpr AnimatedLineBend AnimatedLineBend_MAX = ALB_BEND;
constexpr int AnimatedLineBend_ARRAYSIZE = AnimatedLineBend_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnimatedLineBend_descriptor();
template<typename T>
inline const std::string& AnimatedLineBend_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnimatedLineBend>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnimatedLineBend_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnimatedLineBend_descriptor(), enum_t_value);
}
inline bool AnimatedLineBend_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnimatedLineBend* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnimatedLineBend>(
    AnimatedLineBend_descriptor(), name, value);
}
enum TextOutline : int {
  TO_NONE = 0,
  TO_THIN = 1,
  TO_THICK = 2
};
SDKDATA_EXPORT bool TextOutline_IsValid(int value);
constexpr TextOutline TextOutline_MIN = TO_NONE;
constexpr TextOutline TextOutline_MAX = TO_THICK;
constexpr int TextOutline_ARRAYSIZE = TextOutline_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextOutline_descriptor();
template<typename T>
inline const std::string& TextOutline_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextOutline>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextOutline_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextOutline_descriptor(), enum_t_value);
}
inline bool TextOutline_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TextOutline* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextOutline>(
    TextOutline_descriptor(), name, value);
}
enum BackdropType : int {
  BDT_SHADOW_BOTTOM_RIGHT = 0,
  BDT_SHADOW_CENTER_RIGHT = 1,
  BDT_SHADOW_TOP_RIGHT = 2,
  BDT_SHADOW_BOTTOM_CENTER = 3,
  BDT_SHADOW_TOP_CENTER = 4,
  BDT_SHADOW_BOTTOM_LEFT = 5,
  BDT_SHADOW_CENTER_LEFT = 6,
  BDT_SHADOW_TOP_LEFT = 7,
  BDT_OUTLINE = 8,
  BDT_NONE = 9
};
SDKDATA_EXPORT bool BackdropType_IsValid(int value);
constexpr BackdropType BackdropType_MIN = BDT_SHADOW_BOTTOM_RIGHT;
constexpr BackdropType BackdropType_MAX = BDT_NONE;
constexpr int BackdropType_ARRAYSIZE = BackdropType_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BackdropType_descriptor();
template<typename T>
inline const std::string& BackdropType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BackdropType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BackdropType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BackdropType_descriptor(), enum_t_value);
}
inline bool BackdropType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackdropType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BackdropType>(
    BackdropType_descriptor(), name, value);
}
enum BackdropImplementation : int {
  BDI_POLYGON_OFFSET = 0,
  BDI_NO_DEPTH_BUFFER = 1,
  BDI_DEPTH_RANGE = 2,
  BDI_STENCIL_BUFFER = 3,
  BDI_DELAYED_DEPTH_WRITES = 4
};
SDKDATA_EXPORT bool BackdropImplementation_IsValid(int value);
constexpr BackdropImplementation BackdropImplementation_MIN = BDI_POLYGON_OFFSET;
constexpr BackdropImplementation BackdropImplementation_MAX = BDI_DELAYED_DEPTH_WRITES;
constexpr int BackdropImplementation_ARRAYSIZE = BackdropImplementation_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BackdropImplementation_descriptor();
template<typename T>
inline const std::string& BackdropImplementation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BackdropImplementation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BackdropImplementation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BackdropImplementation_descriptor(), enum_t_value);
}
inline bool BackdropImplementation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackdropImplementation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BackdropImplementation>(
    BackdropImplementation_descriptor(), name, value);
}
enum TextAlignment : int {
  ALIGN_LEFT_TOP = 0,
  ALIGN_LEFT_CENTER = 1,
  ALIGN_LEFT_BOTTOM = 2,
  ALIGN_CENTER_TOP = 3,
  ALIGN_CENTER_CENTER = 4,
  ALIGN_CENTER_BOTTOM = 5,
  ALIGN_RIGHT_TOP = 6,
  ALIGN_RIGHT_CENTER = 7,
  ALIGN_RIGHT_BOTTOM = 8
};
SDKDATA_EXPORT bool TextAlignment_IsValid(int value);
constexpr TextAlignment TextAlignment_MIN = ALIGN_LEFT_TOP;
constexpr TextAlignment TextAlignment_MAX = ALIGN_RIGHT_BOTTOM;
constexpr int TextAlignment_ARRAYSIZE = TextAlignment_MAX + 1;

SDKDATA_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextAlignment_descriptor();
template<typename T>
inline const std::string& TextAlignment_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextAlignment>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextAlignment_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextAlignment_descriptor(), enum_t_value);
}
inline bool TextAlignment_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TextAlignment* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextAlignment>(
    TextAlignment_descriptor(), name, value);
}
// ===================================================================

class SDKDATA_EXPORT Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT BodyOrientation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.BodyOrientation) */ {
 public:
  inline BodyOrientation() : BodyOrientation(nullptr) {}
  virtual ~BodyOrientation();

  BodyOrientation(const BodyOrientation& from);
  BodyOrientation(BodyOrientation&& from) noexcept
    : BodyOrientation() {
    *this = ::std::move(from);
  }

  inline BodyOrientation& operator=(const BodyOrientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline BodyOrientation& operator=(BodyOrientation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BodyOrientation& default_instance();

  static inline const BodyOrientation* internal_default_instance() {
    return reinterpret_cast<const BodyOrientation*>(
               &_BodyOrientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BodyOrientation& a, BodyOrientation& b) {
    a.Swap(&b);
  }
  inline void Swap(BodyOrientation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BodyOrientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BodyOrientation* New() const final {
    return CreateMaybeMessage<BodyOrientation>(nullptr);
  }

  BodyOrientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BodyOrientation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BodyOrientation& from);
  void MergeFrom(const BodyOrientation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodyOrientation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.BodyOrientation";
  }
  protected:
  explicit BodyOrientation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYawFieldNumber = 1,
    kPitchFieldNumber = 2,
    kRollFieldNumber = 3,
  };
  // optional double yaw = 1;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // optional double pitch = 2;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // optional double roll = 3;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.BodyOrientation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double yaw_;
  double pitch_;
  double roll_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT Reference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.Reference) */ {
 public:
  inline Reference() : Reference(nullptr) {}
  virtual ~Reference();

  Reference(const Reference& from);
  Reference(Reference&& from) noexcept
    : Reference() {
    *this = ::std::move(from);
  }

  inline Reference& operator=(const Reference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reference& operator=(Reference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reference& default_instance();

  static inline const Reference* internal_default_instance() {
    return reinterpret_cast<const Reference*>(
               &_Reference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Reference& a, Reference& b) {
    a.Swap(&b);
  }
  inline void Swap(Reference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reference* New() const final {
    return CreateMaybeMessage<Reference>(nullptr);
  }

  Reference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reference& from);
  void MergeFrom(const Reference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.Reference";
  }
  protected:
  explicit Reference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLonFieldNumber = 2,
    kAltFieldNumber = 3,
  };
  // optional double lat = 1;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // optional double lon = 2;
  bool has_lon() const;
  private:
  bool _internal_has_lon() const;
  public:
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // optional double alt = 3;
  bool has_alt() const;
  private:
  bool _internal_has_alt() const;
  public:
  void clear_alt();
  double alt() const;
  void set_alt(double value);
  private:
  double _internal_alt() const;
  void _internal_set_alt(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.Reference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double lat_;
  double lon_;
  double alt_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT CoordinateFrame_TangentPlaneOffsets PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.CoordinateFrame.TangentPlaneOffsets) */ {
 public:
  inline CoordinateFrame_TangentPlaneOffsets() : CoordinateFrame_TangentPlaneOffsets(nullptr) {}
  virtual ~CoordinateFrame_TangentPlaneOffsets();

  CoordinateFrame_TangentPlaneOffsets(const CoordinateFrame_TangentPlaneOffsets& from);
  CoordinateFrame_TangentPlaneOffsets(CoordinateFrame_TangentPlaneOffsets&& from) noexcept
    : CoordinateFrame_TangentPlaneOffsets() {
    *this = ::std::move(from);
  }

  inline CoordinateFrame_TangentPlaneOffsets& operator=(const CoordinateFrame_TangentPlaneOffsets& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinateFrame_TangentPlaneOffsets& operator=(CoordinateFrame_TangentPlaneOffsets&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CoordinateFrame_TangentPlaneOffsets& default_instance();

  static inline const CoordinateFrame_TangentPlaneOffsets* internal_default_instance() {
    return reinterpret_cast<const CoordinateFrame_TangentPlaneOffsets*>(
               &_CoordinateFrame_TangentPlaneOffsets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CoordinateFrame_TangentPlaneOffsets& a, CoordinateFrame_TangentPlaneOffsets& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordinateFrame_TangentPlaneOffsets* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoordinateFrame_TangentPlaneOffsets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoordinateFrame_TangentPlaneOffsets* New() const final {
    return CreateMaybeMessage<CoordinateFrame_TangentPlaneOffsets>(nullptr);
  }

  CoordinateFrame_TangentPlaneOffsets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoordinateFrame_TangentPlaneOffsets>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CoordinateFrame_TangentPlaneOffsets& from);
  void MergeFrom(const CoordinateFrame_TangentPlaneOffsets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinateFrame_TangentPlaneOffsets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.CoordinateFrame.TangentPlaneOffsets";
  }
  protected:
  explicit CoordinateFrame_TangentPlaneOffsets(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
    kTyFieldNumber = 2,
    kAngleFieldNumber = 3,
  };
  // optional double tx = 1;
  bool has_tx() const;
  private:
  bool _internal_has_tx() const;
  public:
  void clear_tx();
  double tx() const;
  void set_tx(double value);
  private:
  double _internal_tx() const;
  void _internal_set_tx(double value);
  public:

  // optional double ty = 2;
  bool has_ty() const;
  private:
  bool _internal_has_ty() const;
  public:
  void clear_ty();
  double ty() const;
  void set_ty(double value);
  private:
  double _internal_ty() const;
  void _internal_set_ty(double value);
  public:

  // optional double angle = 3;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.CoordinateFrame.TangentPlaneOffsets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double tx_;
  double ty_;
  double angle_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT CoordinateFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.CoordinateFrame) */ {
 public:
  inline CoordinateFrame() : CoordinateFrame(nullptr) {}
  virtual ~CoordinateFrame();

  CoordinateFrame(const CoordinateFrame& from);
  CoordinateFrame(CoordinateFrame&& from) noexcept
    : CoordinateFrame() {
    *this = ::std::move(from);
  }

  inline CoordinateFrame& operator=(const CoordinateFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinateFrame& operator=(CoordinateFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CoordinateFrame& default_instance();

  static inline const CoordinateFrame* internal_default_instance() {
    return reinterpret_cast<const CoordinateFrame*>(
               &_CoordinateFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CoordinateFrame& a, CoordinateFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordinateFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoordinateFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoordinateFrame* New() const final {
    return CreateMaybeMessage<CoordinateFrame>(nullptr);
  }

  CoordinateFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoordinateFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CoordinateFrame& from);
  void MergeFrom(const CoordinateFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinateFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.CoordinateFrame";
  }
  protected:
  explicit CoordinateFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CoordinateFrame_TangentPlaneOffsets TangentPlaneOffsets;

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceLlaFieldNumber = 2,
    kTangentPlaneOffsetFieldNumber = 8,
    kMagneticVarianceUserValueFieldNumber = 4,
    kVerticalDatumUserValueFieldNumber = 6,
    kEciReferenceTimeFieldNumber = 7,
    kVerticalDatumFieldNumber = 5,
    kCoordinateSystemFieldNumber = 1,
    kMagneticVarianceFieldNumber = 3,
  };
  // optional .simData.Reference referenceLla = 2;
  bool has_referencella() const;
  private:
  bool _internal_has_referencella() const;
  public:
  void clear_referencella();
  const ::simData::Reference& referencella() const;
  ::simData::Reference* release_referencella();
  ::simData::Reference* mutable_referencella();
  void set_allocated_referencella(::simData::Reference* referencella);
  private:
  const ::simData::Reference& _internal_referencella() const;
  ::simData::Reference* _internal_mutable_referencella();
  public:
  void unsafe_arena_set_allocated_referencella(
      ::simData::Reference* referencella);
  ::simData::Reference* unsafe_arena_release_referencella();

  // optional .simData.CoordinateFrame.TangentPlaneOffsets tangentPlaneOffset = 8;
  bool has_tangentplaneoffset() const;
  private:
  bool _internal_has_tangentplaneoffset() const;
  public:
  void clear_tangentplaneoffset();
  const ::simData::CoordinateFrame_TangentPlaneOffsets& tangentplaneoffset() const;
  ::simData::CoordinateFrame_TangentPlaneOffsets* release_tangentplaneoffset();
  ::simData::CoordinateFrame_TangentPlaneOffsets* mutable_tangentplaneoffset();
  void set_allocated_tangentplaneoffset(::simData::CoordinateFrame_TangentPlaneOffsets* tangentplaneoffset);
  private:
  const ::simData::CoordinateFrame_TangentPlaneOffsets& _internal_tangentplaneoffset() const;
  ::simData::CoordinateFrame_TangentPlaneOffsets* _internal_mutable_tangentplaneoffset();
  public:
  void unsafe_arena_set_allocated_tangentplaneoffset(
      ::simData::CoordinateFrame_TangentPlaneOffsets* tangentplaneoffset);
  ::simData::CoordinateFrame_TangentPlaneOffsets* unsafe_arena_release_tangentplaneoffset();

  // optional double magneticVarianceUserValue = 4;
  bool has_magneticvarianceuservalue() const;
  private:
  bool _internal_has_magneticvarianceuservalue() const;
  public:
  void clear_magneticvarianceuservalue();
  double magneticvarianceuservalue() const;
  void set_magneticvarianceuservalue(double value);
  private:
  double _internal_magneticvarianceuservalue() const;
  void _internal_set_magneticvarianceuservalue(double value);
  public:

  // optional double verticalDatumUserValue = 6;
  bool has_verticaldatumuservalue() const;
  private:
  bool _internal_has_verticaldatumuservalue() const;
  public:
  void clear_verticaldatumuservalue();
  double verticaldatumuservalue() const;
  void set_verticaldatumuservalue(double value);
  private:
  double _internal_verticaldatumuservalue() const;
  void _internal_set_verticaldatumuservalue(double value);
  public:

  // optional double eciReferenceTime = 7;
  bool has_ecireferencetime() const;
  private:
  bool _internal_has_ecireferencetime() const;
  public:
  void clear_ecireferencetime();
  double ecireferencetime() const;
  void set_ecireferencetime(double value);
  private:
  double _internal_ecireferencetime() const;
  void _internal_set_ecireferencetime(double value);
  public:

  // optional .simData.VerticalDatum verticalDatum = 5;
  bool has_verticaldatum() const;
  private:
  bool _internal_has_verticaldatum() const;
  public:
  void clear_verticaldatum();
  ::simData::VerticalDatum verticaldatum() const;
  void set_verticaldatum(::simData::VerticalDatum value);
  private:
  ::simData::VerticalDatum _internal_verticaldatum() const;
  void _internal_set_verticaldatum(::simData::VerticalDatum value);
  public:

  // optional .simData.CoordinateSystem coordinateSystem = 1;
  bool has_coordinatesystem() const;
  private:
  bool _internal_has_coordinatesystem() const;
  public:
  void clear_coordinatesystem();
  ::simData::CoordinateSystem coordinatesystem() const;
  void set_coordinatesystem(::simData::CoordinateSystem value);
  private:
  ::simData::CoordinateSystem _internal_coordinatesystem() const;
  void _internal_set_coordinatesystem(::simData::CoordinateSystem value);
  public:

  // optional .simData.MagneticVariance magneticVariance = 3;
  bool has_magneticvariance() const;
  private:
  bool _internal_has_magneticvariance() const;
  public:
  void clear_magneticvariance();
  ::simData::MagneticVariance magneticvariance() const;
  void set_magneticvariance(::simData::MagneticVariance value);
  private:
  ::simData::MagneticVariance _internal_magneticvariance() const;
  void _internal_set_magneticvariance(::simData::MagneticVariance value);
  public:

  // @@protoc_insertion_point(class_scope:simData.CoordinateFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::simData::Reference* referencella_;
  ::simData::CoordinateFrame_TangentPlaneOffsets* tangentplaneoffset_;
  double magneticvarianceuservalue_;
  double verticaldatumuservalue_;
  double ecireferencetime_;
  int verticaldatum_;
  int coordinatesystem_;
  int magneticvariance_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT TimeTickPrefs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.TimeTickPrefs) */ {
 public:
  inline TimeTickPrefs() : TimeTickPrefs(nullptr) {}
  virtual ~TimeTickPrefs();

  TimeTickPrefs(const TimeTickPrefs& from);
  TimeTickPrefs(TimeTickPrefs&& from) noexcept
    : TimeTickPrefs() {
    *this = ::std::move(from);
  }

  inline TimeTickPrefs& operator=(const TimeTickPrefs& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeTickPrefs& operator=(TimeTickPrefs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeTickPrefs& default_instance();

  static inline const TimeTickPrefs* internal_default_instance() {
    return reinterpret_cast<const TimeTickPrefs*>(
               &_TimeTickPrefs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TimeTickPrefs& a, TimeTickPrefs& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeTickPrefs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeTickPrefs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeTickPrefs* New() const final {
    return CreateMaybeMessage<TimeTickPrefs>(nullptr);
  }

  TimeTickPrefs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeTickPrefs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeTickPrefs& from);
  void MergeFrom(const TimeTickPrefs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeTickPrefs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.TimeTickPrefs";
  }
  protected:
  explicit TimeTickPrefs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TimeTickPrefs_DrawStyle DrawStyle;
  static constexpr DrawStyle NONE =
    TimeTickPrefs_DrawStyle_NONE;
  static constexpr DrawStyle POINT =
    TimeTickPrefs_DrawStyle_POINT;
  static constexpr DrawStyle LINE =
    TimeTickPrefs_DrawStyle_LINE;
  static inline bool DrawStyle_IsValid(int value) {
    return TimeTickPrefs_DrawStyle_IsValid(value);
  }
  static constexpr DrawStyle DrawStyle_MIN =
    TimeTickPrefs_DrawStyle_DrawStyle_MIN;
  static constexpr DrawStyle DrawStyle_MAX =
    TimeTickPrefs_DrawStyle_DrawStyle_MAX;
  static constexpr int DrawStyle_ARRAYSIZE =
    TimeTickPrefs_DrawStyle_DrawStyle_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DrawStyle_descriptor() {
    return TimeTickPrefs_DrawStyle_descriptor();
  }
  template<typename T>
  static inline const std::string& DrawStyle_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DrawStyle>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DrawStyle_Name.");
    return TimeTickPrefs_DrawStyle_Name(enum_t_value);
  }
  static inline bool DrawStyle_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DrawStyle* value) {
    return TimeTickPrefs_DrawStyle_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFontNameFieldNumber = 6,
    kDrawStyleFieldNumber = 1,
    kLabelColorFieldNumber = 13,
    kIntervalFieldNumber = 3,
    kColorFieldNumber = 2,
    kLargeIntervalFactorFieldNumber = 4,
    kLabelIntervalFactorFieldNumber = 5,
    kLabelFontPointSizeFieldNumber = 7,
    kLineLengthFieldNumber = 8,
    kLargeSizeFactorFieldNumber = 9,
    kLabelTimeFormatFieldNumber = 10,
    kLineWidthFieldNumber = 11,
  };
  // optional string labelFontName = 6 [default = "arial.ttf"];
  bool has_labelfontname() const;
  private:
  bool _internal_has_labelfontname() const;
  public:
  void clear_labelfontname();
  const std::string& labelfontname() const;
  void set_labelfontname(const std::string& value);
  void set_labelfontname(std::string&& value);
  void set_labelfontname(const char* value);
  void set_labelfontname(const char* value, size_t size);
  std::string* mutable_labelfontname();
  std::string* release_labelfontname();
  void set_allocated_labelfontname(std::string* labelfontname);
  private:
  const std::string& _internal_labelfontname() const;
  void _internal_set_labelfontname(const std::string& value);
  std::string* _internal_mutable_labelfontname();
  public:

  // optional .simData.TimeTickPrefs.DrawStyle drawStyle = 1 [default = NONE];
  bool has_drawstyle() const;
  private:
  bool _internal_has_drawstyle() const;
  public:
  void clear_drawstyle();
  ::simData::TimeTickPrefs_DrawStyle drawstyle() const;
  void set_drawstyle(::simData::TimeTickPrefs_DrawStyle value);
  private:
  ::simData::TimeTickPrefs_DrawStyle _internal_drawstyle() const;
  void _internal_set_drawstyle(::simData::TimeTickPrefs_DrawStyle value);
  public:

  // optional fixed32 labelColor = 13 [default = 0];
  bool has_labelcolor() const;
  private:
  bool _internal_has_labelcolor() const;
  public:
  void clear_labelcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 labelcolor() const;
  void set_labelcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_labelcolor() const;
  void _internal_set_labelcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double interval = 3 [default = 10];
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  double interval() const;
  void set_interval(double value);
  private:
  double _internal_interval() const;
  void _internal_set_interval(double value);
  public:

  // optional fixed32 color = 2 [default = 4294967193];
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 largeIntervalFactor = 4 [default = 6];
  bool has_largeintervalfactor() const;
  private:
  bool _internal_has_largeintervalfactor() const;
  public:
  void clear_largeintervalfactor();
  ::PROTOBUF_NAMESPACE_ID::uint32 largeintervalfactor() const;
  void set_largeintervalfactor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_largeintervalfactor() const;
  void _internal_set_largeintervalfactor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 labelIntervalFactor = 5 [default = 6];
  bool has_labelintervalfactor() const;
  private:
  bool _internal_has_labelintervalfactor() const;
  public:
  void clear_labelintervalfactor();
  ::PROTOBUF_NAMESPACE_ID::uint32 labelintervalfactor() const;
  void set_labelintervalfactor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_labelintervalfactor() const;
  void _internal_set_labelintervalfactor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 labelFontPointSize = 7 [default = 12];
  bool has_labelfontpointsize() const;
  private:
  bool _internal_has_labelfontpointsize() const;
  public:
  void clear_labelfontpointsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 labelfontpointsize() const;
  void set_labelfontpointsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_labelfontpointsize() const;
  void _internal_set_labelfontpointsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double lineLength = 8 [default = 40];
  bool has_linelength() const;
  private:
  bool _internal_has_linelength() const;
  public:
  void clear_linelength();
  double linelength() const;
  void set_linelength(double value);
  private:
  double _internal_linelength() const;
  void _internal_set_linelength(double value);
  public:

  // optional uint32 largeSizeFactor = 9 [default = 2];
  bool has_largesizefactor() const;
  private:
  bool _internal_has_largesizefactor() const;
  public:
  void clear_largesizefactor();
  ::PROTOBUF_NAMESPACE_ID::uint32 largesizefactor() const;
  void set_largesizefactor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_largesizefactor() const;
  void _internal_set_largesizefactor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .simData.ElapsedTimeFormat labelTimeFormat = 10 [default = ELAPSED_HOURS];
  bool has_labeltimeformat() const;
  private:
  bool _internal_has_labeltimeformat() const;
  public:
  void clear_labeltimeformat();
  ::simData::ElapsedTimeFormat labeltimeformat() const;
  void set_labeltimeformat(::simData::ElapsedTimeFormat value);
  private:
  ::simData::ElapsedTimeFormat _internal_labeltimeformat() const;
  void _internal_set_labeltimeformat(::simData::ElapsedTimeFormat value);
  public:

  // optional double lineWidth = 11 [default = 2];
  bool has_linewidth() const;
  private:
  bool _internal_has_linewidth() const;
  public:
  void clear_linewidth();
  double linewidth() const;
  void set_linewidth(double value);
  private:
  double _internal_linewidth() const;
  void _internal_set_linewidth(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.TimeTickPrefs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_labelfontname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr labelfontname_;
  int drawstyle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 labelcolor_;
  double interval_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 largeintervalfactor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 labelintervalfactor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 labelfontpointsize_;
  double linelength_;
  ::PROTOBUF_NAMESPACE_ID::uint32 largesizefactor_;
  int labeltimeformat_;
  double linewidth_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT TrackPrefs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.TrackPrefs) */ {
 public:
  inline TrackPrefs() : TrackPrefs(nullptr) {}
  virtual ~TrackPrefs();

  TrackPrefs(const TrackPrefs& from);
  TrackPrefs(TrackPrefs&& from) noexcept
    : TrackPrefs() {
    *this = ::std::move(from);
  }

  inline TrackPrefs& operator=(const TrackPrefs& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackPrefs& operator=(TrackPrefs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackPrefs& default_instance();

  static inline const TrackPrefs* internal_default_instance() {
    return reinterpret_cast<const TrackPrefs*>(
               &_TrackPrefs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrackPrefs& a, TrackPrefs& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackPrefs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackPrefs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackPrefs* New() const final {
    return CreateMaybeMessage<TrackPrefs>(nullptr);
  }

  TrackPrefs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackPrefs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackPrefs& from);
  void MergeFrom(const TrackPrefs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackPrefs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.TrackPrefs";
  }
  protected:
  explicit TrackPrefs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrackPrefs_Mode Mode;
  static constexpr Mode OFF =
    TrackPrefs_Mode_OFF;
  static constexpr Mode POINT =
    TrackPrefs_Mode_POINT;
  static constexpr Mode LINE =
    TrackPrefs_Mode_LINE;
  static constexpr Mode RIBBON =
    TrackPrefs_Mode_RIBBON;
  static constexpr Mode BRIDGE =
    TrackPrefs_Mode_BRIDGE;
  static inline bool Mode_IsValid(int value) {
    return TrackPrefs_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    TrackPrefs_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    TrackPrefs_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    TrackPrefs_Mode_Mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Mode_descriptor() {
    return TrackPrefs_Mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return TrackPrefs_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Mode* value) {
    return TrackPrefs_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimeTicksFieldNumber = 12,
    kFlatModeFieldNumber = 3,
    kAltModeFieldNumber = 4,
    kExpireModeFieldNumber = 5,
    kUsePlatformColorFieldNumber = 6,
    kUseTrackOverrideColorFieldNumber = 7,
    kTrackDrawModeFieldNumber = 11,
    kTrackColorFieldNumber = 1,
    kMultiTrackColorFieldNumber = 2,
    kTrackOverrideColorFieldNumber = 8,
    kTrackLengthFieldNumber = 9,
    kLineWidthFieldNumber = 10,
  };
  // optional .simData.TimeTickPrefs timeTicks = 12;
  bool has_timeticks() const;
  private:
  bool _internal_has_timeticks() const;
  public:
  void clear_timeticks();
  const ::simData::TimeTickPrefs& timeticks() const;
  ::simData::TimeTickPrefs* release_timeticks();
  ::simData::TimeTickPrefs* mutable_timeticks();
  void set_allocated_timeticks(::simData::TimeTickPrefs* timeticks);
  private:
  const ::simData::TimeTickPrefs& _internal_timeticks() const;
  ::simData::TimeTickPrefs* _internal_mutable_timeticks();
  public:
  void unsafe_arena_set_allocated_timeticks(
      ::simData::TimeTickPrefs* timeticks);
  ::simData::TimeTickPrefs* unsafe_arena_release_timeticks();

  // optional bool flatMode = 3 [default = false];
  bool has_flatmode() const;
  private:
  bool _internal_has_flatmode() const;
  public:
  void clear_flatmode();
  bool flatmode() const;
  void set_flatmode(bool value);
  private:
  bool _internal_flatmode() const;
  void _internal_set_flatmode(bool value);
  public:

  // optional bool altMode = 4 [default = false];
  bool has_altmode() const;
  private:
  bool _internal_has_altmode() const;
  public:
  void clear_altmode();
  bool altmode() const;
  void set_altmode(bool value);
  private:
  bool _internal_altmode() const;
  void _internal_set_altmode(bool value);
  public:

  // optional bool expireMode = 5 [default = false];
  bool has_expiremode() const;
  private:
  bool _internal_has_expiremode() const;
  public:
  void clear_expiremode();
  bool expiremode() const;
  void set_expiremode(bool value);
  private:
  bool _internal_expiremode() const;
  void _internal_set_expiremode(bool value);
  public:

  // optional bool usePlatformColor = 6 [default = false];
  bool has_useplatformcolor() const;
  private:
  bool _internal_has_useplatformcolor() const;
  public:
  void clear_useplatformcolor();
  bool useplatformcolor() const;
  void set_useplatformcolor(bool value);
  private:
  bool _internal_useplatformcolor() const;
  void _internal_set_useplatformcolor(bool value);
  public:

  // optional bool useTrackOverrideColor = 7 [default = false];
  bool has_usetrackoverridecolor() const;
  private:
  bool _internal_has_usetrackoverridecolor() const;
  public:
  void clear_usetrackoverridecolor();
  bool usetrackoverridecolor() const;
  void set_usetrackoverridecolor(bool value);
  private:
  bool _internal_usetrackoverridecolor() const;
  void _internal_set_usetrackoverridecolor(bool value);
  public:

  // optional .simData.TrackPrefs.Mode trackDrawMode = 11 [default = POINT];
  bool has_trackdrawmode() const;
  private:
  bool _internal_has_trackdrawmode() const;
  public:
  void clear_trackdrawmode();
  ::simData::TrackPrefs_Mode trackdrawmode() const;
  void set_trackdrawmode(::simData::TrackPrefs_Mode value);
  private:
  ::simData::TrackPrefs_Mode _internal_trackdrawmode() const;
  void _internal_set_trackdrawmode(::simData::TrackPrefs_Mode value);
  public:

  // optional fixed32 trackColor = 1 [default = 4227595263];
  bool has_trackcolor() const;
  private:
  bool _internal_has_trackcolor() const;
  public:
  void clear_trackcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 trackcolor() const;
  void set_trackcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trackcolor() const;
  void _internal_set_trackcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool multiTrackColor = 2 [default = true];
  bool has_multitrackcolor() const;
  private:
  bool _internal_has_multitrackcolor() const;
  public:
  void clear_multitrackcolor();
  bool multitrackcolor() const;
  void set_multitrackcolor(bool value);
  private:
  bool _internal_multitrackcolor() const;
  void _internal_set_multitrackcolor(bool value);
  public:

  // optional fixed32 trackOverrideColor = 8 [default = 434438399];
  bool has_trackoverridecolor() const;
  private:
  bool _internal_has_trackoverridecolor() const;
  public:
  void clear_trackoverridecolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 trackoverridecolor() const;
  void set_trackoverridecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trackoverridecolor() const;
  void _internal_set_trackoverridecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 trackLength = 9 [default = 60];
  bool has_tracklength() const;
  private:
  bool _internal_has_tracklength() const;
  public:
  void clear_tracklength();
  ::PROTOBUF_NAMESPACE_ID::int32 tracklength() const;
  void set_tracklength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tracklength() const;
  void _internal_set_tracklength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double lineWidth = 10 [default = 1];
  bool has_linewidth() const;
  private:
  bool _internal_has_linewidth() const;
  public:
  void clear_linewidth();
  double linewidth() const;
  void set_linewidth(double value);
  private:
  double _internal_linewidth() const;
  void _internal_set_linewidth(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.TrackPrefs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::simData::TimeTickPrefs* timeticks_;
  bool flatmode_;
  bool altmode_;
  bool expiremode_;
  bool useplatformcolor_;
  bool usetrackoverridecolor_;
  int trackdrawmode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trackcolor_;
  bool multitrackcolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trackoverridecolor_;
  ::PROTOBUF_NAMESPACE_ID::int32 tracklength_;
  double linewidth_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT LabelPrefs_DisplayFields PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.LabelPrefs.DisplayFields) */ {
 public:
  inline LabelPrefs_DisplayFields() : LabelPrefs_DisplayFields(nullptr) {}
  virtual ~LabelPrefs_DisplayFields();

  LabelPrefs_DisplayFields(const LabelPrefs_DisplayFields& from);
  LabelPrefs_DisplayFields(LabelPrefs_DisplayFields&& from) noexcept
    : LabelPrefs_DisplayFields() {
    *this = ::std::move(from);
  }

  inline LabelPrefs_DisplayFields& operator=(const LabelPrefs_DisplayFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelPrefs_DisplayFields& operator=(LabelPrefs_DisplayFields&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelPrefs_DisplayFields& default_instance();

  static inline const LabelPrefs_DisplayFields* internal_default_instance() {
    return reinterpret_cast<const LabelPrefs_DisplayFields*>(
               &_LabelPrefs_DisplayFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LabelPrefs_DisplayFields& a, LabelPrefs_DisplayFields& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelPrefs_DisplayFields* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelPrefs_DisplayFields* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelPrefs_DisplayFields* New() const final {
    return CreateMaybeMessage<LabelPrefs_DisplayFields>(nullptr);
  }

  LabelPrefs_DisplayFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelPrefs_DisplayFields>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelPrefs_DisplayFields& from);
  void MergeFrom(const LabelPrefs_DisplayFields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelPrefs_DisplayFields* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.LabelPrefs.DisplayFields";
  }
  protected:
  explicit LabelPrefs_DisplayFields(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelCodeFieldNumber = 29,
    kXLatFieldNumber = 1,
    kYLonFieldNumber = 2,
    kZAltFieldNumber = 3,
    kGenericDataFieldNumber = 4,
    kCategoryDataFieldNumber = 5,
    kYawFieldNumber = 6,
    kPitchFieldNumber = 7,
    kRollFieldNumber = 8,
    kCourseFieldNumber = 11,
    kFlightPathElevationFieldNumber = 12,
    kDisplayVXFieldNumber = 13,
    kDisplayVYFieldNumber = 14,
    kDisplayVZFieldNumber = 15,
    kSpeedFieldNumber = 16,
    kMachFieldNumber = 17,
    kAngleOfAttackFieldNumber = 18,
    kSideSlipFieldNumber = 19,
    kTotalAngleOfAttackFieldNumber = 20,
    kSolarAzimuthFieldNumber = 21,
    kSolarElevationFieldNumber = 22,
    kSolarIlluminanceFieldNumber = 23,
    kLunarAzimuthFieldNumber = 24,
    kLunarElevationFieldNumber = 25,
    kLunarIlluminanceFieldNumber = 26,
    kLateFieldNumber = 27,
    kUseLabelCodeFieldNumber = 28,
  };
  // optional string labelCode = 29 [default = ""];
  bool has_labelcode() const;
  private:
  bool _internal_has_labelcode() const;
  public:
  void clear_labelcode();
  const std::string& labelcode() const;
  void set_labelcode(const std::string& value);
  void set_labelcode(std::string&& value);
  void set_labelcode(const char* value);
  void set_labelcode(const char* value, size_t size);
  std::string* mutable_labelcode();
  std::string* release_labelcode();
  void set_allocated_labelcode(std::string* labelcode);
  private:
  const std::string& _internal_labelcode() const;
  void _internal_set_labelcode(const std::string& value);
  std::string* _internal_mutable_labelcode();
  public:

  // optional bool xLat = 1 [default = false];
  bool has_xlat() const;
  private:
  bool _internal_has_xlat() const;
  public:
  void clear_xlat();
  bool xlat() const;
  void set_xlat(bool value);
  private:
  bool _internal_xlat() const;
  void _internal_set_xlat(bool value);
  public:

  // optional bool yLon = 2 [default = false];
  bool has_ylon() const;
  private:
  bool _internal_has_ylon() const;
  public:
  void clear_ylon();
  bool ylon() const;
  void set_ylon(bool value);
  private:
  bool _internal_ylon() const;
  void _internal_set_ylon(bool value);
  public:

  // optional bool zAlt = 3 [default = false];
  bool has_zalt() const;
  private:
  bool _internal_has_zalt() const;
  public:
  void clear_zalt();
  bool zalt() const;
  void set_zalt(bool value);
  private:
  bool _internal_zalt() const;
  void _internal_set_zalt(bool value);
  public:

  // optional bool genericData = 4 [default = false];
  bool has_genericdata() const;
  private:
  bool _internal_has_genericdata() const;
  public:
  void clear_genericdata();
  bool genericdata() const;
  void set_genericdata(bool value);
  private:
  bool _internal_genericdata() const;
  void _internal_set_genericdata(bool value);
  public:

  // optional bool categoryData = 5 [default = false];
  bool has_categorydata() const;
  private:
  bool _internal_has_categorydata() const;
  public:
  void clear_categorydata();
  bool categorydata() const;
  void set_categorydata(bool value);
  private:
  bool _internal_categorydata() const;
  void _internal_set_categorydata(bool value);
  public:

  // optional bool yaw = 6 [default = false];
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  bool yaw() const;
  void set_yaw(bool value);
  private:
  bool _internal_yaw() const;
  void _internal_set_yaw(bool value);
  public:

  // optional bool pitch = 7 [default = false];
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  bool pitch() const;
  void set_pitch(bool value);
  private:
  bool _internal_pitch() const;
  void _internal_set_pitch(bool value);
  public:

  // optional bool roll = 8 [default = false];
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  bool roll() const;
  void set_roll(bool value);
  private:
  bool _internal_roll() const;
  void _internal_set_roll(bool value);
  public:

  // optional bool course = 11 [default = false];
  bool has_course() const;
  private:
  bool _internal_has_course() const;
  public:
  void clear_course();
  bool course() const;
  void set_course(bool value);
  private:
  bool _internal_course() const;
  void _internal_set_course(bool value);
  public:

  // optional bool flightPathElevation = 12 [default = false];
  bool has_flightpathelevation() const;
  private:
  bool _internal_has_flightpathelevation() const;
  public:
  void clear_flightpathelevation();
  bool flightpathelevation() const;
  void set_flightpathelevation(bool value);
  private:
  bool _internal_flightpathelevation() const;
  void _internal_set_flightpathelevation(bool value);
  public:

  // optional bool displayVX = 13 [default = false];
  bool has_displayvx() const;
  private:
  bool _internal_has_displayvx() const;
  public:
  void clear_displayvx();
  bool displayvx() const;
  void set_displayvx(bool value);
  private:
  bool _internal_displayvx() const;
  void _internal_set_displayvx(bool value);
  public:

  // optional bool displayVY = 14 [default = false];
  bool has_displayvy() const;
  private:
  bool _internal_has_displayvy() const;
  public:
  void clear_displayvy();
  bool displayvy() const;
  void set_displayvy(bool value);
  private:
  bool _internal_displayvy() const;
  void _internal_set_displayvy(bool value);
  public:

  // optional bool displayVZ = 15 [default = false];
  bool has_displayvz() const;
  private:
  bool _internal_has_displayvz() const;
  public:
  void clear_displayvz();
  bool displayvz() const;
  void set_displayvz(bool value);
  private:
  bool _internal_displayvz() const;
  void _internal_set_displayvz(bool value);
  public:

  // optional bool speed = 16 [default = false];
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  bool speed() const;
  void set_speed(bool value);
  private:
  bool _internal_speed() const;
  void _internal_set_speed(bool value);
  public:

  // optional bool mach = 17 [default = false];
  bool has_mach() const;
  private:
  bool _internal_has_mach() const;
  public:
  void clear_mach();
  bool mach() const;
  void set_mach(bool value);
  private:
  bool _internal_mach() const;
  void _internal_set_mach(bool value);
  public:

  // optional bool angleOfAttack = 18 [default = false];
  bool has_angleofattack() const;
  private:
  bool _internal_has_angleofattack() const;
  public:
  void clear_angleofattack();
  bool angleofattack() const;
  void set_angleofattack(bool value);
  private:
  bool _internal_angleofattack() const;
  void _internal_set_angleofattack(bool value);
  public:

  // optional bool sideSlip = 19 [default = false];
  bool has_sideslip() const;
  private:
  bool _internal_has_sideslip() const;
  public:
  void clear_sideslip();
  bool sideslip() const;
  void set_sideslip(bool value);
  private:
  bool _internal_sideslip() const;
  void _internal_set_sideslip(bool value);
  public:

  // optional bool totalAngleOfAttack = 20 [default = false];
  bool has_totalangleofattack() const;
  private:
  bool _internal_has_totalangleofattack() const;
  public:
  void clear_totalangleofattack();
  bool totalangleofattack() const;
  void set_totalangleofattack(bool value);
  private:
  bool _internal_totalangleofattack() const;
  void _internal_set_totalangleofattack(bool value);
  public:

  // optional bool solarAzimuth = 21 [default = false];
  bool has_solarazimuth() const;
  private:
  bool _internal_has_solarazimuth() const;
  public:
  void clear_solarazimuth();
  bool solarazimuth() const;
  void set_solarazimuth(bool value);
  private:
  bool _internal_solarazimuth() const;
  void _internal_set_solarazimuth(bool value);
  public:

  // optional bool solarElevation = 22 [default = false];
  bool has_solarelevation() const;
  private:
  bool _internal_has_solarelevation() const;
  public:
  void clear_solarelevation();
  bool solarelevation() const;
  void set_solarelevation(bool value);
  private:
  bool _internal_solarelevation() const;
  void _internal_set_solarelevation(bool value);
  public:

  // optional bool solarIlluminance = 23 [default = false];
  bool has_solarilluminance() const;
  private:
  bool _internal_has_solarilluminance() const;
  public:
  void clear_solarilluminance();
  bool solarilluminance() const;
  void set_solarilluminance(bool value);
  private:
  bool _internal_solarilluminance() const;
  void _internal_set_solarilluminance(bool value);
  public:

  // optional bool lunarAzimuth = 24 [default = false];
  bool has_lunarazimuth() const;
  private:
  bool _internal_has_lunarazimuth() const;
  public:
  void clear_lunarazimuth();
  bool lunarazimuth() const;
  void set_lunarazimuth(bool value);
  private:
  bool _internal_lunarazimuth() const;
  void _internal_set_lunarazimuth(bool value);
  public:

  // optional bool lunarElevation = 25 [default = false];
  bool has_lunarelevation() const;
  private:
  bool _internal_has_lunarelevation() const;
  public:
  void clear_lunarelevation();
  bool lunarelevation() const;
  void set_lunarelevation(bool value);
  private:
  bool _internal_lunarelevation() const;
  void _internal_set_lunarelevation(bool value);
  public:

  // optional bool lunarIlluminance = 26 [default = false];
  bool has_lunarilluminance() const;
  private:
  bool _internal_has_lunarilluminance() const;
  public:
  void clear_lunarilluminance();
  bool lunarilluminance() const;
  void set_lunarilluminance(bool value);
  private:
  bool _internal_lunarilluminance() const;
  void _internal_set_lunarilluminance(bool value);
  public:

  // optional bool late = 27 [default = false];
  bool has_late() const;
  private:
  bool _internal_has_late() const;
  public:
  void clear_late();
  bool late() const;
  void set_late(bool value);
  private:
  bool _internal_late() const;
  void _internal_set_late(bool value);
  public:

  // optional bool useLabelCode = 28 [default = false];
  bool has_uselabelcode() const;
  private:
  bool _internal_has_uselabelcode() const;
  public:
  void clear_uselabelcode();
  bool uselabelcode() const;
  void set_uselabelcode(bool value);
  private:
  bool _internal_uselabelcode() const;
  void _internal_set_uselabelcode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:simData.LabelPrefs.DisplayFields)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr labelcode_;
  bool xlat_;
  bool ylon_;
  bool zalt_;
  bool genericdata_;
  bool categorydata_;
  bool yaw_;
  bool pitch_;
  bool roll_;
  bool course_;
  bool flightpathelevation_;
  bool displayvx_;
  bool displayvy_;
  bool displayvz_;
  bool speed_;
  bool mach_;
  bool angleofattack_;
  bool sideslip_;
  bool totalangleofattack_;
  bool solarazimuth_;
  bool solarelevation_;
  bool solarilluminance_;
  bool lunarazimuth_;
  bool lunarelevation_;
  bool lunarilluminance_;
  bool late_;
  bool uselabelcode_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT LabelPrefs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.LabelPrefs) */ {
 public:
  inline LabelPrefs() : LabelPrefs(nullptr) {}
  virtual ~LabelPrefs();

  LabelPrefs(const LabelPrefs& from);
  LabelPrefs(LabelPrefs&& from) noexcept
    : LabelPrefs() {
    *this = ::std::move(from);
  }

  inline LabelPrefs& operator=(const LabelPrefs& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelPrefs& operator=(LabelPrefs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelPrefs& default_instance();

  static inline const LabelPrefs* internal_default_instance() {
    return reinterpret_cast<const LabelPrefs*>(
               &_LabelPrefs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LabelPrefs& a, LabelPrefs& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelPrefs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelPrefs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelPrefs* New() const final {
    return CreateMaybeMessage<LabelPrefs>(nullptr);
  }

  LabelPrefs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelPrefs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelPrefs& from);
  void MergeFrom(const LabelPrefs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelPrefs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.LabelPrefs";
  }
  protected:
  explicit LabelPrefs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LabelPrefs_DisplayFields DisplayFields;

  typedef LabelPrefs_UseValue UseValue;
  static constexpr UseValue ACTUAL_VALUE =
    LabelPrefs_UseValue_ACTUAL_VALUE;
  static constexpr UseValue DISPLAY_VALUE =
    LabelPrefs_UseValue_DISPLAY_VALUE;
  static inline bool UseValue_IsValid(int value) {
    return LabelPrefs_UseValue_IsValid(value);
  }
  static constexpr UseValue UseValue_MIN =
    LabelPrefs_UseValue_UseValue_MIN;
  static constexpr UseValue UseValue_MAX =
    LabelPrefs_UseValue_UseValue_MAX;
  static constexpr int UseValue_ARRAYSIZE =
    LabelPrefs_UseValue_UseValue_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UseValue_descriptor() {
    return LabelPrefs_UseValue_descriptor();
  }
  template<typename T>
  static inline const std::string& UseValue_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UseValue>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UseValue_Name.");
    return LabelPrefs_UseValue_Name(enum_t_value);
  }
  static inline bool UseValue_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UseValue* value) {
    return LabelPrefs_UseValue_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOverlayFontNameFieldNumber = 5,
    kDisplayFieldsFieldNumber = 11,
    kLegendDisplayFieldsFieldNumber = 22,
    kHoverDisplayFieldsFieldNumber = 23,
    kHookDisplayFieldsFieldNumber = 36,
    kOffsetXFieldNumber = 7,
    kOffsetYFieldNumber = 8,
    kDrawFieldNumber = 1,
    kApplyHeightAboveTerrainFieldNumber = 12,
    kApplyRollFieldNumber = 13,
    kNameLengthFieldNumber = 21,
    kTimePrecisionFieldNumber = 32,
    kBackdropImplementationFieldNumber = 34,
    kUseValuesFieldNumber = 37,
    kColorFieldNumber = 2,
    kTextOutlineFieldNumber = 3,
    kOutlineColorFieldNumber = 4,
    kOverlayFontPointSizeFieldNumber = 6,
    kCoordinateSystemFieldNumber = 14,
    kVerticalDatumFieldNumber = 15,
    kMagneticVarianceFieldNumber = 16,
    kDistanceUnitsFieldNumber = 17,
    kAngleUnitsFieldNumber = 18,
    kSpeedUnitsFieldNumber = 19,
    kPrecisionFieldNumber = 20,
    kGeodeticUnitsFieldNumber = 24,
    kPriorityFieldNumber = 26,
    kAltitudeUnitsFieldNumber = 25,
    kDistancePrecisionFieldNumber = 27,
    kAnglePrecisionFieldNumber = 28,
    kSpeedPrecisionFieldNumber = 29,
    kGeodeticPrecisionFieldNumber = 30,
    kAltitudePrecisionFieldNumber = 31,
    kBackdropTypeFieldNumber = 33,
    kAlignmentFieldNumber = 35,
  };
  // optional string overlayFontName = 5 [default = "arial.ttf"];
  bool has_overlayfontname() const;
  private:
  bool _internal_has_overlayfontname() const;
  public:
  void clear_overlayfontname();
  const std::string& overlayfontname() const;
  void set_overlayfontname(const std::string& value);
  void set_overlayfontname(std::string&& value);
  void set_overlayfontname(const char* value);
  void set_overlayfontname(const char* value, size_t size);
  std::string* mutable_overlayfontname();
  std::string* release_overlayfontname();
  void set_allocated_overlayfontname(std::string* overlayfontname);
  private:
  const std::string& _internal_overlayfontname() const;
  void _internal_set_overlayfontname(const std::string& value);
  std::string* _internal_mutable_overlayfontname();
  public:

  // optional .simData.LabelPrefs.DisplayFields displayFields = 11;
  bool has_displayfields() const;
  private:
  bool _internal_has_displayfields() const;
  public:
  void clear_displayfields();
  const ::simData::LabelPrefs_DisplayFields& displayfields() const;
  ::simData::LabelPrefs_DisplayFields* release_displayfields();
  ::simData::LabelPrefs_DisplayFields* mutable_displayfields();
  void set_allocated_displayfields(::simData::LabelPrefs_DisplayFields* displayfields);
  private:
  const ::simData::LabelPrefs_DisplayFields& _internal_displayfields() const;
  ::simData::LabelPrefs_DisplayFields* _internal_mutable_displayfields();
  public:
  void unsafe_arena_set_allocated_displayfields(
      ::simData::LabelPrefs_DisplayFields* displayfields);
  ::simData::LabelPrefs_DisplayFields* unsafe_arena_release_displayfields();

  // optional .simData.LabelPrefs.DisplayFields legendDisplayFields = 22;
  bool has_legenddisplayfields() const;
  private:
  bool _internal_has_legenddisplayfields() const;
  public:
  void clear_legenddisplayfields();
  const ::simData::LabelPrefs_DisplayFields& legenddisplayfields() const;
  ::simData::LabelPrefs_DisplayFields* release_legenddisplayfields();
  ::simData::LabelPrefs_DisplayFields* mutable_legenddisplayfields();
  void set_allocated_legenddisplayfields(::simData::LabelPrefs_DisplayFields* legenddisplayfields);
  private:
  const ::simData::LabelPrefs_DisplayFields& _internal_legenddisplayfields() const;
  ::simData::LabelPrefs_DisplayFields* _internal_mutable_legenddisplayfields();
  public:
  void unsafe_arena_set_allocated_legenddisplayfields(
      ::simData::LabelPrefs_DisplayFields* legenddisplayfields);
  ::simData::LabelPrefs_DisplayFields* unsafe_arena_release_legenddisplayfields();

  // optional .simData.LabelPrefs.DisplayFields hoverDisplayFields = 23;
  bool has_hoverdisplayfields() const;
  private:
  bool _internal_has_hoverdisplayfields() const;
  public:
  void clear_hoverdisplayfields();
  const ::simData::LabelPrefs_DisplayFields& hoverdisplayfields() const;
  ::simData::LabelPrefs_DisplayFields* release_hoverdisplayfields();
  ::simData::LabelPrefs_DisplayFields* mutable_hoverdisplayfields();
  void set_allocated_hoverdisplayfields(::simData::LabelPrefs_DisplayFields* hoverdisplayfields);
  private:
  const ::simData::LabelPrefs_DisplayFields& _internal_hoverdisplayfields() const;
  ::simData::LabelPrefs_DisplayFields* _internal_mutable_hoverdisplayfields();
  public:
  void unsafe_arena_set_allocated_hoverdisplayfields(
      ::simData::LabelPrefs_DisplayFields* hoverdisplayfields);
  ::simData::LabelPrefs_DisplayFields* unsafe_arena_release_hoverdisplayfields();

  // optional .simData.LabelPrefs.DisplayFields hookDisplayFields = 36;
  bool has_hookdisplayfields() const;
  private:
  bool _internal_has_hookdisplayfields() const;
  public:
  void clear_hookdisplayfields();
  const ::simData::LabelPrefs_DisplayFields& hookdisplayfields() const;
  ::simData::LabelPrefs_DisplayFields* release_hookdisplayfields();
  ::simData::LabelPrefs_DisplayFields* mutable_hookdisplayfields();
  void set_allocated_hookdisplayfields(::simData::LabelPrefs_DisplayFields* hookdisplayfields);
  private:
  const ::simData::LabelPrefs_DisplayFields& _internal_hookdisplayfields() const;
  ::simData::LabelPrefs_DisplayFields* _internal_mutable_hookdisplayfields();
  public:
  void unsafe_arena_set_allocated_hookdisplayfields(
      ::simData::LabelPrefs_DisplayFields* hookdisplayfields);
  ::simData::LabelPrefs_DisplayFields* unsafe_arena_release_hookdisplayfields();

  // optional int32 offsetX = 7 [default = 0];
  bool has_offsetx() const;
  private:
  bool _internal_has_offsetx() const;
  public:
  void clear_offsetx();
  ::PROTOBUF_NAMESPACE_ID::int32 offsetx() const;
  void set_offsetx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offsetx() const;
  void _internal_set_offsetx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 offsetY = 8 [default = 0];
  bool has_offsety() const;
  private:
  bool _internal_has_offsety() const;
  public:
  void clear_offsety();
  ::PROTOBUF_NAMESPACE_ID::int32 offsety() const;
  void set_offsety(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offsety() const;
  void _internal_set_offsety(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool draw = 1 [default = false];
  bool has_draw() const;
  private:
  bool _internal_has_draw() const;
  public:
  void clear_draw();
  bool draw() const;
  void set_draw(bool value);
  private:
  bool _internal_draw() const;
  void _internal_set_draw(bool value);
  public:

  // optional bool applyHeightAboveTerrain = 12 [default = false];
  bool has_applyheightaboveterrain() const;
  private:
  bool _internal_has_applyheightaboveterrain() const;
  public:
  void clear_applyheightaboveterrain();
  bool applyheightaboveterrain() const;
  void set_applyheightaboveterrain(bool value);
  private:
  bool _internal_applyheightaboveterrain() const;
  void _internal_set_applyheightaboveterrain(bool value);
  public:

  // optional bool applyRoll = 13 [default = false];
  bool has_applyroll() const;
  private:
  bool _internal_has_applyroll() const;
  public:
  void clear_applyroll();
  bool applyroll() const;
  void set_applyroll(bool value);
  private:
  bool _internal_applyroll() const;
  void _internal_set_applyroll(bool value);
  public:

  // optional int32 nameLength = 21 [default = 0];
  bool has_namelength() const;
  private:
  bool _internal_has_namelength() const;
  public:
  void clear_namelength();
  ::PROTOBUF_NAMESPACE_ID::int32 namelength() const;
  void set_namelength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_namelength() const;
  void _internal_set_namelength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 timePrecision = 32 [default = 0];
  bool has_timeprecision() const;
  private:
  bool _internal_has_timeprecision() const;
  public:
  void clear_timeprecision();
  ::PROTOBUF_NAMESPACE_ID::int32 timeprecision() const;
  void set_timeprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeprecision() const;
  void _internal_set_timeprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .simData.BackdropImplementation backdropImplementation = 34 [default = BDI_POLYGON_OFFSET];
  bool has_backdropimplementation() const;
  private:
  bool _internal_has_backdropimplementation() const;
  public:
  void clear_backdropimplementation();
  ::simData::BackdropImplementation backdropimplementation() const;
  void set_backdropimplementation(::simData::BackdropImplementation value);
  private:
  ::simData::BackdropImplementation _internal_backdropimplementation() const;
  void _internal_set_backdropimplementation(::simData::BackdropImplementation value);
  public:

  // optional .simData.LabelPrefs.UseValue useValues = 37 [default = DISPLAY_VALUE];
  bool has_usevalues() const;
  private:
  bool _internal_has_usevalues() const;
  public:
  void clear_usevalues();
  ::simData::LabelPrefs_UseValue usevalues() const;
  void set_usevalues(::simData::LabelPrefs_UseValue value);
  private:
  ::simData::LabelPrefs_UseValue _internal_usevalues() const;
  void _internal_set_usevalues(::simData::LabelPrefs_UseValue value);
  public:

  // optional fixed32 color = 2 [default = 4227595263];
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .simData.TextOutline textOutline = 3 [default = TO_THIN];
  bool has_textoutline() const;
  private:
  bool _internal_has_textoutline() const;
  public:
  void clear_textoutline();
  ::simData::TextOutline textoutline() const;
  void set_textoutline(::simData::TextOutline value);
  private:
  ::simData::TextOutline _internal_textoutline() const;
  void _internal_set_textoutline(::simData::TextOutline value);
  public:

  // optional fixed32 outlineColor = 4 [default = 255];
  bool has_outlinecolor() const;
  private:
  bool _internal_has_outlinecolor() const;
  public:
  void clear_outlinecolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 outlinecolor() const;
  void set_outlinecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outlinecolor() const;
  void _internal_set_outlinecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 overlayFontPointSize = 6 [default = 14];
  bool has_overlayfontpointsize() const;
  private:
  bool _internal_has_overlayfontpointsize() const;
  public:
  void clear_overlayfontpointsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 overlayfontpointsize() const;
  void set_overlayfontpointsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_overlayfontpointsize() const;
  void _internal_set_overlayfontpointsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .simData.CoordinateSystem coordinateSystem = 14 [default = LLA];
  bool has_coordinatesystem() const;
  private:
  bool _internal_has_coordinatesystem() const;
  public:
  void clear_coordinatesystem();
  ::simData::CoordinateSystem coordinatesystem() const;
  void set_coordinatesystem(::simData::CoordinateSystem value);
  private:
  ::simData::CoordinateSystem _internal_coordinatesystem() const;
  void _internal_set_coordinatesystem(::simData::CoordinateSystem value);
  public:

  // optional .simData.VerticalDatum verticalDatum = 15 [default = VD_WGS84];
  bool has_verticaldatum() const;
  private:
  bool _internal_has_verticaldatum() const;
  public:
  void clear_verticaldatum();
  ::simData::VerticalDatum verticaldatum() const;
  void set_verticaldatum(::simData::VerticalDatum value);
  private:
  ::simData::VerticalDatum _internal_verticaldatum() const;
  void _internal_set_verticaldatum(::simData::VerticalDatum value);
  public:

  // optional .simData.MagneticVariance magneticVariance = 16 [default = MV_TRUE];
  bool has_magneticvariance() const;
  private:
  bool _internal_has_magneticvariance() const;
  public:
  void clear_magneticvariance();
  ::simData::MagneticVariance magneticvariance() const;
  void set_magneticvariance(::simData::MagneticVariance value);
  private:
  ::simData::MagneticVariance _internal_magneticvariance() const;
  void _internal_set_magneticvariance(::simData::MagneticVariance value);
  public:

  // optional .simData.DistanceUnits distanceUnits = 17 [default = UNITS_METERS];
  bool has_distanceunits() const;
  private:
  bool _internal_has_distanceunits() const;
  public:
  void clear_distanceunits();
  ::simData::DistanceUnits distanceunits() const;
  void set_distanceunits(::simData::DistanceUnits value);
  private:
  ::simData::DistanceUnits _internal_distanceunits() const;
  void _internal_set_distanceunits(::simData::DistanceUnits value);
  public:

  // optional .simData.AngleUnits angleUnits = 18 [default = UNITS_DEGREES];
  bool has_angleunits() const;
  private:
  bool _internal_has_angleunits() const;
  public:
  void clear_angleunits();
  ::simData::AngleUnits angleunits() const;
  void set_angleunits(::simData::AngleUnits value);
  private:
  ::simData::AngleUnits _internal_angleunits() const;
  void _internal_set_angleunits(::simData::AngleUnits value);
  public:

  // optional .simData.SpeedUnits speedUnits = 19 [default = UNITS_KNOTS];
  bool has_speedunits() const;
  private:
  bool _internal_has_speedunits() const;
  public:
  void clear_speedunits();
  ::simData::SpeedUnits speedunits() const;
  void set_speedunits(::simData::SpeedUnits value);
  private:
  ::simData::SpeedUnits _internal_speedunits() const;
  void _internal_set_speedunits(::simData::SpeedUnits value);
  public:

  // optional int32 precision = 20 [default = 2];
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .simData.GeodeticUnits geodeticUnits = 24 [default = GEODETIC_DEGREES];
  bool has_geodeticunits() const;
  private:
  bool _internal_has_geodeticunits() const;
  public:
  void clear_geodeticunits();
  ::simData::GeodeticUnits geodeticunits() const;
  void set_geodeticunits(::simData::GeodeticUnits value);
  private:
  ::simData::GeodeticUnits _internal_geodeticunits() const;
  void _internal_set_geodeticunits(::simData::GeodeticUnits value);
  public:

  // optional double priority = 26 [default = 100];
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  double priority() const;
  void set_priority(double value);
  private:
  double _internal_priority() const;
  void _internal_set_priority(double value);
  public:

  // optional .simData.DistanceUnits altitudeUnits = 25 [default = UNITS_METERS];
  bool has_altitudeunits() const;
  private:
  bool _internal_has_altitudeunits() const;
  public:
  void clear_altitudeunits();
  ::simData::DistanceUnits altitudeunits() const;
  void set_altitudeunits(::simData::DistanceUnits value);
  private:
  ::simData::DistanceUnits _internal_altitudeunits() const;
  void _internal_set_altitudeunits(::simData::DistanceUnits value);
  public:

  // optional int32 distancePrecision = 27 [default = 1];
  bool has_distanceprecision() const;
  private:
  bool _internal_has_distanceprecision() const;
  public:
  void clear_distanceprecision();
  ::PROTOBUF_NAMESPACE_ID::int32 distanceprecision() const;
  void set_distanceprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_distanceprecision() const;
  void _internal_set_distanceprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 anglePrecision = 28 [default = 1];
  bool has_angleprecision() const;
  private:
  bool _internal_has_angleprecision() const;
  public:
  void clear_angleprecision();
  ::PROTOBUF_NAMESPACE_ID::int32 angleprecision() const;
  void set_angleprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_angleprecision() const;
  void _internal_set_angleprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 speedPrecision = 29 [default = 1];
  bool has_speedprecision() const;
  private:
  bool _internal_has_speedprecision() const;
  public:
  void clear_speedprecision();
  ::PROTOBUF_NAMESPACE_ID::int32 speedprecision() const;
  void set_speedprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speedprecision() const;
  void _internal_set_speedprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 geodeticPrecision = 30 [default = 6];
  bool has_geodeticprecision() const;
  private:
  bool _internal_has_geodeticprecision() const;
  public:
  void clear_geodeticprecision();
  ::PROTOBUF_NAMESPACE_ID::int32 geodeticprecision() const;
  void set_geodeticprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_geodeticprecision() const;
  void _internal_set_geodeticprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 altitudePrecision = 31 [default = 1];
  bool has_altitudeprecision() const;
  private:
  bool _internal_has_altitudeprecision() const;
  public:
  void clear_altitudeprecision();
  ::PROTOBUF_NAMESPACE_ID::int32 altitudeprecision() const;
  void set_altitudeprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_altitudeprecision() const;
  void _internal_set_altitudeprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .simData.BackdropType backdropType = 33 [default = BDT_OUTLINE];
  bool has_backdroptype() const;
  private:
  bool _internal_has_backdroptype() const;
  public:
  void clear_backdroptype();
  ::simData::BackdropType backdroptype() const;
  void set_backdroptype(::simData::BackdropType value);
  private:
  ::simData::BackdropType _internal_backdroptype() const;
  void _internal_set_backdroptype(::simData::BackdropType value);
  public:

  // optional .simData.TextAlignment alignment = 35 [default = ALIGN_CENTER_TOP];
  bool has_alignment() const;
  private:
  bool _internal_has_alignment() const;
  public:
  void clear_alignment();
  ::simData::TextAlignment alignment() const;
  void set_alignment(::simData::TextAlignment value);
  private:
  ::simData::TextAlignment _internal_alignment() const;
  void _internal_set_alignment(::simData::TextAlignment value);
  public:

  // @@protoc_insertion_point(class_scope:simData.LabelPrefs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_overlayfontname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr overlayfontname_;
  ::simData::LabelPrefs_DisplayFields* displayfields_;
  ::simData::LabelPrefs_DisplayFields* legenddisplayfields_;
  ::simData::LabelPrefs_DisplayFields* hoverdisplayfields_;
  ::simData::LabelPrefs_DisplayFields* hookdisplayfields_;
  ::PROTOBUF_NAMESPACE_ID::int32 offsetx_;
  ::PROTOBUF_NAMESPACE_ID::int32 offsety_;
  bool draw_;
  bool applyheightaboveterrain_;
  bool applyroll_;
  ::PROTOBUF_NAMESPACE_ID::int32 namelength_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeprecision_;
  int backdropimplementation_;
  int usevalues_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  int textoutline_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outlinecolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 overlayfontpointsize_;
  int coordinatesystem_;
  int verticaldatum_;
  int magneticvariance_;
  int distanceunits_;
  int angleunits_;
  int speedunits_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  int geodeticunits_;
  double priority_;
  int altitudeunits_;
  ::PROTOBUF_NAMESPACE_ID::int32 distanceprecision_;
  ::PROTOBUF_NAMESPACE_ID::int32 angleprecision_;
  ::PROTOBUF_NAMESPACE_ID::int32 speedprecision_;
  ::PROTOBUF_NAMESPACE_ID::int32 geodeticprecision_;
  ::PROTOBUF_NAMESPACE_ID::int32 altitudeprecision_;
  int backdroptype_;
  int alignment_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT LocalGridPrefs_SpeedRing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.LocalGridPrefs.SpeedRing) */ {
 public:
  inline LocalGridPrefs_SpeedRing() : LocalGridPrefs_SpeedRing(nullptr) {}
  virtual ~LocalGridPrefs_SpeedRing();

  LocalGridPrefs_SpeedRing(const LocalGridPrefs_SpeedRing& from);
  LocalGridPrefs_SpeedRing(LocalGridPrefs_SpeedRing&& from) noexcept
    : LocalGridPrefs_SpeedRing() {
    *this = ::std::move(from);
  }

  inline LocalGridPrefs_SpeedRing& operator=(const LocalGridPrefs_SpeedRing& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalGridPrefs_SpeedRing& operator=(LocalGridPrefs_SpeedRing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalGridPrefs_SpeedRing& default_instance();

  static inline const LocalGridPrefs_SpeedRing* internal_default_instance() {
    return reinterpret_cast<const LocalGridPrefs_SpeedRing*>(
               &_LocalGridPrefs_SpeedRing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LocalGridPrefs_SpeedRing& a, LocalGridPrefs_SpeedRing& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalGridPrefs_SpeedRing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalGridPrefs_SpeedRing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalGridPrefs_SpeedRing* New() const final {
    return CreateMaybeMessage<LocalGridPrefs_SpeedRing>(nullptr);
  }

  LocalGridPrefs_SpeedRing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalGridPrefs_SpeedRing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalGridPrefs_SpeedRing& from);
  void MergeFrom(const LocalGridPrefs_SpeedRing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalGridPrefs_SpeedRing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.LocalGridPrefs.SpeedRing";
  }
  protected:
  explicit LocalGridPrefs_SpeedRing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFixedTimeFieldNumber = 2,
    kUseFixedTimeFieldNumber = 1,
    kSpeedUnitsFieldNumber = 8,
    kRadiusFieldNumber = 4,
    kTimeFormatFieldNumber = 3,
    kUsePlatformSpeedFieldNumber = 5,
    kDisplayTimeFieldNumber = 7,
    kSpeedToUseFieldNumber = 6,
  };
  // optional string fixedTime = 2 [default = ""];
  bool has_fixedtime() const;
  private:
  bool _internal_has_fixedtime() const;
  public:
  void clear_fixedtime();
  const std::string& fixedtime() const;
  void set_fixedtime(const std::string& value);
  void set_fixedtime(std::string&& value);
  void set_fixedtime(const char* value);
  void set_fixedtime(const char* value, size_t size);
  std::string* mutable_fixedtime();
  std::string* release_fixedtime();
  void set_allocated_fixedtime(std::string* fixedtime);
  private:
  const std::string& _internal_fixedtime() const;
  void _internal_set_fixedtime(const std::string& value);
  std::string* _internal_mutable_fixedtime();
  public:

  // optional bool useFixedTime = 1 [default = false];
  bool has_usefixedtime() const;
  private:
  bool _internal_has_usefixedtime() const;
  public:
  void clear_usefixedtime();
  bool usefixedtime() const;
  void set_usefixedtime(bool value);
  private:
  bool _internal_usefixedtime() const;
  void _internal_set_usefixedtime(bool value);
  public:

  // optional .simData.SpeedUnits speedUnits = 8 [default = UNITS_KNOTS];
  bool has_speedunits() const;
  private:
  bool _internal_has_speedunits() const;
  public:
  void clear_speedunits();
  ::simData::SpeedUnits speedunits() const;
  void set_speedunits(::simData::SpeedUnits value);
  private:
  ::simData::SpeedUnits _internal_speedunits() const;
  void _internal_set_speedunits(::simData::SpeedUnits value);
  public:

  // optional double radius = 4 [default = 1];
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // optional .simData.ElapsedTimeFormat timeFormat = 3 [default = ELAPSED_HOURS];
  bool has_timeformat() const;
  private:
  bool _internal_has_timeformat() const;
  public:
  void clear_timeformat();
  ::simData::ElapsedTimeFormat timeformat() const;
  void set_timeformat(::simData::ElapsedTimeFormat value);
  private:
  ::simData::ElapsedTimeFormat _internal_timeformat() const;
  void _internal_set_timeformat(::simData::ElapsedTimeFormat value);
  public:

  // optional bool usePlatformSpeed = 5 [default = true];
  bool has_useplatformspeed() const;
  private:
  bool _internal_has_useplatformspeed() const;
  public:
  void clear_useplatformspeed();
  bool useplatformspeed() const;
  void set_useplatformspeed(bool value);
  private:
  bool _internal_useplatformspeed() const;
  void _internal_set_useplatformspeed(bool value);
  public:

  // optional bool displayTime = 7 [default = true];
  bool has_displaytime() const;
  private:
  bool _internal_has_displaytime() const;
  public:
  void clear_displaytime();
  bool displaytime() const;
  void set_displaytime(bool value);
  private:
  bool _internal_displaytime() const;
  void _internal_set_displaytime(bool value);
  public:

  // optional double speedToUse = 6 [default = 10];
  bool has_speedtouse() const;
  private:
  bool _internal_has_speedtouse() const;
  public:
  void clear_speedtouse();
  double speedtouse() const;
  void set_speedtouse(double value);
  private:
  double _internal_speedtouse() const;
  void _internal_set_speedtouse(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.LocalGridPrefs.SpeedRing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixedtime_;
  bool usefixedtime_;
  int speedunits_;
  double radius_;
  int timeformat_;
  bool useplatformspeed_;
  bool displaytime_;
  double speedtouse_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT LocalGridPrefs_GridSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.LocalGridPrefs.GridSettings) */ {
 public:
  inline LocalGridPrefs_GridSettings() : LocalGridPrefs_GridSettings(nullptr) {}
  virtual ~LocalGridPrefs_GridSettings();

  LocalGridPrefs_GridSettings(const LocalGridPrefs_GridSettings& from);
  LocalGridPrefs_GridSettings(LocalGridPrefs_GridSettings&& from) noexcept
    : LocalGridPrefs_GridSettings() {
    *this = ::std::move(from);
  }

  inline LocalGridPrefs_GridSettings& operator=(const LocalGridPrefs_GridSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalGridPrefs_GridSettings& operator=(LocalGridPrefs_GridSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalGridPrefs_GridSettings& default_instance();

  static inline const LocalGridPrefs_GridSettings* internal_default_instance() {
    return reinterpret_cast<const LocalGridPrefs_GridSettings*>(
               &_LocalGridPrefs_GridSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LocalGridPrefs_GridSettings& a, LocalGridPrefs_GridSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalGridPrefs_GridSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalGridPrefs_GridSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalGridPrefs_GridSettings* New() const final {
    return CreateMaybeMessage<LocalGridPrefs_GridSettings>(nullptr);
  }

  LocalGridPrefs_GridSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalGridPrefs_GridSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalGridPrefs_GridSettings& from);
  void MergeFrom(const LocalGridPrefs_GridSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalGridPrefs_GridSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.LocalGridPrefs.GridSettings";
  }
  protected:
  explicit LocalGridPrefs_GridSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumDivisionsFieldNumber = 1,
    kNumSubDivisionsFieldNumber = 2,
    kSectorAngleFieldNumber = 3,
  };
  // optional uint32 numDivisions = 1 [default = 1];
  bool has_numdivisions() const;
  private:
  bool _internal_has_numdivisions() const;
  public:
  void clear_numdivisions();
  ::PROTOBUF_NAMESPACE_ID::uint32 numdivisions() const;
  void set_numdivisions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numdivisions() const;
  void _internal_set_numdivisions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 numSubDivisions = 2 [default = 1];
  bool has_numsubdivisions() const;
  private:
  bool _internal_has_numsubdivisions() const;
  public:
  void clear_numsubdivisions();
  ::PROTOBUF_NAMESPACE_ID::uint32 numsubdivisions() const;
  void set_numsubdivisions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numsubdivisions() const;
  void _internal_set_numsubdivisions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double sectorAngle = 3 [default = 30];
  bool has_sectorangle() const;
  private:
  bool _internal_has_sectorangle() const;
  public:
  void clear_sectorangle();
  double sectorangle() const;
  void set_sectorangle(double value);
  private:
  double _internal_sectorangle() const;
  void _internal_set_sectorangle(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.LocalGridPrefs.GridSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numdivisions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numsubdivisions_;
  double sectorangle_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT LocalGridPrefs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.LocalGridPrefs) */ {
 public:
  inline LocalGridPrefs() : LocalGridPrefs(nullptr) {}
  virtual ~LocalGridPrefs();

  LocalGridPrefs(const LocalGridPrefs& from);
  LocalGridPrefs(LocalGridPrefs&& from) noexcept
    : LocalGridPrefs() {
    *this = ::std::move(from);
  }

  inline LocalGridPrefs& operator=(const LocalGridPrefs& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalGridPrefs& operator=(LocalGridPrefs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalGridPrefs& default_instance();

  static inline const LocalGridPrefs* internal_default_instance() {
    return reinterpret_cast<const LocalGridPrefs*>(
               &_LocalGridPrefs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LocalGridPrefs& a, LocalGridPrefs& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalGridPrefs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalGridPrefs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalGridPrefs* New() const final {
    return CreateMaybeMessage<LocalGridPrefs>(nullptr);
  }

  LocalGridPrefs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalGridPrefs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalGridPrefs& from);
  void MergeFrom(const LocalGridPrefs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalGridPrefs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.LocalGridPrefs";
  }
  protected:
  explicit LocalGridPrefs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LocalGridPrefs_SpeedRing SpeedRing;
  typedef LocalGridPrefs_GridSettings GridSettings;

  typedef LocalGridPrefs_Type Type;
  static constexpr Type CARTESIAN =
    LocalGridPrefs_Type_CARTESIAN;
  static constexpr Type POLAR =
    LocalGridPrefs_Type_POLAR;
  static constexpr Type RANGE_RINGS =
    LocalGridPrefs_Type_RANGE_RINGS;
  static constexpr Type SPEED_RINGS =
    LocalGridPrefs_Type_SPEED_RINGS;
  static constexpr Type SPEED_LINE =
    LocalGridPrefs_Type_SPEED_LINE;
  static inline bool Type_IsValid(int value) {
    return LocalGridPrefs_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    LocalGridPrefs_Type_Type_MIN;
  static constexpr Type Type_MAX =
    LocalGridPrefs_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    LocalGridPrefs_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return LocalGridPrefs_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return LocalGridPrefs_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return LocalGridPrefs_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGridLabelFontNameFieldNumber = 6,
    kSpeedRingFieldNumber = 11,
    kGridSettingsFieldNumber = 12,
    kGridPositionOffsetFieldNumber = 13,
    kGridOrientationOffsetFieldNumber = 14,
    kDrawGridFieldNumber = 8,
    kFollowPitchFieldNumber = 16,
    kFollowRollFieldNumber = 17,
    kGridTypeFieldNumber = 1,
    kGridLabelColorFieldNumber = 3,
    kGridLabelTextOutlineFieldNumber = 4,
    kGridLabelOutlineColorFieldNumber = 5,
    kGridLabelFontSizeFieldNumber = 7,
    kGridLabelDrawFieldNumber = 2,
    kFollowYawFieldNumber = 15,
    kSizeFieldNumber = 10,
    kGridColorFieldNumber = 9,
    kSizeUnitsFieldNumber = 18,
    kGridLabelPrecisionFieldNumber = 19,
    kPositionOffsetUnitsFieldNumber = 20,
  };
  // optional string gridLabelFontName = 6 [default = "arialbd.ttf"];
  bool has_gridlabelfontname() const;
  private:
  bool _internal_has_gridlabelfontname() const;
  public:
  void clear_gridlabelfontname();
  const std::string& gridlabelfontname() const;
  void set_gridlabelfontname(const std::string& value);
  void set_gridlabelfontname(std::string&& value);
  void set_gridlabelfontname(const char* value);
  void set_gridlabelfontname(const char* value, size_t size);
  std::string* mutable_gridlabelfontname();
  std::string* release_gridlabelfontname();
  void set_allocated_gridlabelfontname(std::string* gridlabelfontname);
  private:
  const std::string& _internal_gridlabelfontname() const;
  void _internal_set_gridlabelfontname(const std::string& value);
  std::string* _internal_mutable_gridlabelfontname();
  public:

  // optional .simData.LocalGridPrefs.SpeedRing speedRing = 11;
  bool has_speedring() const;
  private:
  bool _internal_has_speedring() const;
  public:
  void clear_speedring();
  const ::simData::LocalGridPrefs_SpeedRing& speedring() const;
  ::simData::LocalGridPrefs_SpeedRing* release_speedring();
  ::simData::LocalGridPrefs_SpeedRing* mutable_speedring();
  void set_allocated_speedring(::simData::LocalGridPrefs_SpeedRing* speedring);
  private:
  const ::simData::LocalGridPrefs_SpeedRing& _internal_speedring() const;
  ::simData::LocalGridPrefs_SpeedRing* _internal_mutable_speedring();
  public:
  void unsafe_arena_set_allocated_speedring(
      ::simData::LocalGridPrefs_SpeedRing* speedring);
  ::simData::LocalGridPrefs_SpeedRing* unsafe_arena_release_speedring();

  // optional .simData.LocalGridPrefs.GridSettings gridSettings = 12;
  bool has_gridsettings() const;
  private:
  bool _internal_has_gridsettings() const;
  public:
  void clear_gridsettings();
  const ::simData::LocalGridPrefs_GridSettings& gridsettings() const;
  ::simData::LocalGridPrefs_GridSettings* release_gridsettings();
  ::simData::LocalGridPrefs_GridSettings* mutable_gridsettings();
  void set_allocated_gridsettings(::simData::LocalGridPrefs_GridSettings* gridsettings);
  private:
  const ::simData::LocalGridPrefs_GridSettings& _internal_gridsettings() const;
  ::simData::LocalGridPrefs_GridSettings* _internal_mutable_gridsettings();
  public:
  void unsafe_arena_set_allocated_gridsettings(
      ::simData::LocalGridPrefs_GridSettings* gridsettings);
  ::simData::LocalGridPrefs_GridSettings* unsafe_arena_release_gridsettings();

  // optional .simData.Position gridPositionOffset = 13;
  bool has_gridpositionoffset() const;
  private:
  bool _internal_has_gridpositionoffset() const;
  public:
  void clear_gridpositionoffset();
  const ::simData::Position& gridpositionoffset() const;
  ::simData::Position* release_gridpositionoffset();
  ::simData::Position* mutable_gridpositionoffset();
  void set_allocated_gridpositionoffset(::simData::Position* gridpositionoffset);
  private:
  const ::simData::Position& _internal_gridpositionoffset() const;
  ::simData::Position* _internal_mutable_gridpositionoffset();
  public:
  void unsafe_arena_set_allocated_gridpositionoffset(
      ::simData::Position* gridpositionoffset);
  ::simData::Position* unsafe_arena_release_gridpositionoffset();

  // optional .simData.BodyOrientation gridOrientationOffset = 14;
  bool has_gridorientationoffset() const;
  private:
  bool _internal_has_gridorientationoffset() const;
  public:
  void clear_gridorientationoffset();
  const ::simData::BodyOrientation& gridorientationoffset() const;
  ::simData::BodyOrientation* release_gridorientationoffset();
  ::simData::BodyOrientation* mutable_gridorientationoffset();
  void set_allocated_gridorientationoffset(::simData::BodyOrientation* gridorientationoffset);
  private:
  const ::simData::BodyOrientation& _internal_gridorientationoffset() const;
  ::simData::BodyOrientation* _internal_mutable_gridorientationoffset();
  public:
  void unsafe_arena_set_allocated_gridorientationoffset(
      ::simData::BodyOrientation* gridorientationoffset);
  ::simData::BodyOrientation* unsafe_arena_release_gridorientationoffset();

  // optional bool drawGrid = 8 [default = false];
  bool has_drawgrid() const;
  private:
  bool _internal_has_drawgrid() const;
  public:
  void clear_drawgrid();
  bool drawgrid() const;
  void set_drawgrid(bool value);
  private:
  bool _internal_drawgrid() const;
  void _internal_set_drawgrid(bool value);
  public:

  // optional bool followPitch = 16 [default = false];
  bool has_followpitch() const;
  private:
  bool _internal_has_followpitch() const;
  public:
  void clear_followpitch();
  bool followpitch() const;
  void set_followpitch(bool value);
  private:
  bool _internal_followpitch() const;
  void _internal_set_followpitch(bool value);
  public:

  // optional bool followRoll = 17 [default = false];
  bool has_followroll() const;
  private:
  bool _internal_has_followroll() const;
  public:
  void clear_followroll();
  bool followroll() const;
  void set_followroll(bool value);
  private:
  bool _internal_followroll() const;
  void _internal_set_followroll(bool value);
  public:

  // optional .simData.LocalGridPrefs.Type gridType = 1 [default = POLAR];
  bool has_gridtype() const;
  private:
  bool _internal_has_gridtype() const;
  public:
  void clear_gridtype();
  ::simData::LocalGridPrefs_Type gridtype() const;
  void set_gridtype(::simData::LocalGridPrefs_Type value);
  private:
  ::simData::LocalGridPrefs_Type _internal_gridtype() const;
  void _internal_set_gridtype(::simData::LocalGridPrefs_Type value);
  public:

  // optional fixed32 gridLabelColor = 3 [default = 4294902015];
  bool has_gridlabelcolor() const;
  private:
  bool _internal_has_gridlabelcolor() const;
  public:
  void clear_gridlabelcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 gridlabelcolor() const;
  void set_gridlabelcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gridlabelcolor() const;
  void _internal_set_gridlabelcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .simData.TextOutline gridLabelTextOutline = 4 [default = TO_THIN];
  bool has_gridlabeltextoutline() const;
  private:
  bool _internal_has_gridlabeltextoutline() const;
  public:
  void clear_gridlabeltextoutline();
  ::simData::TextOutline gridlabeltextoutline() const;
  void set_gridlabeltextoutline(::simData::TextOutline value);
  private:
  ::simData::TextOutline _internal_gridlabeltextoutline() const;
  void _internal_set_gridlabeltextoutline(::simData::TextOutline value);
  public:

  // optional fixed32 gridLabelOutlineColor = 5 [default = 255];
  bool has_gridlabeloutlinecolor() const;
  private:
  bool _internal_has_gridlabeloutlinecolor() const;
  public:
  void clear_gridlabeloutlinecolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 gridlabeloutlinecolor() const;
  void set_gridlabeloutlinecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gridlabeloutlinecolor() const;
  void _internal_set_gridlabeloutlinecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 gridLabelFontSize = 7 [default = 14];
  bool has_gridlabelfontsize() const;
  private:
  bool _internal_has_gridlabelfontsize() const;
  public:
  void clear_gridlabelfontsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 gridlabelfontsize() const;
  void set_gridlabelfontsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gridlabelfontsize() const;
  void _internal_set_gridlabelfontsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool gridLabelDraw = 2 [default = true];
  bool has_gridlabeldraw() const;
  private:
  bool _internal_has_gridlabeldraw() const;
  public:
  void clear_gridlabeldraw();
  bool gridlabeldraw() const;
  void set_gridlabeldraw(bool value);
  private:
  bool _internal_gridlabeldraw() const;
  void _internal_set_gridlabeldraw(bool value);
  public:

  // optional bool followYaw = 15 [default = true];
  bool has_followyaw() const;
  private:
  bool _internal_has_followyaw() const;
  public:
  void clear_followyaw();
  bool followyaw() const;
  void set_followyaw(bool value);
  private:
  bool _internal_followyaw() const;
  void _internal_set_followyaw(bool value);
  public:

  // optional double size = 10 [default = 20];
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  double size() const;
  void set_size(double value);
  private:
  double _internal_size() const;
  void _internal_set_size(double value);
  public:

  // optional fixed32 gridColor = 9 [default = 4294902015];
  bool has_gridcolor() const;
  private:
  bool _internal_has_gridcolor() const;
  public:
  void clear_gridcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 gridcolor() const;
  void set_gridcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gridcolor() const;
  void _internal_set_gridcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .simData.DistanceUnits sizeUnits = 18 [default = UNITS_NAUTICAL_MILES];
  bool has_sizeunits() const;
  private:
  bool _internal_has_sizeunits() const;
  public:
  void clear_sizeunits();
  ::simData::DistanceUnits sizeunits() const;
  void set_sizeunits(::simData::DistanceUnits value);
  private:
  ::simData::DistanceUnits _internal_sizeunits() const;
  void _internal_set_sizeunits(::simData::DistanceUnits value);
  public:

  // optional int32 gridLabelPrecision = 19 [default = 1];
  bool has_gridlabelprecision() const;
  private:
  bool _internal_has_gridlabelprecision() const;
  public:
  void clear_gridlabelprecision();
  ::PROTOBUF_NAMESPACE_ID::int32 gridlabelprecision() const;
  void set_gridlabelprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gridlabelprecision() const;
  void _internal_set_gridlabelprecision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .simData.DistanceUnits positionOffsetUnits = 20 [default = UNITS_METERS];
  bool has_positionoffsetunits() const;
  private:
  bool _internal_has_positionoffsetunits() const;
  public:
  void clear_positionoffsetunits();
  ::simData::DistanceUnits positionoffsetunits() const;
  void set_positionoffsetunits(::simData::DistanceUnits value);
  private:
  ::simData::DistanceUnits _internal_positionoffsetunits() const;
  void _internal_set_positionoffsetunits(::simData::DistanceUnits value);
  public:

  // @@protoc_insertion_point(class_scope:simData.LocalGridPrefs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_gridlabelfontname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gridlabelfontname_;
  ::simData::LocalGridPrefs_SpeedRing* speedring_;
  ::simData::LocalGridPrefs_GridSettings* gridsettings_;
  ::simData::Position* gridpositionoffset_;
  ::simData::BodyOrientation* gridorientationoffset_;
  bool drawgrid_;
  bool followpitch_;
  bool followroll_;
  int gridtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gridlabelcolor_;
  int gridlabeltextoutline_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gridlabeloutlinecolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gridlabelfontsize_;
  bool gridlabeldraw_;
  bool followyaw_;
  double size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gridcolor_;
  int sizeunits_;
  ::PROTOBUF_NAMESPACE_ID::int32 gridlabelprecision_;
  int positionoffsetunits_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT CommonPrefs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.CommonPrefs) */ {
 public:
  inline CommonPrefs() : CommonPrefs(nullptr) {}
  virtual ~CommonPrefs();

  CommonPrefs(const CommonPrefs& from);
  CommonPrefs(CommonPrefs&& from) noexcept
    : CommonPrefs() {
    *this = ::std::move(from);
  }

  inline CommonPrefs& operator=(const CommonPrefs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonPrefs& operator=(CommonPrefs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonPrefs& default_instance();

  static inline const CommonPrefs* internal_default_instance() {
    return reinterpret_cast<const CommonPrefs*>(
               &_CommonPrefs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CommonPrefs& a, CommonPrefs& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonPrefs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonPrefs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonPrefs* New() const final {
    return CreateMaybeMessage<CommonPrefs>(nullptr);
  }

  CommonPrefs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonPrefs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonPrefs& from);
  void MergeFrom(const CommonPrefs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonPrefs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.CommonPrefs";
  }
  protected:
  explicit CommonPrefs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptProjectorIdsFieldNumber = 15,
    kNameFieldNumber = 3,
    kAliasFieldNumber = 5,
    kLabelPrefsFieldNumber = 6,
    kLocalGridFieldNumber = 12,
    kUseAliasFieldNumber = 4,
    kUseOverrideColorFieldNumber = 8,
    kIncludeInLegendFieldNumber = 13,
    kDataDrawFieldNumber = 1,
    kDrawFieldNumber = 2,
    kColorFieldNumber = 7,
    kDataLimitTimeFieldNumber = 10,
    kOverrideColorFieldNumber = 9,
    kDataLimitPointsFieldNumber = 11,
  };
  // repeated uint64 acceptProjectorIds = 15;
  int acceptprojectorids_size() const;
  private:
  int _internal_acceptprojectorids_size() const;
  public:
  void clear_acceptprojectorids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_acceptprojectorids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_acceptprojectorids() const;
  void _internal_add_acceptprojectorids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_acceptprojectorids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 acceptprojectorids(int index) const;
  void set_acceptprojectorids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_acceptprojectorids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      acceptprojectorids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_acceptprojectorids();

  // optional string name = 3 [default = "entity"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string alias = 5 [default = ""];
  bool has_alias() const;
  private:
  bool _internal_has_alias() const;
  public:
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // optional .simData.LabelPrefs labelPrefs = 6;
  bool has_labelprefs() const;
  private:
  bool _internal_has_labelprefs() const;
  public:
  void clear_labelprefs();
  const ::simData::LabelPrefs& labelprefs() const;
  ::simData::LabelPrefs* release_labelprefs();
  ::simData::LabelPrefs* mutable_labelprefs();
  void set_allocated_labelprefs(::simData::LabelPrefs* labelprefs);
  private:
  const ::simData::LabelPrefs& _internal_labelprefs() const;
  ::simData::LabelPrefs* _internal_mutable_labelprefs();
  public:
  void unsafe_arena_set_allocated_labelprefs(
      ::simData::LabelPrefs* labelprefs);
  ::simData::LabelPrefs* unsafe_arena_release_labelprefs();

  // optional .simData.LocalGridPrefs localGrid = 12;
  bool has_localgrid() const;
  private:
  bool _internal_has_localgrid() const;
  public:
  void clear_localgrid();
  const ::simData::LocalGridPrefs& localgrid() const;
  ::simData::LocalGridPrefs* release_localgrid();
  ::simData::LocalGridPrefs* mutable_localgrid();
  void set_allocated_localgrid(::simData::LocalGridPrefs* localgrid);
  private:
  const ::simData::LocalGridPrefs& _internal_localgrid() const;
  ::simData::LocalGridPrefs* _internal_mutable_localgrid();
  public:
  void unsafe_arena_set_allocated_localgrid(
      ::simData::LocalGridPrefs* localgrid);
  ::simData::LocalGridPrefs* unsafe_arena_release_localgrid();

  // optional bool useAlias = 4 [default = false];
  bool has_usealias() const;
  private:
  bool _internal_has_usealias() const;
  public:
  void clear_usealias();
  bool usealias() const;
  void set_usealias(bool value);
  private:
  bool _internal_usealias() const;
  void _internal_set_usealias(bool value);
  public:

  // optional bool useOverrideColor = 8 [default = false];
  bool has_useoverridecolor() const;
  private:
  bool _internal_has_useoverridecolor() const;
  public:
  void clear_useoverridecolor();
  bool useoverridecolor() const;
  void set_useoverridecolor(bool value);
  private:
  bool _internal_useoverridecolor() const;
  void _internal_set_useoverridecolor(bool value);
  public:

  // optional bool includeInLegend = 13 [default = false];
  bool has_includeinlegend() const;
  private:
  bool _internal_has_includeinlegend() const;
  public:
  void clear_includeinlegend();
  bool includeinlegend() const;
  void set_includeinlegend(bool value);
  private:
  bool _internal_includeinlegend() const;
  void _internal_set_includeinlegend(bool value);
  public:

  // optional bool dataDraw = 1 [default = true];
  bool has_datadraw() const;
  private:
  bool _internal_has_datadraw() const;
  public:
  void clear_datadraw();
  bool datadraw() const;
  void set_datadraw(bool value);
  private:
  bool _internal_datadraw() const;
  void _internal_set_datadraw(bool value);
  public:

  // optional bool draw = 2 [default = true];
  bool has_draw() const;
  private:
  bool _internal_has_draw() const;
  public:
  void clear_draw();
  bool draw() const;
  void set_draw(bool value);
  private:
  bool _internal_draw() const;
  void _internal_set_draw(bool value);
  public:

  // optional fixed32 color = 7 [default = 4294902015];
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double dataLimitTime = 10 [default = -1];
  bool has_datalimittime() const;
  private:
  bool _internal_has_datalimittime() const;
  public:
  void clear_datalimittime();
  double datalimittime() const;
  void set_datalimittime(double value);
  private:
  double _internal_datalimittime() const;
  void _internal_set_datalimittime(double value);
  public:

  // optional fixed32 overrideColor = 9 [default = 4278190335];
  bool has_overridecolor() const;
  private:
  bool _internal_has_overridecolor() const;
  public:
  void clear_overridecolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 overridecolor() const;
  void set_overridecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_overridecolor() const;
  void _internal_set_overridecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dataLimitPoints = 11 [default = 1000];
  bool has_datalimitpoints() const;
  private:
  bool _internal_has_datalimitpoints() const;
  public:
  void clear_datalimitpoints();
  ::PROTOBUF_NAMESPACE_ID::uint32 datalimitpoints() const;
  void set_datalimitpoints(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datalimitpoints() const;
  void _internal_set_datalimitpoints(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:simData.CommonPrefs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > acceptprojectorids_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::simData::LabelPrefs* labelprefs_;
  ::simData::LocalGridPrefs* localgrid_;
  bool usealias_;
  bool useoverridecolor_;
  bool includeinlegend_;
  bool datadraw_;
  bool draw_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  double datalimittime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 overridecolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 datalimitpoints_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT ScenarioProperties_Classification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.ScenarioProperties.Classification) */ {
 public:
  inline ScenarioProperties_Classification() : ScenarioProperties_Classification(nullptr) {}
  virtual ~ScenarioProperties_Classification();

  ScenarioProperties_Classification(const ScenarioProperties_Classification& from);
  ScenarioProperties_Classification(ScenarioProperties_Classification&& from) noexcept
    : ScenarioProperties_Classification() {
    *this = ::std::move(from);
  }

  inline ScenarioProperties_Classification& operator=(const ScenarioProperties_Classification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioProperties_Classification& operator=(ScenarioProperties_Classification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScenarioProperties_Classification& default_instance();

  static inline const ScenarioProperties_Classification* internal_default_instance() {
    return reinterpret_cast<const ScenarioProperties_Classification*>(
               &_ScenarioProperties_Classification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ScenarioProperties_Classification& a, ScenarioProperties_Classification& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioProperties_Classification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioProperties_Classification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScenarioProperties_Classification* New() const final {
    return CreateMaybeMessage<ScenarioProperties_Classification>(nullptr);
  }

  ScenarioProperties_Classification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScenarioProperties_Classification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScenarioProperties_Classification& from);
  void MergeFrom(const ScenarioProperties_Classification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioProperties_Classification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.ScenarioProperties.Classification";
  }
  protected:
  explicit ScenarioProperties_Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kFontColorFieldNumber = 2,
  };
  // optional string label = 1 [default = ""];
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional fixed32 fontColor = 2 [default = 16711935];
  bool has_fontcolor() const;
  private:
  bool _internal_has_fontcolor() const;
  public:
  void clear_fontcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 fontcolor() const;
  void set_fontcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fontcolor() const;
  void _internal_set_fontcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:simData.ScenarioProperties.Classification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fontcolor_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT ScenarioProperties_SoundFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.ScenarioProperties.SoundFile) */ {
 public:
  inline ScenarioProperties_SoundFile() : ScenarioProperties_SoundFile(nullptr) {}
  virtual ~ScenarioProperties_SoundFile();

  ScenarioProperties_SoundFile(const ScenarioProperties_SoundFile& from);
  ScenarioProperties_SoundFile(ScenarioProperties_SoundFile&& from) noexcept
    : ScenarioProperties_SoundFile() {
    *this = ::std::move(from);
  }

  inline ScenarioProperties_SoundFile& operator=(const ScenarioProperties_SoundFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioProperties_SoundFile& operator=(ScenarioProperties_SoundFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScenarioProperties_SoundFile& default_instance();

  static inline const ScenarioProperties_SoundFile* internal_default_instance() {
    return reinterpret_cast<const ScenarioProperties_SoundFile*>(
               &_ScenarioProperties_SoundFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ScenarioProperties_SoundFile& a, ScenarioProperties_SoundFile& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioProperties_SoundFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioProperties_SoundFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScenarioProperties_SoundFile* New() const final {
    return CreateMaybeMessage<ScenarioProperties_SoundFile>(nullptr);
  }

  ScenarioProperties_SoundFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScenarioProperties_SoundFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScenarioProperties_SoundFile& from);
  void MergeFrom(const ScenarioProperties_SoundFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioProperties_SoundFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.ScenarioProperties.SoundFile";
  }
  protected:
  explicit ScenarioProperties_SoundFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
  };
  // optional string filename = 1 [default = ""];
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional double startTime = 2 [default = 0];
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  double starttime() const;
  void set_starttime(double value);
  private:
  double _internal_starttime() const;
  void _internal_set_starttime(double value);
  public:

  // optional double endTime = 3 [default = 0];
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  double endtime() const;
  void set_endtime(double value);
  private:
  double _internal_endtime() const;
  void _internal_set_endtime(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.ScenarioProperties.SoundFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  double starttime_;
  double endtime_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT ScenarioProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.ScenarioProperties) */ {
 public:
  inline ScenarioProperties() : ScenarioProperties(nullptr) {}
  virtual ~ScenarioProperties();

  ScenarioProperties(const ScenarioProperties& from);
  ScenarioProperties(ScenarioProperties&& from) noexcept
    : ScenarioProperties() {
    *this = ::std::move(from);
  }

  inline ScenarioProperties& operator=(const ScenarioProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioProperties& operator=(ScenarioProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScenarioProperties& default_instance();

  static inline const ScenarioProperties* internal_default_instance() {
    return reinterpret_cast<const ScenarioProperties*>(
               &_ScenarioProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ScenarioProperties& a, ScenarioProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScenarioProperties* New() const final {
    return CreateMaybeMessage<ScenarioProperties>(nullptr);
  }

  ScenarioProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScenarioProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScenarioProperties& from);
  void MergeFrom(const ScenarioProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.ScenarioProperties";
  }
  protected:
  explicit ScenarioProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ScenarioProperties_Classification Classification;
  typedef ScenarioProperties_SoundFile SoundFile;

  // accessors -------------------------------------------------------

  enum : int {
    kMediaFileFieldNumber = 13,
    kDedFileFieldNumber = 14,
    kWvsFileFieldNumber = 15,
    kGogFileFieldNumber = 16,
    kDescriptionFieldNumber = 6,
    kViewFileFieldNumber = 9,
    kRuleFileFieldNumber = 10,
    kTerrainFileFieldNumber = 11,
    kSourceFieldNumber = 19,
    kCoordinateFrameFieldNumber = 2,
    kClassificationFieldNumber = 4,
    kSoundFileFieldNumber = 12,
    kWindAngleFieldNumber = 7,
    kWindSpeedFieldNumber = 8,
    kVersionFieldNumber = 1,
    kReferenceYearFieldNumber = 3,
    kDegreeAnglesFieldNumber = 5,
    kIgnoreDuplicateGenericDataFieldNumber = 20,
    kDataLimitPointsFieldNumber = 18,
    kDataLimitTimeFieldNumber = 17,
  };
  // repeated string mediaFile = 13;
  int mediafile_size() const;
  private:
  int _internal_mediafile_size() const;
  public:
  void clear_mediafile();
  const std::string& mediafile(int index) const;
  std::string* mutable_mediafile(int index);
  void set_mediafile(int index, const std::string& value);
  void set_mediafile(int index, std::string&& value);
  void set_mediafile(int index, const char* value);
  void set_mediafile(int index, const char* value, size_t size);
  std::string* add_mediafile();
  void add_mediafile(const std::string& value);
  void add_mediafile(std::string&& value);
  void add_mediafile(const char* value);
  void add_mediafile(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mediafile() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mediafile();
  private:
  const std::string& _internal_mediafile(int index) const;
  std::string* _internal_add_mediafile();
  public:

  // repeated string dedFile = 14;
  int dedfile_size() const;
  private:
  int _internal_dedfile_size() const;
  public:
  void clear_dedfile();
  const std::string& dedfile(int index) const;
  std::string* mutable_dedfile(int index);
  void set_dedfile(int index, const std::string& value);
  void set_dedfile(int index, std::string&& value);
  void set_dedfile(int index, const char* value);
  void set_dedfile(int index, const char* value, size_t size);
  std::string* add_dedfile();
  void add_dedfile(const std::string& value);
  void add_dedfile(std::string&& value);
  void add_dedfile(const char* value);
  void add_dedfile(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dedfile() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dedfile();
  private:
  const std::string& _internal_dedfile(int index) const;
  std::string* _internal_add_dedfile();
  public:

  // repeated string wvsFile = 15;
  int wvsfile_size() const;
  private:
  int _internal_wvsfile_size() const;
  public:
  void clear_wvsfile();
  const std::string& wvsfile(int index) const;
  std::string* mutable_wvsfile(int index);
  void set_wvsfile(int index, const std::string& value);
  void set_wvsfile(int index, std::string&& value);
  void set_wvsfile(int index, const char* value);
  void set_wvsfile(int index, const char* value, size_t size);
  std::string* add_wvsfile();
  void add_wvsfile(const std::string& value);
  void add_wvsfile(std::string&& value);
  void add_wvsfile(const char* value);
  void add_wvsfile(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& wvsfile() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_wvsfile();
  private:
  const std::string& _internal_wvsfile(int index) const;
  std::string* _internal_add_wvsfile();
  public:

  // repeated string gogFile = 16;
  int gogfile_size() const;
  private:
  int _internal_gogfile_size() const;
  public:
  void clear_gogfile();
  const std::string& gogfile(int index) const;
  std::string* mutable_gogfile(int index);
  void set_gogfile(int index, const std::string& value);
  void set_gogfile(int index, std::string&& value);
  void set_gogfile(int index, const char* value);
  void set_gogfile(int index, const char* value, size_t size);
  std::string* add_gogfile();
  void add_gogfile(const std::string& value);
  void add_gogfile(std::string&& value);
  void add_gogfile(const char* value);
  void add_gogfile(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& gogfile() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_gogfile();
  private:
  const std::string& _internal_gogfile(int index) const;
  std::string* _internal_add_gogfile();
  public:

  // optional string description = 6 [default = ""];
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string viewFile = 9 [default = ""];
  bool has_viewfile() const;
  private:
  bool _internal_has_viewfile() const;
  public:
  void clear_viewfile();
  const std::string& viewfile() const;
  void set_viewfile(const std::string& value);
  void set_viewfile(std::string&& value);
  void set_viewfile(const char* value);
  void set_viewfile(const char* value, size_t size);
  std::string* mutable_viewfile();
  std::string* release_viewfile();
  void set_allocated_viewfile(std::string* viewfile);
  private:
  const std::string& _internal_viewfile() const;
  void _internal_set_viewfile(const std::string& value);
  std::string* _internal_mutable_viewfile();
  public:

  // optional string ruleFile = 10 [default = ""];
  bool has_rulefile() const;
  private:
  bool _internal_has_rulefile() const;
  public:
  void clear_rulefile();
  const std::string& rulefile() const;
  void set_rulefile(const std::string& value);
  void set_rulefile(std::string&& value);
  void set_rulefile(const char* value);
  void set_rulefile(const char* value, size_t size);
  std::string* mutable_rulefile();
  std::string* release_rulefile();
  void set_allocated_rulefile(std::string* rulefile);
  private:
  const std::string& _internal_rulefile() const;
  void _internal_set_rulefile(const std::string& value);
  std::string* _internal_mutable_rulefile();
  public:

  // optional string terrainFile = 11 [default = ""];
  bool has_terrainfile() const;
  private:
  bool _internal_has_terrainfile() const;
  public:
  void clear_terrainfile();
  const std::string& terrainfile() const;
  void set_terrainfile(const std::string& value);
  void set_terrainfile(std::string&& value);
  void set_terrainfile(const char* value);
  void set_terrainfile(const char* value, size_t size);
  std::string* mutable_terrainfile();
  std::string* release_terrainfile();
  void set_allocated_terrainfile(std::string* terrainfile);
  private:
  const std::string& _internal_terrainfile() const;
  void _internal_set_terrainfile(const std::string& value);
  std::string* _internal_mutable_terrainfile();
  public:

  // optional string source = 19 [default = ""];
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional .simData.CoordinateFrame coordinateFrame = 2;
  bool has_coordinateframe() const;
  private:
  bool _internal_has_coordinateframe() const;
  public:
  void clear_coordinateframe();
  const ::simData::CoordinateFrame& coordinateframe() const;
  ::simData::CoordinateFrame* release_coordinateframe();
  ::simData::CoordinateFrame* mutable_coordinateframe();
  void set_allocated_coordinateframe(::simData::CoordinateFrame* coordinateframe);
  private:
  const ::simData::CoordinateFrame& _internal_coordinateframe() const;
  ::simData::CoordinateFrame* _internal_mutable_coordinateframe();
  public:
  void unsafe_arena_set_allocated_coordinateframe(
      ::simData::CoordinateFrame* coordinateframe);
  ::simData::CoordinateFrame* unsafe_arena_release_coordinateframe();

  // optional .simData.ScenarioProperties.Classification classification = 4;
  bool has_classification() const;
  private:
  bool _internal_has_classification() const;
  public:
  void clear_classification();
  const ::simData::ScenarioProperties_Classification& classification() const;
  ::simData::ScenarioProperties_Classification* release_classification();
  ::simData::ScenarioProperties_Classification* mutable_classification();
  void set_allocated_classification(::simData::ScenarioProperties_Classification* classification);
  private:
  const ::simData::ScenarioProperties_Classification& _internal_classification() const;
  ::simData::ScenarioProperties_Classification* _internal_mutable_classification();
  public:
  void unsafe_arena_set_allocated_classification(
      ::simData::ScenarioProperties_Classification* classification);
  ::simData::ScenarioProperties_Classification* unsafe_arena_release_classification();

  // optional .simData.ScenarioProperties.SoundFile soundFile = 12;
  bool has_soundfile() const;
  private:
  bool _internal_has_soundfile() const;
  public:
  void clear_soundfile();
  const ::simData::ScenarioProperties_SoundFile& soundfile() const;
  ::simData::ScenarioProperties_SoundFile* release_soundfile();
  ::simData::ScenarioProperties_SoundFile* mutable_soundfile();
  void set_allocated_soundfile(::simData::ScenarioProperties_SoundFile* soundfile);
  private:
  const ::simData::ScenarioProperties_SoundFile& _internal_soundfile() const;
  ::simData::ScenarioProperties_SoundFile* _internal_mutable_soundfile();
  public:
  void unsafe_arena_set_allocated_soundfile(
      ::simData::ScenarioProperties_SoundFile* soundfile);
  ::simData::ScenarioProperties_SoundFile* unsafe_arena_release_soundfile();

  // optional double windAngle = 7 [default = 0];
  bool has_windangle() const;
  private:
  bool _internal_has_windangle() const;
  public:
  void clear_windangle();
  double windangle() const;
  void set_windangle(double value);
  private:
  double _internal_windangle() const;
  void _internal_set_windangle(double value);
  public:

  // optional double windSpeed = 8 [default = 0];
  bool has_windspeed() const;
  private:
  bool _internal_has_windspeed() const;
  public:
  void clear_windspeed();
  double windspeed() const;
  void set_windspeed(double value);
  private:
  double _internal_windspeed() const;
  void _internal_set_windspeed(double value);
  public:

  // optional uint32 version = 1 [default = 20];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 referenceYear = 3 [default = 1970];
  bool has_referenceyear() const;
  private:
  bool _internal_has_referenceyear() const;
  public:
  void clear_referenceyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 referenceyear() const;
  void set_referenceyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_referenceyear() const;
  void _internal_set_referenceyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool degreeAngles = 5 [default = true];
  bool has_degreeangles() const;
  private:
  bool _internal_has_degreeangles() const;
  public:
  void clear_degreeangles();
  bool degreeangles() const;
  void set_degreeangles(bool value);
  private:
  bool _internal_degreeangles() const;
  void _internal_set_degreeangles(bool value);
  public:

  // optional bool ignoreDuplicateGenericData = 20 [default = true];
  bool has_ignoreduplicategenericdata() const;
  private:
  bool _internal_has_ignoreduplicategenericdata() const;
  public:
  void clear_ignoreduplicategenericdata();
  bool ignoreduplicategenericdata() const;
  void set_ignoreduplicategenericdata(bool value);
  private:
  bool _internal_ignoreduplicategenericdata() const;
  void _internal_set_ignoreduplicategenericdata(bool value);
  public:

  // optional uint32 dataLimitPoints = 18 [default = 1000];
  bool has_datalimitpoints() const;
  private:
  bool _internal_has_datalimitpoints() const;
  public:
  void clear_datalimitpoints();
  ::PROTOBUF_NAMESPACE_ID::uint32 datalimitpoints() const;
  void set_datalimitpoints(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datalimitpoints() const;
  void _internal_set_datalimitpoints(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double dataLimitTime = 17 [default = 600];
  bool has_datalimittime() const;
  private:
  bool _internal_has_datalimittime() const;
  public:
  void clear_datalimittime();
  double datalimittime() const;
  void set_datalimittime(double value);
  private:
  double _internal_datalimittime() const;
  void _internal_set_datalimittime(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.ScenarioProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mediafile_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dedfile_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> wvsfile_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> gogfile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr viewfile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rulefile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terrainfile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::simData::CoordinateFrame* coordinateframe_;
  ::simData::ScenarioProperties_Classification* classification_;
  ::simData::ScenarioProperties_SoundFile* soundfile_;
  double windangle_;
  double windspeed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 referenceyear_;
  bool degreeangles_;
  bool ignoreduplicategenericdata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 datalimitpoints_;
  double datalimittime_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT PlatformProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.PlatformProperties) */ {
 public:
  inline PlatformProperties() : PlatformProperties(nullptr) {}
  virtual ~PlatformProperties();

  PlatformProperties(const PlatformProperties& from);
  PlatformProperties(PlatformProperties&& from) noexcept
    : PlatformProperties() {
    *this = ::std::move(from);
  }

  inline PlatformProperties& operator=(const PlatformProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlatformProperties& operator=(PlatformProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlatformProperties& default_instance();

  static inline const PlatformProperties* internal_default_instance() {
    return reinterpret_cast<const PlatformProperties*>(
               &_PlatformProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PlatformProperties& a, PlatformProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(PlatformProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlatformProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlatformProperties* New() const final {
    return CreateMaybeMessage<PlatformProperties>(nullptr);
  }

  PlatformProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlatformProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlatformProperties& from);
  void MergeFrom(const PlatformProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlatformProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.PlatformProperties";
  }
  protected:
  explicit PlatformProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 3,
    kCoordinateFrameFieldNumber = 6,
    kIdFieldNumber = 1,
    kOriginalIdFieldNumber = 2,
  };
  // optional string source = 3;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional .simData.CoordinateFrame coordinateFrame = 6;
  bool has_coordinateframe() const;
  private:
  bool _internal_has_coordinateframe() const;
  public:
  void clear_coordinateframe();
  const ::simData::CoordinateFrame& coordinateframe() const;
  ::simData::CoordinateFrame* release_coordinateframe();
  ::simData::CoordinateFrame* mutable_coordinateframe();
  void set_allocated_coordinateframe(::simData::CoordinateFrame* coordinateframe);
  private:
  const ::simData::CoordinateFrame& _internal_coordinateframe() const;
  ::simData::CoordinateFrame* _internal_mutable_coordinateframe();
  public:
  void unsafe_arena_set_allocated_coordinateframe(
      ::simData::CoordinateFrame* coordinateframe);
  ::simData::CoordinateFrame* unsafe_arena_release_coordinateframe();

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 originalId = 2;
  bool has_originalid() const;
  private:
  bool _internal_has_originalid() const;
  public:
  void clear_originalid();
  ::PROTOBUF_NAMESPACE_ID::uint64 originalid() const;
  void set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_originalid() const;
  void _internal_set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:simData.PlatformProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::simData::CoordinateFrame* coordinateframe_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 originalid_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT PlatformPrefs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.PlatformPrefs) */ {
 public:
  inline PlatformPrefs() : PlatformPrefs(nullptr) {}
  virtual ~PlatformPrefs();

  PlatformPrefs(const PlatformPrefs& from);
  PlatformPrefs(PlatformPrefs&& from) noexcept
    : PlatformPrefs() {
    *this = ::std::move(from);
  }

  inline PlatformPrefs& operator=(const PlatformPrefs& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlatformPrefs& operator=(PlatformPrefs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlatformPrefs& default_instance();

  static inline const PlatformPrefs* internal_default_instance() {
    return reinterpret_cast<const PlatformPrefs*>(
               &_PlatformPrefs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PlatformPrefs& a, PlatformPrefs& b) {
    a.Swap(&b);
  }
  inline void Swap(PlatformPrefs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlatformPrefs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlatformPrefs* New() const final {
    return CreateMaybeMessage<PlatformPrefs>(nullptr);
  }

  PlatformPrefs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlatformPrefs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlatformPrefs& from);
  void MergeFrom(const PlatformPrefs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlatformPrefs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.PlatformPrefs";
  }
  protected:
  explicit PlatformPrefs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGogFileFieldNumber = 51,
    kIconFieldNumber = 2,
    kRcsFileFieldNumber = 26,
    kCommonPrefsFieldNumber = 1,
    kTrackPrefsFieldNumber = 6,
    kPlatPositionOffsetFieldNumber = 49,
    kOrientationOffsetFieldNumber = 50,
    kScaleXYZFieldNumber = 52,
    kDrawModeFieldNumber = 3,
    kUseClampAltFieldNumber = 7,
    kUseClampYawFieldNumber = 10,
    kUseClampPitchFieldNumber = 12,
    kUseClampRollFieldNumber = 14,
    kClampValYawFieldNumber = 11,
    kClampValPitchFieldNumber = 13,
    kClampValRollFieldNumber = 15,
    kDrawBodyAxisFieldNumber = 18,
    kDrawInertialAxisFieldNumber = 19,
    kDrawSunVecFieldNumber = 20,
    kDrawMoonVecFieldNumber = 21,
    kWireFrameFieldNumber = 23,
    kDrawOpticLosFieldNumber = 24,
    kDrawRfLosFieldNumber = 25,
    kDrawRcsFieldNumber = 27,
    kRcsElevationFieldNumber = 32,
    kRcsPolarityFieldNumber = 31,
    kDraw3DRcsFieldNumber = 28,
    kRcsColorScaleFieldNumber = 30,
    kDrawCircleHilightFieldNumber = 35,
    kExtrapolatePosFieldNumber = 38,
    kDynamicScaleOffsetFieldNumber = 42,
    kDynamicScaleFieldNumber = 41,
    kDrawVelocityVecFieldNumber = 44,
    kAlphaVolumeFieldNumber = 53,
    kUseCullFaceFieldNumber = 54,
    kClampOrientationAtLowVelocityFieldNumber = 60,
    kSurfaceClampingFieldNumber = 61,
    kAboveSurfaceClampingFieldNumber = 69,
    kDrawBoxFieldNumber = 17,
    kCullFaceFieldNumber = 55,
    kPolygonModeFaceFieldNumber = 56,
    kPolygonStippleFieldNumber = 59,
    kUsePolygonStippleFieldNumber = 58,
    kAnimateDofNodesFieldNumber = 70,
    kEciDataModeFieldNumber = 73,
    kLosAltitudeOffsetFieldNumber = 68,
    kCircleHilightShapeFieldNumber = 71,
    kDynamicScaleAlgorithmFieldNumber = 74,
    kClampValAltMinFieldNumber = 8,
    kClampValAltMaxFieldNumber = 9,
    kRotateIconsFieldNumber = 4,
    kNoDepthIconsFieldNumber = 5,
    kLightedFieldNumber = 16,
    kInterpolatePosFieldNumber = 37,
    kVelVecUseStaticLengthFieldNumber = 45,
    kAxisScaleFieldNumber = 22,
    kRcsColorFieldNumber = 29,
    kCircleHilightColorFieldNumber = 36,
    kRcsFrequencyFieldNumber = 33,
    kRcsDetailFieldNumber = 34,
    kScaleFieldNumber = 39,
    kDynamicScaleScalarFieldNumber = 43,
    kBrightnessFieldNumber = 40,
    kVelVecStaticLenUnitsFieldNumber = 47,
    kVelVecStaticLenFieldNumber = 46,
    kVelVecTimeFieldNumber = 48,
    kPolygonModeFieldNumber = 57,
    kVelVecTimeUnitsFieldNumber = 62,
    kIconAlignmentFieldNumber = 63,
    kVisibleLosColorFieldNumber = 64,
    kLosRangeResolutionFieldNumber = 66,
    kLosAzimuthalResolutionFieldNumber = 67,
    kObstructedLosColorFieldNumber = 65,
    kVelVecColorFieldNumber = 72,
  };
  // repeated string gogFile = 51;
  int gogfile_size() const;
  private:
  int _internal_gogfile_size() const;
  public:
  void clear_gogfile();
  const std::string& gogfile(int index) const;
  std::string* mutable_gogfile(int index);
  void set_gogfile(int index, const std::string& value);
  void set_gogfile(int index, std::string&& value);
  void set_gogfile(int index, const char* value);
  void set_gogfile(int index, const char* value, size_t size);
  std::string* add_gogfile();
  void add_gogfile(const std::string& value);
  void add_gogfile(std::string&& value);
  void add_gogfile(const char* value);
  void add_gogfile(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& gogfile() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_gogfile();
  private:
  const std::string& _internal_gogfile(int index) const;
  std::string* _internal_add_gogfile();
  public:

  // optional string icon = 2;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // optional string rcsFile = 26 [default = ""];
  bool has_rcsfile() const;
  private:
  bool _internal_has_rcsfile() const;
  public:
  void clear_rcsfile();
  const std::string& rcsfile() const;
  void set_rcsfile(const std::string& value);
  void set_rcsfile(std::string&& value);
  void set_rcsfile(const char* value);
  void set_rcsfile(const char* value, size_t size);
  std::string* mutable_rcsfile();
  std::string* release_rcsfile();
  void set_allocated_rcsfile(std::string* rcsfile);
  private:
  const std::string& _internal_rcsfile() const;
  void _internal_set_rcsfile(const std::string& value);
  std::string* _internal_mutable_rcsfile();
  public:

  // optional .simData.CommonPrefs commonPrefs = 1;
  bool has_commonprefs() const;
  private:
  bool _internal_has_commonprefs() const;
  public:
  void clear_commonprefs();
  const ::simData::CommonPrefs& commonprefs() const;
  ::simData::CommonPrefs* release_commonprefs();
  ::simData::CommonPrefs* mutable_commonprefs();
  void set_allocated_commonprefs(::simData::CommonPrefs* commonprefs);
  private:
  const ::simData::CommonPrefs& _internal_commonprefs() const;
  ::simData::CommonPrefs* _internal_mutable_commonprefs();
  public:
  void unsafe_arena_set_allocated_commonprefs(
      ::simData::CommonPrefs* commonprefs);
  ::simData::CommonPrefs* unsafe_arena_release_commonprefs();

  // optional .simData.TrackPrefs trackPrefs = 6;
  bool has_trackprefs() const;
  private:
  bool _internal_has_trackprefs() const;
  public:
  void clear_trackprefs();
  const ::simData::TrackPrefs& trackprefs() const;
  ::simData::TrackPrefs* release_trackprefs();
  ::simData::TrackPrefs* mutable_trackprefs();
  void set_allocated_trackprefs(::simData::TrackPrefs* trackprefs);
  private:
  const ::simData::TrackPrefs& _internal_trackprefs() const;
  ::simData::TrackPrefs* _internal_mutable_trackprefs();
  public:
  void unsafe_arena_set_allocated_trackprefs(
      ::simData::TrackPrefs* trackprefs);
  ::simData::TrackPrefs* unsafe_arena_release_trackprefs();

  // optional .simData.Position platPositionOffset = 49;
  bool has_platpositionoffset() const;
  private:
  bool _internal_has_platpositionoffset() const;
  public:
  void clear_platpositionoffset();
  const ::simData::Position& platpositionoffset() const;
  ::simData::Position* release_platpositionoffset();
  ::simData::Position* mutable_platpositionoffset();
  void set_allocated_platpositionoffset(::simData::Position* platpositionoffset);
  private:
  const ::simData::Position& _internal_platpositionoffset() const;
  ::simData::Position* _internal_mutable_platpositionoffset();
  public:
  void unsafe_arena_set_allocated_platpositionoffset(
      ::simData::Position* platpositionoffset);
  ::simData::Position* unsafe_arena_release_platpositionoffset();

  // optional .simData.BodyOrientation orientationOffset = 50;
  bool has_orientationoffset() const;
  private:
  bool _internal_has_orientationoffset() const;
  public:
  void clear_orientationoffset();
  const ::simData::BodyOrientation& orientationoffset() const;
  ::simData::BodyOrientation* release_orientationoffset();
  ::simData::BodyOrientation* mutable_orientationoffset();
  void set_allocated_orientationoffset(::simData::BodyOrientation* orientationoffset);
  private:
  const ::simData::BodyOrientation& _internal_orientationoffset() const;
  ::simData::BodyOrientation* _internal_mutable_orientationoffset();
  public:
  void unsafe_arena_set_allocated_orientationoffset(
      ::simData::BodyOrientation* orientationoffset);
  ::simData::BodyOrientation* unsafe_arena_release_orientationoffset();

  // optional .simData.Position scaleXYZ = 52;
  bool has_scalexyz() const;
  private:
  bool _internal_has_scalexyz() const;
  public:
  void clear_scalexyz();
  const ::simData::Position& scalexyz() const;
  ::simData::Position* release_scalexyz();
  ::simData::Position* mutable_scalexyz();
  void set_allocated_scalexyz(::simData::Position* scalexyz);
  private:
  const ::simData::Position& _internal_scalexyz() const;
  ::simData::Position* _internal_mutable_scalexyz();
  public:
  void unsafe_arena_set_allocated_scalexyz(
      ::simData::Position* scalexyz);
  ::simData::Position* unsafe_arena_release_scalexyz();

  // optional .simData.ModelDrawMode drawMode = 3 [default = MDM_SOLID];
  bool has_drawmode() const;
  private:
  bool _internal_has_drawmode() const;
  public:
  void clear_drawmode();
  ::simData::ModelDrawMode drawmode() const;
  void set_drawmode(::simData::ModelDrawMode value);
  private:
  ::simData::ModelDrawMode _internal_drawmode() const;
  void _internal_set_drawmode(::simData::ModelDrawMode value);
  public:

  // optional bool useClampAlt = 7 [default = false];
  bool has_useclampalt() const;
  private:
  bool _internal_has_useclampalt() const;
  public:
  void clear_useclampalt();
  bool useclampalt() const;
  void set_useclampalt(bool value);
  private:
  bool _internal_useclampalt() const;
  void _internal_set_useclampalt(bool value);
  public:

  // optional bool useClampYaw = 10 [default = false];
  bool has_useclampyaw() const;
  private:
  bool _internal_has_useclampyaw() const;
  public:
  void clear_useclampyaw();
  bool useclampyaw() const;
  void set_useclampyaw(bool value);
  private:
  bool _internal_useclampyaw() const;
  void _internal_set_useclampyaw(bool value);
  public:

  // optional bool useClampPitch = 12 [default = false];
  bool has_useclamppitch() const;
  private:
  bool _internal_has_useclamppitch() const;
  public:
  void clear_useclamppitch();
  bool useclamppitch() const;
  void set_useclamppitch(bool value);
  private:
  bool _internal_useclamppitch() const;
  void _internal_set_useclamppitch(bool value);
  public:

  // optional bool useClampRoll = 14 [default = false];
  bool has_useclamproll() const;
  private:
  bool _internal_has_useclamproll() const;
  public:
  void clear_useclamproll();
  bool useclamproll() const;
  void set_useclamproll(bool value);
  private:
  bool _internal_useclamproll() const;
  void _internal_set_useclamproll(bool value);
  public:

  // optional double clampValYaw = 11 [default = 0];
  bool has_clampvalyaw() const;
  private:
  bool _internal_has_clampvalyaw() const;
  public:
  void clear_clampvalyaw();
  double clampvalyaw() const;
  void set_clampvalyaw(double value);
  private:
  double _internal_clampvalyaw() const;
  void _internal_set_clampvalyaw(double value);
  public:

  // optional double clampValPitch = 13 [default = 0];
  bool has_clampvalpitch() const;
  private:
  bool _internal_has_clampvalpitch() const;
  public:
  void clear_clampvalpitch();
  double clampvalpitch() const;
  void set_clampvalpitch(double value);
  private:
  double _internal_clampvalpitch() const;
  void _internal_set_clampvalpitch(double value);
  public:

  // optional double clampValRoll = 15 [default = 0];
  bool has_clampvalroll() const;
  private:
  bool _internal_has_clampvalroll() const;
  public:
  void clear_clampvalroll();
  double clampvalroll() const;
  void set_clampvalroll(double value);
  private:
  double _internal_clampvalroll() const;
  void _internal_set_clampvalroll(double value);
  public:

  // optional bool drawBodyAxis = 18 [default = false];
  bool has_drawbodyaxis() const;
  private:
  bool _internal_has_drawbodyaxis() const;
  public:
  void clear_drawbodyaxis();
  bool drawbodyaxis() const;
  void set_drawbodyaxis(bool value);
  private:
  bool _internal_drawbodyaxis() const;
  void _internal_set_drawbodyaxis(bool value);
  public:

  // optional bool drawInertialAxis = 19 [default = false];
  bool has_drawinertialaxis() const;
  private:
  bool _internal_has_drawinertialaxis() const;
  public:
  void clear_drawinertialaxis();
  bool drawinertialaxis() const;
  void set_drawinertialaxis(bool value);
  private:
  bool _internal_drawinertialaxis() const;
  void _internal_set_drawinertialaxis(bool value);
  public:

  // optional bool drawSunVec = 20 [default = false];
  bool has_drawsunvec() const;
  private:
  bool _internal_has_drawsunvec() const;
  public:
  void clear_drawsunvec();
  bool drawsunvec() const;
  void set_drawsunvec(bool value);
  private:
  bool _internal_drawsunvec() const;
  void _internal_set_drawsunvec(bool value);
  public:

  // optional bool drawMoonVec = 21 [default = false];
  bool has_drawmoonvec() const;
  private:
  bool _internal_has_drawmoonvec() const;
  public:
  void clear_drawmoonvec();
  bool drawmoonvec() const;
  void set_drawmoonvec(bool value);
  private:
  bool _internal_drawmoonvec() const;
  void _internal_set_drawmoonvec(bool value);
  public:

  // optional bool wireFrame = 23 [default = false];
  bool has_wireframe() const;
  private:
  bool _internal_has_wireframe() const;
  public:
  void clear_wireframe();
  bool wireframe() const;
  void set_wireframe(bool value);
  private:
  bool _internal_wireframe() const;
  void _internal_set_wireframe(bool value);
  public:

  // optional bool drawOpticLos = 24 [default = false];
  bool has_drawopticlos() const;
  private:
  bool _internal_has_drawopticlos() const;
  public:
  void clear_drawopticlos();
  bool drawopticlos() const;
  void set_drawopticlos(bool value);
  private:
  bool _internal_drawopticlos() const;
  void _internal_set_drawopticlos(bool value);
  public:

  // optional bool drawRfLos = 25 [default = false];
  bool has_drawrflos() const;
  private:
  bool _internal_has_drawrflos() const;
  public:
  void clear_drawrflos();
  bool drawrflos() const;
  void set_drawrflos(bool value);
  private:
  bool _internal_drawrflos() const;
  void _internal_set_drawrflos(bool value);
  public:

  // optional bool drawRcs = 27 [default = false];
  bool has_drawrcs() const;
  private:
  bool _internal_has_drawrcs() const;
  public:
  void clear_drawrcs();
  bool drawrcs() const;
  void set_drawrcs(bool value);
  private:
  bool _internal_drawrcs() const;
  void _internal_set_drawrcs(bool value);
  public:

  // optional double rcsElevation = 32 [default = 0];
  bool has_rcselevation() const;
  private:
  bool _internal_has_rcselevation() const;
  public:
  void clear_rcselevation();
  double rcselevation() const;
  void set_rcselevation(double value);
  private:
  double _internal_rcselevation() const;
  void _internal_set_rcselevation(double value);
  public:

  // optional .simData.Polarity rcsPolarity = 31 [default = POL_UNKNOWN];
  bool has_rcspolarity() const;
  private:
  bool _internal_has_rcspolarity() const;
  public:
  void clear_rcspolarity();
  ::simData::Polarity rcspolarity() const;
  void set_rcspolarity(::simData::Polarity value);
  private:
  ::simData::Polarity _internal_rcspolarity() const;
  void _internal_set_rcspolarity(::simData::Polarity value);
  public:

  // optional bool draw3dRcs = 28 [default = false];
  bool has_draw3drcs() const;
  private:
  bool _internal_has_draw3drcs() const;
  public:
  void clear_draw3drcs();
  bool draw3drcs() const;
  void set_draw3drcs(bool value);
  private:
  bool _internal_draw3drcs() const;
  void _internal_set_draw3drcs(bool value);
  public:

  // optional bool rcsColorScale = 30 [default = false];
  bool has_rcscolorscale() const;
  private:
  bool _internal_has_rcscolorscale() const;
  public:
  void clear_rcscolorscale();
  bool rcscolorscale() const;
  void set_rcscolorscale(bool value);
  private:
  bool _internal_rcscolorscale() const;
  void _internal_set_rcscolorscale(bool value);
  public:

  // optional bool drawCircleHilight = 35 [default = false];
  bool has_drawcirclehilight() const;
  private:
  bool _internal_has_drawcirclehilight() const;
  public:
  void clear_drawcirclehilight();
  bool drawcirclehilight() const;
  void set_drawcirclehilight(bool value);
  private:
  bool _internal_drawcirclehilight() const;
  void _internal_set_drawcirclehilight(bool value);
  public:

  // optional bool extrapolatePos = 38 [default = false];
  bool has_extrapolatepos() const;
  private:
  bool _internal_has_extrapolatepos() const;
  public:
  void clear_extrapolatepos();
  bool extrapolatepos() const;
  void set_extrapolatepos(bool value);
  private:
  bool _internal_extrapolatepos() const;
  void _internal_set_extrapolatepos(bool value);
  public:

  // optional double dynamicScaleOffset = 42 [default = 0];
  bool has_dynamicscaleoffset() const;
  private:
  bool _internal_has_dynamicscaleoffset() const;
  public:
  void clear_dynamicscaleoffset();
  double dynamicscaleoffset() const;
  void set_dynamicscaleoffset(double value);
  private:
  double _internal_dynamicscaleoffset() const;
  void _internal_set_dynamicscaleoffset(double value);
  public:

  // optional bool dynamicScale = 41 [default = false];
  bool has_dynamicscale() const;
  private:
  bool _internal_has_dynamicscale() const;
  public:
  void clear_dynamicscale();
  bool dynamicscale() const;
  void set_dynamicscale(bool value);
  private:
  bool _internal_dynamicscale() const;
  void _internal_set_dynamicscale(bool value);
  public:

  // optional bool drawVelocityVec = 44 [default = false];
  bool has_drawvelocityvec() const;
  private:
  bool _internal_has_drawvelocityvec() const;
  public:
  void clear_drawvelocityvec();
  bool drawvelocityvec() const;
  void set_drawvelocityvec(bool value);
  private:
  bool _internal_drawvelocityvec() const;
  void _internal_set_drawvelocityvec(bool value);
  public:

  // optional bool alphaVolume = 53 [default = false];
  bool has_alphavolume() const;
  private:
  bool _internal_has_alphavolume() const;
  public:
  void clear_alphavolume();
  bool alphavolume() const;
  void set_alphavolume(bool value);
  private:
  bool _internal_alphavolume() const;
  void _internal_set_alphavolume(bool value);
  public:

  // optional bool useCullFace = 54 [default = false];
  bool has_usecullface() const;
  private:
  bool _internal_has_usecullface() const;
  public:
  void clear_usecullface();
  bool usecullface() const;
  void set_usecullface(bool value);
  private:
  bool _internal_usecullface() const;
  void _internal_set_usecullface(bool value);
  public:

  // optional bool clampOrientationAtLowVelocity = 60 [default = false];
  bool has_clamporientationatlowvelocity() const;
  private:
  bool _internal_has_clamporientationatlowvelocity() const;
  public:
  void clear_clamporientationatlowvelocity();
  bool clamporientationatlowvelocity() const;
  void set_clamporientationatlowvelocity(bool value);
  private:
  bool _internal_clamporientationatlowvelocity() const;
  void _internal_set_clamporientationatlowvelocity(bool value);
  public:

  // optional bool surfaceClamping = 61 [default = false];
  bool has_surfaceclamping() const;
  private:
  bool _internal_has_surfaceclamping() const;
  public:
  void clear_surfaceclamping();
  bool surfaceclamping() const;
  void set_surfaceclamping(bool value);
  private:
  bool _internal_surfaceclamping() const;
  void _internal_set_surfaceclamping(bool value);
  public:

  // optional bool aboveSurfaceClamping = 69 [default = false];
  bool has_abovesurfaceclamping() const;
  private:
  bool _internal_has_abovesurfaceclamping() const;
  public:
  void clear_abovesurfaceclamping();
  bool abovesurfaceclamping() const;
  void set_abovesurfaceclamping(bool value);
  private:
  bool _internal_abovesurfaceclamping() const;
  void _internal_set_abovesurfaceclamping(bool value);
  public:

  // optional bool drawBox = 17 [default = false];
  bool has_drawbox() const;
  private:
  bool _internal_has_drawbox() const;
  public:
  void clear_drawbox();
  bool drawbox() const;
  void set_drawbox(bool value);
  private:
  bool _internal_drawbox() const;
  void _internal_set_drawbox(bool value);
  public:

  // optional .simData.PolygonFace cullFace = 55 [default = FRONT_AND_BACK];
  bool has_cullface() const;
  private:
  bool _internal_has_cullface() const;
  public:
  void clear_cullface();
  ::simData::PolygonFace cullface() const;
  void set_cullface(::simData::PolygonFace value);
  private:
  ::simData::PolygonFace _internal_cullface() const;
  void _internal_set_cullface(::simData::PolygonFace value);
  public:

  // optional .simData.PolygonFace polygonModeFace = 56 [default = FRONT_AND_BACK];
  bool has_polygonmodeface() const;
  private:
  bool _internal_has_polygonmodeface() const;
  public:
  void clear_polygonmodeface();
  ::simData::PolygonFace polygonmodeface() const;
  void set_polygonmodeface(::simData::PolygonFace value);
  private:
  ::simData::PolygonFace _internal_polygonmodeface() const;
  void _internal_set_polygonmodeface(::simData::PolygonFace value);
  public:

  // optional uint32 polygonStipple = 59;
  bool has_polygonstipple() const;
  private:
  bool _internal_has_polygonstipple() const;
  public:
  void clear_polygonstipple();
  ::PROTOBUF_NAMESPACE_ID::uint32 polygonstipple() const;
  void set_polygonstipple(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_polygonstipple() const;
  void _internal_set_polygonstipple(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool usePolygonStipple = 58 [default = false];
  bool has_usepolygonstipple() const;
  private:
  bool _internal_has_usepolygonstipple() const;
  public:
  void clear_usepolygonstipple();
  bool usepolygonstipple() const;
  void set_usepolygonstipple(bool value);
  private:
  bool _internal_usepolygonstipple() const;
  void _internal_set_usepolygonstipple(bool value);
  public:

  // optional bool animateDofNodes = 70 [default = false];
  bool has_animatedofnodes() const;
  private:
  bool _internal_has_animatedofnodes() const;
  public:
  void clear_animatedofnodes();
  bool animatedofnodes() const;
  void set_animatedofnodes(bool value);
  private:
  bool _internal_animatedofnodes() const;
  void _internal_set_animatedofnodes(bool value);
  public:

  // optional bool eciDataMode = 73 [default = false];
  bool has_ecidatamode() const;
  private:
  bool _internal_has_ecidatamode() const;
  public:
  void clear_ecidatamode();
  bool ecidatamode() const;
  void set_ecidatamode(bool value);
  private:
  bool _internal_ecidatamode() const;
  void _internal_set_ecidatamode(bool value);
  public:

  // optional double losAltitudeOffset = 68 [default = 0];
  bool has_losaltitudeoffset() const;
  private:
  bool _internal_has_losaltitudeoffset() const;
  public:
  void clear_losaltitudeoffset();
  double losaltitudeoffset() const;
  void set_losaltitudeoffset(double value);
  private:
  double _internal_losaltitudeoffset() const;
  void _internal_set_losaltitudeoffset(double value);
  public:

  // optional .simData.CircleHilightShape circleHilightShape = 71 [default = CH_PULSING_CIRCLE];
  bool has_circlehilightshape() const;
  private:
  bool _internal_has_circlehilightshape() const;
  public:
  void clear_circlehilightshape();
  ::simData::CircleHilightShape circlehilightshape() const;
  void set_circlehilightshape(::simData::CircleHilightShape value);
  private:
  ::simData::CircleHilightShape _internal_circlehilightshape() const;
  void _internal_set_circlehilightshape(::simData::CircleHilightShape value);
  public:

  // optional .simData.DynamicScaleAlgorithm dynamicScaleAlgorithm = 74 [default = DSA_METERS_TO_PIXELS];
  bool has_dynamicscalealgorithm() const;
  private:
  bool _internal_has_dynamicscalealgorithm() const;
  public:
  void clear_dynamicscalealgorithm();
  ::simData::DynamicScaleAlgorithm dynamicscalealgorithm() const;
  void set_dynamicscalealgorithm(::simData::DynamicScaleAlgorithm value);
  private:
  ::simData::DynamicScaleAlgorithm _internal_dynamicscalealgorithm() const;
  void _internal_set_dynamicscalealgorithm(::simData::DynamicScaleAlgorithm value);
  public:

  // optional double clampValAltMin = 8 [default = -100000];
  bool has_clampvalaltmin() const;
  private:
  bool _internal_has_clampvalaltmin() const;
  public:
  void clear_clampvalaltmin();
  double clampvalaltmin() const;
  void set_clampvalaltmin(double value);
  private:
  double _internal_clampvalaltmin() const;
  void _internal_set_clampvalaltmin(double value);
  public:

  // optional double clampValAltMax = 9 [default = 1000000000];
  bool has_clampvalaltmax() const;
  private:
  bool _internal_has_clampvalaltmax() const;
  public:
  void clear_clampvalaltmax();
  double clampvalaltmax() const;
  void set_clampvalaltmax(double value);
  private:
  double _internal_clampvalaltmax() const;
  void _internal_set_clampvalaltmax(double value);
  public:

  // optional .simData.IconRotation rotateIcons = 4 [default = IR_2D_YAW];
  bool has_rotateicons() const;
  private:
  bool _internal_has_rotateicons() const;
  public:
  void clear_rotateicons();
  ::simData::IconRotation rotateicons() const;
  void set_rotateicons(::simData::IconRotation value);
  private:
  ::simData::IconRotation _internal_rotateicons() const;
  void _internal_set_rotateicons(::simData::IconRotation value);
  public:

  // optional bool noDepthIcons = 5 [default = true];
  bool has_nodepthicons() const;
  private:
  bool _internal_has_nodepthicons() const;
  public:
  void clear_nodepthicons();
  bool nodepthicons() const;
  void set_nodepthicons(bool value);
  private:
  bool _internal_nodepthicons() const;
  void _internal_set_nodepthicons(bool value);
  public:

  // optional bool lighted = 16 [default = true];
  bool has_lighted() const;
  private:
  bool _internal_has_lighted() const;
  public:
  void clear_lighted();
  bool lighted() const;
  void set_lighted(bool value);
  private:
  bool _internal_lighted() const;
  void _internal_set_lighted(bool value);
  public:

  // optional bool interpolatePos = 37 [default = true];
  bool has_interpolatepos() const;
  private:
  bool _internal_has_interpolatepos() const;
  public:
  void clear_interpolatepos();
  bool interpolatepos() const;
  void set_interpolatepos(bool value);
  private:
  bool _internal_interpolatepos() const;
  void _internal_set_interpolatepos(bool value);
  public:

  // optional bool velVecUseStaticLength = 45 [default = true];
  bool has_velvecusestaticlength() const;
  private:
  bool _internal_has_velvecusestaticlength() const;
  public:
  void clear_velvecusestaticlength();
  bool velvecusestaticlength() const;
  void set_velvecusestaticlength(bool value);
  private:
  bool _internal_velvecusestaticlength() const;
  void _internal_set_velvecusestaticlength(bool value);
  public:

  // optional double axisScale = 22 [default = 1];
  bool has_axisscale() const;
  private:
  bool _internal_has_axisscale() const;
  public:
  void clear_axisscale();
  double axisscale() const;
  void set_axisscale(double value);
  private:
  double _internal_axisscale() const;
  void _internal_set_axisscale(double value);
  public:

  // optional fixed32 rcsColor = 29 [default = 4294967168];
  bool has_rcscolor() const;
  private:
  bool _internal_has_rcscolor() const;
  public:
  void clear_rcscolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 rcscolor() const;
  void set_rcscolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rcscolor() const;
  void _internal_set_rcscolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 circleHilightColor = 36 [default = 4294967295];
  bool has_circlehilightcolor() const;
  private:
  bool _internal_has_circlehilightcolor() const;
  public:
  void clear_circlehilightcolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 circlehilightcolor() const;
  void set_circlehilightcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_circlehilightcolor() const;
  void _internal_set_circlehilightcolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double rcsFrequency = 33 [default = 7000];
  bool has_rcsfrequency() const;
  private:
  bool _internal_has_rcsfrequency() const;
  public:
  void clear_rcsfrequency();
  double rcsfrequency() const;
  void set_rcsfrequency(double value);
  private:
  double _internal_rcsfrequency() const;
  void _internal_set_rcsfrequency(double value);
  public:

  // optional double rcsDetail = 34 [default = 1];
  bool has_rcsdetail() const;
  private:
  bool _internal_has_rcsdetail() const;
  public:
  void clear_rcsdetail();
  double rcsdetail() const;
  void set_rcsdetail(double value);
  private:
  double _internal_rcsdetail() const;
  void _internal_set_rcsdetail(double value);
  public:

  // optional double scale = 39 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  double scale() const;
  void set_scale(double value);
  private:
  double _internal_scale() const;
  void _internal_set_scale(double value);
  public:

  // optional double dynamicScaleScalar = 43 [default = 1];
  bool has_dynamicscalescalar() const;
  private:
  bool _internal_has_dynamicscalescalar() const;
  public:
  void clear_dynamicscalescalar();
  double dynamicscalescalar() const;
  void set_dynamicscalescalar(double value);
  private:
  double _internal_dynamicscalescalar() const;
  void _internal_set_dynamicscalescalar(double value);
  public:

  // optional int32 brightness = 40 [default = 36];
  bool has_brightness() const;
  private:
  bool _internal_has_brightness() const;
  public:
  void clear_brightness();
  ::PROTOBUF_NAMESPACE_ID::int32 brightness() const;
  void set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_brightness() const;
  void _internal_set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .simData.DistanceUnits velVecStaticLenUnits = 47 [default = UNITS_NAUTICAL_MILES];
  bool has_velvecstaticlenunits() const;
  private:
  bool _internal_has_velvecstaticlenunits() const;
  public:
  void clear_velvecstaticlenunits();
  ::simData::DistanceUnits velvecstaticlenunits() const;
  void set_velvecstaticlenunits(::simData::DistanceUnits value);
  private:
  ::simData::DistanceUnits _internal_velvecstaticlenunits() const;
  void _internal_set_velvecstaticlenunits(::simData::DistanceUnits value);
  public:

  // optional double velVecStaticLen = 46 [default = 0.5];
  bool has_velvecstaticlen() const;
  private:
  bool _internal_has_velvecstaticlen() const;
  public:
  void clear_velvecstaticlen();
  double velvecstaticlen() const;
  void set_velvecstaticlen(double value);
  private:
  double _internal_velvecstaticlen() const;
  void _internal_set_velvecstaticlen(double value);
  public:

  // optional double velVecTime = 48 [default = 1];
  bool has_velvectime() const;
  private:
  bool _internal_has_velvectime() const;
  public:
  void clear_velvectime();
  double velvectime() const;
  void set_velvectime(double value);
  private:
  double _internal_velvectime() const;
  void _internal_set_velvectime(double value);
  public:

  // optional .simData.PolygonMode polygonMode = 57 [default = FILL];
  bool has_polygonmode() const;
  private:
  bool _internal_has_polygonmode() const;
  public:
  void clear_polygonmode();
  ::simData::PolygonMode polygonmode() const;
  void set_polygonmode(::simData::PolygonMode value);
  private:
  ::simData::PolygonMode _internal_polygonmode() const;
  void _internal_set_polygonmode(::simData::PolygonMode value);
  public:

  // optional .simData.ElapsedTimeFormat velVecTimeUnits = 62 [default = ELAPSED_SECONDS];
  bool has_velvectimeunits() const;
  private:
  bool _internal_has_velvectimeunits() const;
  public:
  void clear_velvectimeunits();
  ::simData::ElapsedTimeFormat velvectimeunits() const;
  void set_velvectimeunits(::simData::ElapsedTimeFormat value);
  private:
  ::simData::ElapsedTimeFormat _internal_velvectimeunits() const;
  void _internal_set_velvectimeunits(::simData::ElapsedTimeFormat value);
  public:

  // optional .simData.TextAlignment iconAlignment = 63 [default = ALIGN_CENTER_CENTER];
  bool has_iconalignment() const;
  private:
  bool _internal_has_iconalignment() const;
  public:
  void clear_iconalignment();
  ::simData::TextAlignment iconalignment() const;
  void set_iconalignment(::simData::TextAlignment value);
  private:
  ::simData::TextAlignment _internal_iconalignment() const;
  void _internal_set_iconalignment(::simData::TextAlignment value);
  public:

  // optional fixed32 visibleLosColor = 64 [default = 16711808];
  bool has_visibleloscolor() const;
  private:
  bool _internal_has_visibleloscolor() const;
  public:
  void clear_visibleloscolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 visibleloscolor() const;
  void set_visibleloscolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_visibleloscolor() const;
  void _internal_set_visibleloscolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double losRangeResolution = 66 [default = 1000];
  bool has_losrangeresolution() const;
  private:
  bool _internal_has_losrangeresolution() const;
  public:
  void clear_losrangeresolution();
  double losrangeresolution() const;
  void set_losrangeresolution(double value);
  private:
  double _internal_losrangeresolution() const;
  void _internal_set_losrangeresolution(double value);
  public:

  // optional double losAzimuthalResolution = 67 [default = 15];
  bool has_losazimuthalresolution() const;
  private:
  bool _internal_has_losazimuthalresolution() const;
  public:
  void clear_losazimuthalresolution();
  double losazimuthalresolution() const;
  void set_losazimuthalresolution(double value);
  private:
  double _internal_losazimuthalresolution() const;
  void _internal_set_losazimuthalresolution(double value);
  public:

  // optional fixed32 obstructedLosColor = 65 [default = 4278190208];
  bool has_obstructedloscolor() const;
  private:
  bool _internal_has_obstructedloscolor() const;
  public:
  void clear_obstructedloscolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 obstructedloscolor() const;
  void set_obstructedloscolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_obstructedloscolor() const;
  void _internal_set_obstructedloscolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 velVecColor = 72 [default = 4286578943];
  bool has_velveccolor() const;
  private:
  bool _internal_has_velveccolor() const;
  public:
  void clear_velveccolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 velveccolor() const;
  void set_velveccolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_velveccolor() const;
  void _internal_set_velveccolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:simData.PlatformPrefs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> gogfile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rcsfile_;
  ::simData::CommonPrefs* commonprefs_;
  ::simData::TrackPrefs* trackprefs_;
  ::simData::Position* platpositionoffset_;
  ::simData::BodyOrientation* orientationoffset_;
  ::simData::Position* scalexyz_;
  int drawmode_;
  bool useclampalt_;
  bool useclampyaw_;
  bool useclamppitch_;
  bool useclamproll_;
  double clampvalyaw_;
  double clampvalpitch_;
  double clampvalroll_;
  bool drawbodyaxis_;
  bool drawinertialaxis_;
  bool drawsunvec_;
  bool drawmoonvec_;
  bool wireframe_;
  bool drawopticlos_;
  bool drawrflos_;
  bool drawrcs_;
  double rcselevation_;
  int rcspolarity_;
  bool draw3drcs_;
  bool rcscolorscale_;
  bool drawcirclehilight_;
  bool extrapolatepos_;
  double dynamicscaleoffset_;
  bool dynamicscale_;
  bool drawvelocityvec_;
  bool alphavolume_;
  bool usecullface_;
  bool clamporientationatlowvelocity_;
  bool surfaceclamping_;
  bool abovesurfaceclamping_;
  bool drawbox_;
  int cullface_;
  int polygonmodeface_;
  ::PROTOBUF_NAMESPACE_ID::uint32 polygonstipple_;
  bool usepolygonstipple_;
  bool animatedofnodes_;
  bool ecidatamode_;
  double losaltitudeoffset_;
  int circlehilightshape_;
  int dynamicscalealgorithm_;
  double clampvalaltmin_;
  double clampvalaltmax_;
  int rotateicons_;
  bool nodepthicons_;
  bool lighted_;
  bool interpolatepos_;
  bool velvecusestaticlength_;
  double axisscale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rcscolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 circlehilightcolor_;
  double rcsfrequency_;
  double rcsdetail_;
  double scale_;
  double dynamicscalescalar_;
  ::PROTOBUF_NAMESPACE_ID::int32 brightness_;
  int velvecstaticlenunits_;
  double velvecstaticlen_;
  double velvectime_;
  int polygonmode_;
  int velvectimeunits_;
  int iconalignment_;
  ::PROTOBUF_NAMESPACE_ID::uint32 visibleloscolor_;
  double losrangeresolution_;
  double losazimuthalresolution_;
  ::PROTOBUF_NAMESPACE_ID::uint32 obstructedloscolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 velveccolor_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT PlatformCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.PlatformCommand) */ {
 public:
  inline PlatformCommand() : PlatformCommand(nullptr) {}
  virtual ~PlatformCommand();

  PlatformCommand(const PlatformCommand& from);
  PlatformCommand(PlatformCommand&& from) noexcept
    : PlatformCommand() {
    *this = ::std::move(from);
  }

  inline PlatformCommand& operator=(const PlatformCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlatformCommand& operator=(PlatformCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlatformCommand& default_instance();

  static inline const PlatformCommand* internal_default_instance() {
    return reinterpret_cast<const PlatformCommand*>(
               &_PlatformCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PlatformCommand& a, PlatformCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(PlatformCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlatformCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlatformCommand* New() const final {
    return CreateMaybeMessage<PlatformCommand>(nullptr);
  }

  PlatformCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlatformCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlatformCommand& from);
  void MergeFrom(const PlatformCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlatformCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.PlatformCommand";
  }
  protected:
  explicit PlatformCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatePrefsFieldNumber = 2,
    kTimeFieldNumber = 1,
    kIsClearCommandFieldNumber = 3,
  };
  // optional .simData.PlatformPrefs updatePrefs = 2;
  bool has_updateprefs() const;
  private:
  bool _internal_has_updateprefs() const;
  public:
  void clear_updateprefs();
  const ::simData::PlatformPrefs& updateprefs() const;
  ::simData::PlatformPrefs* release_updateprefs();
  ::simData::PlatformPrefs* mutable_updateprefs();
  void set_allocated_updateprefs(::simData::PlatformPrefs* updateprefs);
  private:
  const ::simData::PlatformPrefs& _internal_updateprefs() const;
  ::simData::PlatformPrefs* _internal_mutable_updateprefs();
  public:
  void unsafe_arena_set_allocated_updateprefs(
      ::simData::PlatformPrefs* updateprefs);
  ::simData::PlatformPrefs* unsafe_arena_release_updateprefs();

  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // optional bool isClearCommand = 3 [default = false];
  bool has_isclearcommand() const;
  private:
  bool _internal_has_isclearcommand() const;
  public:
  void clear_isclearcommand();
  bool isclearcommand() const;
  void set_isclearcommand(bool value);
  private:
  bool _internal_isclearcommand() const;
  void _internal_set_isclearcommand(bool value);
  public:

  // @@protoc_insertion_point(class_scope:simData.PlatformCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::simData::PlatformPrefs* updateprefs_;
  double time_;
  bool isclearcommand_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT BeamProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.BeamProperties) */ {
 public:
  inline BeamProperties() : BeamProperties(nullptr) {}
  virtual ~BeamProperties();

  BeamProperties(const BeamProperties& from);
  BeamProperties(BeamProperties&& from) noexcept
    : BeamProperties() {
    *this = ::std::move(from);
  }

  inline BeamProperties& operator=(const BeamProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeamProperties& operator=(BeamProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BeamProperties& default_instance();

  static inline const BeamProperties* internal_default_instance() {
    return reinterpret_cast<const BeamProperties*>(
               &_BeamProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(BeamProperties& a, BeamProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(BeamProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeamProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeamProperties* New() const final {
    return CreateMaybeMessage<BeamProperties>(nullptr);
  }

  BeamProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeamProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BeamProperties& from);
  void MergeFrom(const BeamProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.BeamProperties";
  }
  protected:
  explicit BeamProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BeamProperties_BeamType BeamType;
  static constexpr BeamType ABSOLUTE_POSITION =
    BeamProperties_BeamType_ABSOLUTE_POSITION;
  static constexpr BeamType BODY_RELATIVE =
    BeamProperties_BeamType_BODY_RELATIVE;
  static constexpr BeamType TARGET =
    BeamProperties_BeamType_TARGET;
  static inline bool BeamType_IsValid(int value) {
    return BeamProperties_BeamType_IsValid(value);
  }
  static constexpr BeamType BeamType_MIN =
    BeamProperties_BeamType_BeamType_MIN;
  static constexpr BeamType BeamType_MAX =
    BeamProperties_BeamType_BeamType_MAX;
  static constexpr int BeamType_ARRAYSIZE =
    BeamProperties_BeamType_BeamType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BeamType_descriptor() {
    return BeamProperties_BeamType_descriptor();
  }
  template<typename T>
  static inline const std::string& BeamType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BeamType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BeamType_Name.");
    return BeamProperties_BeamType_Name(enum_t_value);
  }
  static inline bool BeamType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BeamType* value) {
    return BeamProperties_BeamType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 5,
    kIdFieldNumber = 1,
    kHostIdFieldNumber = 2,
    kOriginalIdFieldNumber = 4,
    kTypeFieldNumber = 6,
  };
  // optional string source = 5;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 hostId = 2;
  bool has_hostid() const;
  private:
  bool _internal_has_hostid() const;
  public:
  void clear_hostid();
  ::PROTOBUF_NAMESPACE_ID::uint64 hostid() const;
  void set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hostid() const;
  void _internal_set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 originalId = 4;
  bool has_originalid() const;
  private:
  bool _internal_has_originalid() const;
  public:
  void clear_originalid();
  ::PROTOBUF_NAMESPACE_ID::uint64 originalid() const;
  void set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_originalid() const;
  void _internal_set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .simData.BeamProperties.BeamType type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::simData::BeamProperties_BeamType type() const;
  void set_type(::simData::BeamProperties_BeamType value);
  private:
  ::simData::BeamProperties_BeamType _internal_type() const;
  void _internal_set_type(::simData::BeamProperties_BeamType value);
  public:

  // @@protoc_insertion_point(class_scope:simData.BeamProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hostid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 originalid_;
  int type_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT BeamPrefs_AntennaPattern PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.BeamPrefs.AntennaPattern) */ {
 public:
  inline BeamPrefs_AntennaPattern() : BeamPrefs_AntennaPattern(nullptr) {}
  virtual ~BeamPrefs_AntennaPattern();

  BeamPrefs_AntennaPattern(const BeamPrefs_AntennaPattern& from);
  BeamPrefs_AntennaPattern(BeamPrefs_AntennaPattern&& from) noexcept
    : BeamPrefs_AntennaPattern() {
    *this = ::std::move(from);
  }

  inline BeamPrefs_AntennaPattern& operator=(const BeamPrefs_AntennaPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeamPrefs_AntennaPattern& operator=(BeamPrefs_AntennaPattern&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BeamPrefs_AntennaPattern& default_instance();

  static inline const BeamPrefs_AntennaPattern* internal_default_instance() {
    return reinterpret_cast<const BeamPrefs_AntennaPattern*>(
               &_BeamPrefs_AntennaPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(BeamPrefs_AntennaPattern& a, BeamPrefs_AntennaPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(BeamPrefs_AntennaPattern* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeamPrefs_AntennaPattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeamPrefs_AntennaPattern* New() const final {
    return CreateMaybeMessage<BeamPrefs_AntennaPattern>(nullptr);
  }

  BeamPrefs_AntennaPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeamPrefs_AntennaPattern>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BeamPrefs_AntennaPattern& from);
  void MergeFrom(const BeamPrefs_AntennaPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamPrefs_AntennaPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.BeamPrefs.AntennaPattern";
  }
  protected:
  explicit BeamPrefs_AntennaPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BeamPrefs_AntennaPattern_Type Type;
  static constexpr Type NONE =
    BeamPrefs_AntennaPattern_Type_NONE;
  static constexpr Type FILE =
    BeamPrefs_AntennaPattern_Type_FILE;
  static constexpr Type ALGORITHM =
    BeamPrefs_AntennaPattern_Type_ALGORITHM;
  static inline bool Type_IsValid(int value) {
    return BeamPrefs_AntennaPattern_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    BeamPrefs_AntennaPattern_Type_Type_MIN;
  static constexpr Type Type_MAX =
    BeamPrefs_AntennaPattern_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    BeamPrefs_AntennaPattern_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return BeamPrefs_AntennaPattern_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return BeamPrefs_AntennaPattern_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return BeamPrefs_AntennaPattern_Type_Parse(name, value);
  }

  typedef BeamPrefs_AntennaPattern_FileFormat FileFormat;
  static constexpr FileFormat TABLE =
    BeamPrefs_AntennaPattern_FileFormat_TABLE;
  static constexpr FileFormat MONOPULSE =
    BeamPrefs_AntennaPattern_FileFormat_MONOPULSE;
  static constexpr FileFormat RELATIVE_TABLE =
    BeamPrefs_AntennaPattern_FileFormat_RELATIVE_TABLE;
  static constexpr FileFormat BILINEAR =
    BeamPrefs_AntennaPattern_FileFormat_BILINEAR;
  static constexpr FileFormat NSMA =
    BeamPrefs_AntennaPattern_FileFormat_NSMA;
  static constexpr FileFormat EZNEC =
    BeamPrefs_AntennaPattern_FileFormat_EZNEC;
  static constexpr FileFormat XFDTD =
    BeamPrefs_AntennaPattern_FileFormat_XFDTD;
  static inline bool FileFormat_IsValid(int value) {
    return BeamPrefs_AntennaPattern_FileFormat_IsValid(value);
  }
  static constexpr FileFormat FileFormat_MIN =
    BeamPrefs_AntennaPattern_FileFormat_FileFormat_MIN;
  static constexpr FileFormat FileFormat_MAX =
    BeamPrefs_AntennaPattern_FileFormat_FileFormat_MAX;
  static constexpr int FileFormat_ARRAYSIZE =
    BeamPrefs_AntennaPattern_FileFormat_FileFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FileFormat_descriptor() {
    return BeamPrefs_AntennaPattern_FileFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& FileFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FileFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FileFormat_Name.");
    return BeamPrefs_AntennaPattern_FileFormat_Name(enum_t_value);
  }
  static inline bool FileFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FileFormat* value) {
    return BeamPrefs_AntennaPattern_FileFormat_Parse(name, value);
  }

  typedef BeamPrefs_AntennaPattern_Algorithm Algorithm;
  static constexpr Algorithm PEDESTAL =
    BeamPrefs_AntennaPattern_Algorithm_PEDESTAL;
  static constexpr Algorithm GAUSS =
    BeamPrefs_AntennaPattern_Algorithm_GAUSS;
  static constexpr Algorithm CSCSQ =
    BeamPrefs_AntennaPattern_Algorithm_CSCSQ;
  static constexpr Algorithm SINXX =
    BeamPrefs_AntennaPattern_Algorithm_SINXX;
  static constexpr Algorithm OMNI =
    BeamPrefs_AntennaPattern_Algorithm_OMNI;
  static inline bool Algorithm_IsValid(int value) {
    return BeamPrefs_AntennaPattern_Algorithm_IsValid(value);
  }
  static constexpr Algorithm Algorithm_MIN =
    BeamPrefs_AntennaPattern_Algorithm_Algorithm_MIN;
  static constexpr Algorithm Algorithm_MAX =
    BeamPrefs_AntennaPattern_Algorithm_Algorithm_MAX;
  static constexpr int Algorithm_ARRAYSIZE =
    BeamPrefs_AntennaPattern_Algorithm_Algorithm_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Algorithm_descriptor() {
    return BeamPrefs_AntennaPattern_Algorithm_descriptor();
  }
  template<typename T>
  static inline const std::string& Algorithm_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Algorithm>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Algorithm_Name.");
    return BeamPrefs_AntennaPattern_Algorithm_Name(enum_t_value);
  }
  static inline bool Algorithm_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Algorithm* value) {
    return BeamPrefs_AntennaPattern_Algorithm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 3,
    kAlgorithmFieldNumber = 4,
    kTypeFieldNumber = 1,
    kFileFormatFieldNumber = 2,
  };
  // optional string fileName = 3 [default = ""];
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional .simData.BeamPrefs.AntennaPattern.Algorithm algorithm = 4 [default = PEDESTAL];
  bool has_algorithm() const;
  private:
  bool _internal_has_algorithm() const;
  public:
  void clear_algorithm();
  ::simData::BeamPrefs_AntennaPattern_Algorithm algorithm() const;
  void set_algorithm(::simData::BeamPrefs_AntennaPattern_Algorithm value);
  private:
  ::simData::BeamPrefs_AntennaPattern_Algorithm _internal_algorithm() const;
  void _internal_set_algorithm(::simData::BeamPrefs_AntennaPattern_Algorithm value);
  public:

  // optional .simData.BeamPrefs.AntennaPattern.Type type = 1 [default = ALGORITHM];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::simData::BeamPrefs_AntennaPattern_Type type() const;
  void set_type(::simData::BeamPrefs_AntennaPattern_Type value);
  private:
  ::simData::BeamPrefs_AntennaPattern_Type _internal_type() const;
  void _internal_set_type(::simData::BeamPrefs_AntennaPattern_Type value);
  public:

  // optional .simData.BeamPrefs.AntennaPattern.FileFormat fileFormat = 2 [default = TABLE];
  bool has_fileformat() const;
  private:
  bool _internal_has_fileformat() const;
  public:
  void clear_fileformat();
  ::simData::BeamPrefs_AntennaPattern_FileFormat fileformat() const;
  void set_fileformat(::simData::BeamPrefs_AntennaPattern_FileFormat value);
  private:
  ::simData::BeamPrefs_AntennaPattern_FileFormat _internal_fileformat() const;
  void _internal_set_fileformat(::simData::BeamPrefs_AntennaPattern_FileFormat value);
  public:

  // @@protoc_insertion_point(class_scope:simData.BeamPrefs.AntennaPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  int algorithm_;
  int type_;
  int fileformat_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT BeamPrefs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.BeamPrefs) */ {
 public:
  inline BeamPrefs() : BeamPrefs(nullptr) {}
  virtual ~BeamPrefs();

  BeamPrefs(const BeamPrefs& from);
  BeamPrefs(BeamPrefs&& from) noexcept
    : BeamPrefs() {
    *this = ::std::move(from);
  }

  inline BeamPrefs& operator=(const BeamPrefs& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeamPrefs& operator=(BeamPrefs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BeamPrefs& default_instance();

  static inline const BeamPrefs* internal_default_instance() {
    return reinterpret_cast<const BeamPrefs*>(
               &_BeamPrefs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(BeamPrefs& a, BeamPrefs& b) {
    a.Swap(&b);
  }
  inline void Swap(BeamPrefs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeamPrefs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeamPrefs* New() const final {
    return CreateMaybeMessage<BeamPrefs>(nullptr);
  }

  BeamPrefs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeamPrefs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BeamPrefs& from);
  void MergeFrom(const BeamPrefs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamPrefs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.BeamPrefs";
  }
  protected:
  explicit BeamPrefs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BeamPrefs_AntennaPattern AntennaPattern;

  typedef BeamPrefs_DrawMode DrawMode;
  static constexpr DrawMode WIRE =
    BeamPrefs_DrawMode_WIRE;
  static constexpr DrawMode SOLID =
    BeamPrefs_DrawMode_SOLID;
  static constexpr DrawMode WIRE_ON_SOLID =
    BeamPrefs_DrawMode_WIRE_ON_SOLID;
  static inline bool DrawMode_IsValid(int value) {
    return BeamPrefs_DrawMode_IsValid(value);
  }
  static constexpr DrawMode DrawMode_MIN =
    BeamPrefs_DrawMode_DrawMode_MIN;
  static constexpr DrawMode DrawMode_MAX =
    BeamPrefs_DrawMode_DrawMode_MAX;
  static constexpr int DrawMode_ARRAYSIZE =
    BeamPrefs_DrawMode_DrawMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DrawMode_descriptor() {
    return BeamPrefs_DrawMode_descriptor();
  }
  template<typename T>
  static inline const std::string& DrawMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DrawMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DrawMode_Name.");
    return BeamPrefs_DrawMode_Name(enum_t_value);
  }
  static inline bool DrawMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DrawMode* value) {
    return BeamPrefs_DrawMode_Parse(name, value);
  }

  typedef BeamPrefs_DrawType DrawType;
  static constexpr DrawType BEAM_3DB =
    BeamPrefs_DrawType_BEAM_3DB;
  static constexpr DrawType ANTENNA_PATTERN =
    BeamPrefs_DrawType_ANTENNA_PATTERN;
  static constexpr DrawType COVERAGE =
    BeamPrefs_DrawType_COVERAGE;
  static inline bool DrawType_IsValid(int value) {
    return BeamPrefs_DrawType_IsValid(value);
  }
  static constexpr DrawType DrawType_MIN =
    BeamPrefs_DrawType_DrawType_MIN;
  static constexpr DrawType DrawType_MAX =
    BeamPrefs_DrawType_DrawType_MAX;
  static constexpr int DrawType_ARRAYSIZE =
    BeamPrefs_DrawType_DrawType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DrawType_descriptor() {
    return BeamPrefs_DrawType_descriptor();
  }
  template<typename T>
  static inline const std::string& DrawType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DrawType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DrawType_Name.");
    return BeamPrefs_DrawType_Name(enum_t_value);
  }
  static inline bool DrawType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DrawType* value) {
    return BeamPrefs_DrawType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArepsFileFieldNumber = 19,
    kCommonPrefsFieldNumber = 1,
    kAntennaPatternFieldNumber = 18,
    kBeamPositionOffsetFieldNumber = 29,
    kDrawTypeFieldNumber = 6,
    kShadedFieldNumber = 2,
    kColorScaleFieldNumber = 17,
    kChannelFieldNumber = 20,
    kUseOffsetIconFieldNumber = 24,
    kPowerFieldNumber = 14,
    kFrequencyFieldNumber = 15,
    kPolarityFieldNumber = 16,
    kUseOffsetBeamFieldNumber = 25,
    kAnimateFieldNumber = 33,
    kAzimuthOffsetFieldNumber = 26,
    kElevationOffsetFieldNumber = 27,
    kRollOffsetFieldNumber = 28,
    kTargetIdFieldNumber = 30,
    kVerticalWidthFieldNumber = 31,
    kHorizontalWidthFieldNumber = 32,
    kBeamScaleFieldNumber = 5,
    kBeamDrawModeFieldNumber = 4,
    kCapResolutionFieldNumber = 7,
    kSensitivityFieldNumber = 10,
    kGainFieldNumber = 11,
    kFieldOfViewFieldNumber = 12,
    kConeResolutionFieldNumber = 8,
    kBlendedFieldNumber = 3,
    kRenderConeFieldNumber = 9,
    kWeightingFieldNumber = 21,
    kInterpolateBeamPosFieldNumber = 22,
    kDetailFieldNumber = 13,
    kUseOffsetPlatformFieldNumber = 23,
    kPulseStippleFieldNumber = 36,
    kPulseLengthFieldNumber = 34,
    kPulseRateFieldNumber = 35,
  };
  // optional string arepsFile = 19 [default = ""];
  bool has_arepsfile() const;
  private:
  bool _internal_has_arepsfile() const;
  public:
  void clear_arepsfile();
  const std::string& arepsfile() const;
  void set_arepsfile(const std::string& value);
  void set_arepsfile(std::string&& value);
  void set_arepsfile(const char* value);
  void set_arepsfile(const char* value, size_t size);
  std::string* mutable_arepsfile();
  std::string* release_arepsfile();
  void set_allocated_arepsfile(std::string* arepsfile);
  private:
  const std::string& _internal_arepsfile() const;
  void _internal_set_arepsfile(const std::string& value);
  std::string* _internal_mutable_arepsfile();
  public:

  // optional .simData.CommonPrefs commonPrefs = 1;
  bool has_commonprefs() const;
  private:
  bool _internal_has_commonprefs() const;
  public:
  void clear_commonprefs();
  const ::simData::CommonPrefs& commonprefs() const;
  ::simData::CommonPrefs* release_commonprefs();
  ::simData::CommonPrefs* mutable_commonprefs();
  void set_allocated_commonprefs(::simData::CommonPrefs* commonprefs);
  private:
  const ::simData::CommonPrefs& _internal_commonprefs() const;
  ::simData::CommonPrefs* _internal_mutable_commonprefs();
  public:
  void unsafe_arena_set_allocated_commonprefs(
      ::simData::CommonPrefs* commonprefs);
  ::simData::CommonPrefs* unsafe_arena_release_commonprefs();

  // optional .simData.BeamPrefs.AntennaPattern antennaPattern = 18;
  bool has_antennapattern() const;
  private:
  bool _internal_has_antennapattern() const;
  public:
  void clear_antennapattern();
  const ::simData::BeamPrefs_AntennaPattern& antennapattern() const;
  ::simData::BeamPrefs_AntennaPattern* release_antennapattern();
  ::simData::BeamPrefs_AntennaPattern* mutable_antennapattern();
  void set_allocated_antennapattern(::simData::BeamPrefs_AntennaPattern* antennapattern);
  private:
  const ::simData::BeamPrefs_AntennaPattern& _internal_antennapattern() const;
  ::simData::BeamPrefs_AntennaPattern* _internal_mutable_antennapattern();
  public:
  void unsafe_arena_set_allocated_antennapattern(
      ::simData::BeamPrefs_AntennaPattern* antennapattern);
  ::simData::BeamPrefs_AntennaPattern* unsafe_arena_release_antennapattern();

  // optional .simData.Position beamPositionOffset = 29;
  bool has_beampositionoffset() const;
  private:
  bool _internal_has_beampositionoffset() const;
  public:
  void clear_beampositionoffset();
  const ::simData::Position& beampositionoffset() const;
  ::simData::Position* release_beampositionoffset();
  ::simData::Position* mutable_beampositionoffset();
  void set_allocated_beampositionoffset(::simData::Position* beampositionoffset);
  private:
  const ::simData::Position& _internal_beampositionoffset() const;
  ::simData::Position* _internal_mutable_beampositionoffset();
  public:
  void unsafe_arena_set_allocated_beampositionoffset(
      ::simData::Position* beampositionoffset);
  ::simData::Position* unsafe_arena_release_beampositionoffset();

  // optional .simData.BeamPrefs.DrawType drawType = 6 [default = BEAM_3DB];
  bool has_drawtype() const;
  private:
  bool _internal_has_drawtype() const;
  public:
  void clear_drawtype();
  ::simData::BeamPrefs_DrawType drawtype() const;
  void set_drawtype(::simData::BeamPrefs_DrawType value);
  private:
  ::simData::BeamPrefs_DrawType _internal_drawtype() const;
  void _internal_set_drawtype(::simData::BeamPrefs_DrawType value);
  public:

  // optional bool shaded = 2 [default = false];
  bool has_shaded() const;
  private:
  bool _internal_has_shaded() const;
  public:
  void clear_shaded();
  bool shaded() const;
  void set_shaded(bool value);
  private:
  bool _internal_shaded() const;
  void _internal_set_shaded(bool value);
  public:

  // optional bool colorScale = 17 [default = false];
  bool has_colorscale() const;
  private:
  bool _internal_has_colorscale() const;
  public:
  void clear_colorscale();
  bool colorscale() const;
  void set_colorscale(bool value);
  private:
  bool _internal_colorscale() const;
  void _internal_set_colorscale(bool value);
  public:

  // optional bool channel = 20 [default = false];
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  bool channel() const;
  void set_channel(bool value);
  private:
  bool _internal_channel() const;
  void _internal_set_channel(bool value);
  public:

  // optional bool useOffsetIcon = 24 [default = false];
  bool has_useoffseticon() const;
  private:
  bool _internal_has_useoffseticon() const;
  public:
  void clear_useoffseticon();
  bool useoffseticon() const;
  void set_useoffseticon(bool value);
  private:
  bool _internal_useoffseticon() const;
  void _internal_set_useoffseticon(bool value);
  public:

  // optional double power = 14 [default = 0];
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  double power() const;
  void set_power(double value);
  private:
  double _internal_power() const;
  void _internal_set_power(double value);
  public:

  // optional double frequency = 15 [default = 0];
  bool has_frequency() const;
  private:
  bool _internal_has_frequency() const;
  public:
  void clear_frequency();
  double frequency() const;
  void set_frequency(double value);
  private:
  double _internal_frequency() const;
  void _internal_set_frequency(double value);
  public:

  // optional .simData.Polarity polarity = 16 [default = POL_UNKNOWN];
  bool has_polarity() const;
  private:
  bool _internal_has_polarity() const;
  public:
  void clear_polarity();
  ::simData::Polarity polarity() const;
  void set_polarity(::simData::Polarity value);
  private:
  ::simData::Polarity _internal_polarity() const;
  void _internal_set_polarity(::simData::Polarity value);
  public:

  // optional bool useOffsetBeam = 25 [default = false];
  bool has_useoffsetbeam() const;
  private:
  bool _internal_has_useoffsetbeam() const;
  public:
  void clear_useoffsetbeam();
  bool useoffsetbeam() const;
  void set_useoffsetbeam(bool value);
  private:
  bool _internal_useoffsetbeam() const;
  void _internal_set_useoffsetbeam(bool value);
  public:

  // optional bool animate = 33 [default = false];
  bool has_animate() const;
  private:
  bool _internal_has_animate() const;
  public:
  void clear_animate();
  bool animate() const;
  void set_animate(bool value);
  private:
  bool _internal_animate() const;
  void _internal_set_animate(bool value);
  public:

  // optional double azimuthOffset = 26 [default = 0];
  bool has_azimuthoffset() const;
  private:
  bool _internal_has_azimuthoffset() const;
  public:
  void clear_azimuthoffset();
  double azimuthoffset() const;
  void set_azimuthoffset(double value);
  private:
  double _internal_azimuthoffset() const;
  void _internal_set_azimuthoffset(double value);
  public:

  // optional double elevationOffset = 27 [default = 0];
  bool has_elevationoffset() const;
  private:
  bool _internal_has_elevationoffset() const;
  public:
  void clear_elevationoffset();
  double elevationoffset() const;
  void set_elevationoffset(double value);
  private:
  double _internal_elevationoffset() const;
  void _internal_set_elevationoffset(double value);
  public:

  // optional double rollOffset = 28 [default = 0];
  bool has_rolloffset() const;
  private:
  bool _internal_has_rolloffset() const;
  public:
  void clear_rolloffset();
  double rolloffset() const;
  void set_rolloffset(double value);
  private:
  double _internal_rolloffset() const;
  void _internal_set_rolloffset(double value);
  public:

  // optional uint64 targetId = 30 [default = 0];
  bool has_targetid() const;
  private:
  bool _internal_has_targetid() const;
  public:
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::uint64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double verticalWidth = 31 [default = 0];
  bool has_verticalwidth() const;
  private:
  bool _internal_has_verticalwidth() const;
  public:
  void clear_verticalwidth();
  double verticalwidth() const;
  void set_verticalwidth(double value);
  private:
  double _internal_verticalwidth() const;
  void _internal_set_verticalwidth(double value);
  public:

  // optional double horizontalWidth = 32 [default = 0];
  bool has_horizontalwidth() const;
  private:
  bool _internal_has_horizontalwidth() const;
  public:
  void clear_horizontalwidth();
  double horizontalwidth() const;
  void set_horizontalwidth(double value);
  private:
  double _internal_horizontalwidth() const;
  void _internal_set_horizontalwidth(double value);
  public:

  // optional double beamScale = 5 [default = 1];
  bool has_beamscale() const;
  private:
  bool _internal_has_beamscale() const;
  public:
  void clear_beamscale();
  double beamscale() const;
  void set_beamscale(double value);
  private:
  double _internal_beamscale() const;
  void _internal_set_beamscale(double value);
  public:

  // optional .simData.BeamPrefs.DrawMode beamDrawMode = 4 [default = SOLID];
  bool has_beamdrawmode() const;
  private:
  bool _internal_has_beamdrawmode() const;
  public:
  void clear_beamdrawmode();
  ::simData::BeamPrefs_DrawMode beamdrawmode() const;
  void set_beamdrawmode(::simData::BeamPrefs_DrawMode value);
  private:
  ::simData::BeamPrefs_DrawMode _internal_beamdrawmode() const;
  void _internal_set_beamdrawmode(::simData::BeamPrefs_DrawMode value);
  public:

  // optional uint32 capResolution = 7 [default = 5];
  bool has_capresolution() const;
  private:
  bool _internal_has_capresolution() const;
  public:
  void clear_capresolution();
  ::PROTOBUF_NAMESPACE_ID::uint32 capresolution() const;
  void set_capresolution(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_capresolution() const;
  void _internal_set_capresolution(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double sensitivity = 10 [default = -50];
  bool has_sensitivity() const;
  private:
  bool _internal_has_sensitivity() const;
  public:
  void clear_sensitivity();
  double sensitivity() const;
  void set_sensitivity(double value);
  private:
  double _internal_sensitivity() const;
  void _internal_set_sensitivity(double value);
  public:

  // optional double gain = 11 [default = 20];
  bool has_gain() const;
  private:
  bool _internal_has_gain() const;
  public:
  void clear_gain();
  double gain() const;
  void set_gain(double value);
  private:
  double _internal_gain() const;
  void _internal_set_gain(double value);
  public:

  // optional double fieldOfView = 12 [default = 1.5707963267];
  bool has_fieldofview() const;
  private:
  bool _internal_has_fieldofview() const;
  public:
  void clear_fieldofview();
  double fieldofview() const;
  void set_fieldofview(double value);
  private:
  double _internal_fieldofview() const;
  void _internal_set_fieldofview(double value);
  public:

  // optional uint32 coneResolution = 8 [default = 30];
  bool has_coneresolution() const;
  private:
  bool _internal_has_coneresolution() const;
  public:
  void clear_coneresolution();
  ::PROTOBUF_NAMESPACE_ID::uint32 coneresolution() const;
  void set_coneresolution(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coneresolution() const;
  void _internal_set_coneresolution(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool blended = 3 [default = true];
  bool has_blended() const;
  private:
  bool _internal_has_blended() const;
  public:
  void clear_blended();
  bool blended() const;
  void set_blended(bool value);
  private:
  bool _internal_blended() const;
  void _internal_set_blended(bool value);
  public:

  // optional bool renderCone = 9 [default = true];
  bool has_rendercone() const;
  private:
  bool _internal_has_rendercone() const;
  public:
  void clear_rendercone();
  bool rendercone() const;
  void set_rendercone(bool value);
  private:
  bool _internal_rendercone() const;
  void _internal_set_rendercone(bool value);
  public:

  // optional bool weighting = 21 [default = true];
  bool has_weighting() const;
  private:
  bool _internal_has_weighting() const;
  public:
  void clear_weighting();
  bool weighting() const;
  void set_weighting(bool value);
  private:
  bool _internal_weighting() const;
  void _internal_set_weighting(bool value);
  public:

  // optional bool interpolateBeamPos = 22 [default = true];
  bool has_interpolatebeampos() const;
  private:
  bool _internal_has_interpolatebeampos() const;
  public:
  void clear_interpolatebeampos();
  bool interpolatebeampos() const;
  void set_interpolatebeampos(bool value);
  private:
  bool _internal_interpolatebeampos() const;
  void _internal_set_interpolatebeampos(bool value);
  public:

  // optional double detail = 13 [default = 1];
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  double detail() const;
  void set_detail(double value);
  private:
  double _internal_detail() const;
  void _internal_set_detail(double value);
  public:

  // optional bool useOffsetPlatform = 23 [default = true];
  bool has_useoffsetplatform() const;
  private:
  bool _internal_has_useoffsetplatform() const;
  public:
  void clear_useoffsetplatform();
  bool useoffsetplatform() const;
  void set_useoffsetplatform(bool value);
  private:
  bool _internal_useoffsetplatform() const;
  void _internal_set_useoffsetplatform(bool value);
  public:

  // optional uint32 pulseStipple = 36 [default = 3855];
  bool has_pulsestipple() const;
  private:
  bool _internal_has_pulsestipple() const;
  public:
  void clear_pulsestipple();
  ::PROTOBUF_NAMESPACE_ID::uint32 pulsestipple() const;
  void set_pulsestipple(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pulsestipple() const;
  void _internal_set_pulsestipple(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double pulseLength = 34 [default = 100];
  bool has_pulselength() const;
  private:
  bool _internal_has_pulselength() const;
  public:
  void clear_pulselength();
  double pulselength() const;
  void set_pulselength(double value);
  private:
  double _internal_pulselength() const;
  void _internal_set_pulselength(double value);
  public:

  // optional double pulseRate = 35 [default = 1];
  bool has_pulserate() const;
  private:
  bool _internal_has_pulserate() const;
  public:
  void clear_pulserate();
  double pulserate() const;
  void set_pulserate(double value);
  private:
  double _internal_pulserate() const;
  void _internal_set_pulserate(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.BeamPrefs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arepsfile_;
  ::simData::CommonPrefs* commonprefs_;
  ::simData::BeamPrefs_AntennaPattern* antennapattern_;
  ::simData::Position* beampositionoffset_;
  int drawtype_;
  bool shaded_;
  bool colorscale_;
  bool channel_;
  bool useoffseticon_;
  double power_;
  double frequency_;
  int polarity_;
  bool useoffsetbeam_;
  bool animate_;
  double azimuthoffset_;
  double elevationoffset_;
  double rolloffset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 targetid_;
  double verticalwidth_;
  double horizontalwidth_;
  double beamscale_;
  int beamdrawmode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 capresolution_;
  double sensitivity_;
  double gain_;
  double fieldofview_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coneresolution_;
  bool blended_;
  bool rendercone_;
  bool weighting_;
  bool interpolatebeampos_;
  double detail_;
  bool useoffsetplatform_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pulsestipple_;
  double pulselength_;
  double pulserate_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT BeamUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.BeamUpdate) */ {
 public:
  inline BeamUpdate() : BeamUpdate(nullptr) {}
  virtual ~BeamUpdate();

  BeamUpdate(const BeamUpdate& from);
  BeamUpdate(BeamUpdate&& from) noexcept
    : BeamUpdate() {
    *this = ::std::move(from);
  }

  inline BeamUpdate& operator=(const BeamUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeamUpdate& operator=(BeamUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BeamUpdate& default_instance();

  static inline const BeamUpdate* internal_default_instance() {
    return reinterpret_cast<const BeamUpdate*>(
               &_BeamUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(BeamUpdate& a, BeamUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(BeamUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeamUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeamUpdate* New() const final {
    return CreateMaybeMessage<BeamUpdate>(nullptr);
  }

  BeamUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeamUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BeamUpdate& from);
  void MergeFrom(const BeamUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.BeamUpdate";
  }
  protected:
  explicit BeamUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kRangeFieldNumber = 2,
    kAzimuthFieldNumber = 3,
    kElevationFieldNumber = 4,
  };
  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // optional double range = 2;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  double range() const;
  void set_range(double value);
  private:
  double _internal_range() const;
  void _internal_set_range(double value);
  public:

  // optional double azimuth = 3;
  bool has_azimuth() const;
  private:
  bool _internal_has_azimuth() const;
  public:
  void clear_azimuth();
  double azimuth() const;
  void set_azimuth(double value);
  private:
  double _internal_azimuth() const;
  void _internal_set_azimuth(double value);
  public:

  // optional double elevation = 4;
  bool has_elevation() const;
  private:
  bool _internal_has_elevation() const;
  public:
  void clear_elevation();
  double elevation() const;
  void set_elevation(double value);
  private:
  double _internal_elevation() const;
  void _internal_set_elevation(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.BeamUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double time_;
  double range_;
  double azimuth_;
  double elevation_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT BeamCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.BeamCommand) */ {
 public:
  inline BeamCommand() : BeamCommand(nullptr) {}
  virtual ~BeamCommand();

  BeamCommand(const BeamCommand& from);
  BeamCommand(BeamCommand&& from) noexcept
    : BeamCommand() {
    *this = ::std::move(from);
  }

  inline BeamCommand& operator=(const BeamCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeamCommand& operator=(BeamCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BeamCommand& default_instance();

  static inline const BeamCommand* internal_default_instance() {
    return reinterpret_cast<const BeamCommand*>(
               &_BeamCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(BeamCommand& a, BeamCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(BeamCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeamCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeamCommand* New() const final {
    return CreateMaybeMessage<BeamCommand>(nullptr);
  }

  BeamCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeamCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BeamCommand& from);
  void MergeFrom(const BeamCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.BeamCommand";
  }
  protected:
  explicit BeamCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatePrefsFieldNumber = 2,
    kTimeFieldNumber = 1,
    kIsClearCommandFieldNumber = 3,
  };
  // optional .simData.BeamPrefs updatePrefs = 2;
  bool has_updateprefs() const;
  private:
  bool _internal_has_updateprefs() const;
  public:
  void clear_updateprefs();
  const ::simData::BeamPrefs& updateprefs() const;
  ::simData::BeamPrefs* release_updateprefs();
  ::simData::BeamPrefs* mutable_updateprefs();
  void set_allocated_updateprefs(::simData::BeamPrefs* updateprefs);
  private:
  const ::simData::BeamPrefs& _internal_updateprefs() const;
  ::simData::BeamPrefs* _internal_mutable_updateprefs();
  public:
  void unsafe_arena_set_allocated_updateprefs(
      ::simData::BeamPrefs* updateprefs);
  ::simData::BeamPrefs* unsafe_arena_release_updateprefs();

  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // optional bool isClearCommand = 3 [default = false];
  bool has_isclearcommand() const;
  private:
  bool _internal_has_isclearcommand() const;
  public:
  void clear_isclearcommand();
  bool isclearcommand() const;
  void set_isclearcommand(bool value);
  private:
  bool _internal_isclearcommand() const;
  void _internal_set_isclearcommand(bool value);
  public:

  // @@protoc_insertion_point(class_scope:simData.BeamCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::simData::BeamPrefs* updateprefs_;
  double time_;
  bool isclearcommand_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT GateProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.GateProperties) */ {
 public:
  inline GateProperties() : GateProperties(nullptr) {}
  virtual ~GateProperties();

  GateProperties(const GateProperties& from);
  GateProperties(GateProperties&& from) noexcept
    : GateProperties() {
    *this = ::std::move(from);
  }

  inline GateProperties& operator=(const GateProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline GateProperties& operator=(GateProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GateProperties& default_instance();

  static inline const GateProperties* internal_default_instance() {
    return reinterpret_cast<const GateProperties*>(
               &_GateProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GateProperties& a, GateProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(GateProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GateProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GateProperties* New() const final {
    return CreateMaybeMessage<GateProperties>(nullptr);
  }

  GateProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GateProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GateProperties& from);
  void MergeFrom(const GateProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.GateProperties";
  }
  protected:
  explicit GateProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GateProperties_GateType GateType;
  static constexpr GateType ABSOLUTE_POSITION =
    GateProperties_GateType_ABSOLUTE_POSITION;
  static constexpr GateType BODY_RELATIVE =
    GateProperties_GateType_BODY_RELATIVE;
  static constexpr GateType TARGET =
    GateProperties_GateType_TARGET;
  static inline bool GateType_IsValid(int value) {
    return GateProperties_GateType_IsValid(value);
  }
  static constexpr GateType GateType_MIN =
    GateProperties_GateType_GateType_MIN;
  static constexpr GateType GateType_MAX =
    GateProperties_GateType_GateType_MAX;
  static constexpr int GateType_ARRAYSIZE =
    GateProperties_GateType_GateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GateType_descriptor() {
    return GateProperties_GateType_descriptor();
  }
  template<typename T>
  static inline const std::string& GateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GateType_Name.");
    return GateProperties_GateType_Name(enum_t_value);
  }
  static inline bool GateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GateType* value) {
    return GateProperties_GateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 5,
    kIdFieldNumber = 1,
    kHostIdFieldNumber = 2,
    kOriginalIdFieldNumber = 4,
    kTypeFieldNumber = 6,
  };
  // optional string source = 5;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 hostId = 2;
  bool has_hostid() const;
  private:
  bool _internal_has_hostid() const;
  public:
  void clear_hostid();
  ::PROTOBUF_NAMESPACE_ID::uint64 hostid() const;
  void set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hostid() const;
  void _internal_set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 originalId = 4;
  bool has_originalid() const;
  private:
  bool _internal_has_originalid() const;
  public:
  void clear_originalid();
  ::PROTOBUF_NAMESPACE_ID::uint64 originalid() const;
  void set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_originalid() const;
  void _internal_set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .simData.GateProperties.GateType type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::simData::GateProperties_GateType type() const;
  void set_type(::simData::GateProperties_GateType value);
  private:
  ::simData::GateProperties_GateType _internal_type() const;
  void _internal_set_type(::simData::GateProperties_GateType value);
  public:

  // @@protoc_insertion_point(class_scope:simData.GateProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hostid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 originalid_;
  int type_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT GatePrefs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.GatePrefs) */ {
 public:
  inline GatePrefs() : GatePrefs(nullptr) {}
  virtual ~GatePrefs();

  GatePrefs(const GatePrefs& from);
  GatePrefs(GatePrefs&& from) noexcept
    : GatePrefs() {
    *this = ::std::move(from);
  }

  inline GatePrefs& operator=(const GatePrefs& from) {
    CopyFrom(from);
    return *this;
  }
  inline GatePrefs& operator=(GatePrefs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GatePrefs& default_instance();

  static inline const GatePrefs* internal_default_instance() {
    return reinterpret_cast<const GatePrefs*>(
               &_GatePrefs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GatePrefs& a, GatePrefs& b) {
    a.Swap(&b);
  }
  inline void Swap(GatePrefs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GatePrefs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GatePrefs* New() const final {
    return CreateMaybeMessage<GatePrefs>(nullptr);
  }

  GatePrefs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GatePrefs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GatePrefs& from);
  void MergeFrom(const GatePrefs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GatePrefs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.GatePrefs";
  }
  protected:
  explicit GatePrefs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GatePrefs_DrawMode DrawMode;
  static constexpr DrawMode UNKNOWN =
    GatePrefs_DrawMode_UNKNOWN;
  static constexpr DrawMode RANGE =
    GatePrefs_DrawMode_RANGE;
  static constexpr DrawMode GUARD =
    GatePrefs_DrawMode_GUARD;
  static constexpr DrawMode ANGLE =
    GatePrefs_DrawMode_ANGLE;
  static constexpr DrawMode RAIN =
    GatePrefs_DrawMode_RAIN;
  static constexpr DrawMode CLUTTER =
    GatePrefs_DrawMode_CLUTTER;
  static constexpr DrawMode FOOTPRINT =
    GatePrefs_DrawMode_FOOTPRINT;
  static constexpr DrawMode SECTOR =
    GatePrefs_DrawMode_SECTOR;
  static constexpr DrawMode PUSH =
    GatePrefs_DrawMode_PUSH;
  static constexpr DrawMode COVERAGE =
    GatePrefs_DrawMode_COVERAGE;
  static inline bool DrawMode_IsValid(int value) {
    return GatePrefs_DrawMode_IsValid(value);
  }
  static constexpr DrawMode DrawMode_MIN =
    GatePrefs_DrawMode_DrawMode_MIN;
  static constexpr DrawMode DrawMode_MAX =
    GatePrefs_DrawMode_DrawMode_MAX;
  static constexpr int DrawMode_ARRAYSIZE =
    GatePrefs_DrawMode_DrawMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DrawMode_descriptor() {
    return GatePrefs_DrawMode_descriptor();
  }
  template<typename T>
  static inline const std::string& DrawMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DrawMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DrawMode_Name.");
    return GatePrefs_DrawMode_Name(enum_t_value);
  }
  static inline bool DrawMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DrawMode* value) {
    return GatePrefs_DrawMode_Parse(name, value);
  }

  typedef GatePrefs_FillPattern FillPattern;
  static constexpr FillPattern STIPPLE =
    GatePrefs_FillPattern_STIPPLE;
  static constexpr FillPattern SOLID =
    GatePrefs_FillPattern_SOLID;
  static constexpr FillPattern ALPHA =
    GatePrefs_FillPattern_ALPHA;
  static constexpr FillPattern WIRE =
    GatePrefs_FillPattern_WIRE;
  static constexpr FillPattern CENTROID =
    GatePrefs_FillPattern_CENTROID;
  static inline bool FillPattern_IsValid(int value) {
    return GatePrefs_FillPattern_IsValid(value);
  }
  static constexpr FillPattern FillPattern_MIN =
    GatePrefs_FillPattern_FillPattern_MIN;
  static constexpr FillPattern FillPattern_MAX =
    GatePrefs_FillPattern_FillPattern_MAX;
  static constexpr int FillPattern_ARRAYSIZE =
    GatePrefs_FillPattern_FillPattern_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FillPattern_descriptor() {
    return GatePrefs_FillPattern_descriptor();
  }
  template<typename T>
  static inline const std::string& FillPattern_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FillPattern>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FillPattern_Name.");
    return GatePrefs_FillPattern_Name(enum_t_value);
  }
  static inline bool FillPattern_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FillPattern* value) {
    return GatePrefs_FillPattern_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommonPrefsFieldNumber = 1,
    kGateLightingFieldNumber = 2,
    kGateDrawModeFieldNumber = 4,
    kGateAzimuthOffsetFieldNumber = 8,
    kGateElevationOffsetFieldNumber = 9,
    kGateRollOffsetFieldNumber = 10,
    kFillPatternFieldNumber = 5,
    kGateBlendingFieldNumber = 3,
    kDrawCentroidFieldNumber = 6,
    kInterpolateGatePosFieldNumber = 7,
    kDrawOutlineFieldNumber = 11,
  };
  // optional .simData.CommonPrefs commonPrefs = 1;
  bool has_commonprefs() const;
  private:
  bool _internal_has_commonprefs() const;
  public:
  void clear_commonprefs();
  const ::simData::CommonPrefs& commonprefs() const;
  ::simData::CommonPrefs* release_commonprefs();
  ::simData::CommonPrefs* mutable_commonprefs();
  void set_allocated_commonprefs(::simData::CommonPrefs* commonprefs);
  private:
  const ::simData::CommonPrefs& _internal_commonprefs() const;
  ::simData::CommonPrefs* _internal_mutable_commonprefs();
  public:
  void unsafe_arena_set_allocated_commonprefs(
      ::simData::CommonPrefs* commonprefs);
  ::simData::CommonPrefs* unsafe_arena_release_commonprefs();

  // optional bool gateLighting = 2 [default = false];
  bool has_gatelighting() const;
  private:
  bool _internal_has_gatelighting() const;
  public:
  void clear_gatelighting();
  bool gatelighting() const;
  void set_gatelighting(bool value);
  private:
  bool _internal_gatelighting() const;
  void _internal_set_gatelighting(bool value);
  public:

  // optional .simData.GatePrefs.DrawMode gateDrawMode = 4 [default = UNKNOWN];
  bool has_gatedrawmode() const;
  private:
  bool _internal_has_gatedrawmode() const;
  public:
  void clear_gatedrawmode();
  ::simData::GatePrefs_DrawMode gatedrawmode() const;
  void set_gatedrawmode(::simData::GatePrefs_DrawMode value);
  private:
  ::simData::GatePrefs_DrawMode _internal_gatedrawmode() const;
  void _internal_set_gatedrawmode(::simData::GatePrefs_DrawMode value);
  public:

  // optional double gateAzimuthOffset = 8 [default = 0];
  bool has_gateazimuthoffset() const;
  private:
  bool _internal_has_gateazimuthoffset() const;
  public:
  void clear_gateazimuthoffset();
  double gateazimuthoffset() const;
  void set_gateazimuthoffset(double value);
  private:
  double _internal_gateazimuthoffset() const;
  void _internal_set_gateazimuthoffset(double value);
  public:

  // optional double gateElevationOffset = 9 [default = 0];
  bool has_gateelevationoffset() const;
  private:
  bool _internal_has_gateelevationoffset() const;
  public:
  void clear_gateelevationoffset();
  double gateelevationoffset() const;
  void set_gateelevationoffset(double value);
  private:
  double _internal_gateelevationoffset() const;
  void _internal_set_gateelevationoffset(double value);
  public:

  // optional double gateRollOffset = 10 [default = 0];
  bool has_gaterolloffset() const;
  private:
  bool _internal_has_gaterolloffset() const;
  public:
  void clear_gaterolloffset();
  double gaterolloffset() const;
  void set_gaterolloffset(double value);
  private:
  double _internal_gaterolloffset() const;
  void _internal_set_gaterolloffset(double value);
  public:

  // optional .simData.GatePrefs.FillPattern fillPattern = 5 [default = STIPPLE];
  bool has_fillpattern() const;
  private:
  bool _internal_has_fillpattern() const;
  public:
  void clear_fillpattern();
  ::simData::GatePrefs_FillPattern fillpattern() const;
  void set_fillpattern(::simData::GatePrefs_FillPattern value);
  private:
  ::simData::GatePrefs_FillPattern _internal_fillpattern() const;
  void _internal_set_fillpattern(::simData::GatePrefs_FillPattern value);
  public:

  // optional bool gateBlending = 3 [default = true];
  bool has_gateblending() const;
  private:
  bool _internal_has_gateblending() const;
  public:
  void clear_gateblending();
  bool gateblending() const;
  void set_gateblending(bool value);
  private:
  bool _internal_gateblending() const;
  void _internal_set_gateblending(bool value);
  public:

  // optional bool drawCentroid = 6 [default = true];
  bool has_drawcentroid() const;
  private:
  bool _internal_has_drawcentroid() const;
  public:
  void clear_drawcentroid();
  bool drawcentroid() const;
  void set_drawcentroid(bool value);
  private:
  bool _internal_drawcentroid() const;
  void _internal_set_drawcentroid(bool value);
  public:

  // optional bool interpolateGatePos = 7 [default = true];
  bool has_interpolategatepos() const;
  private:
  bool _internal_has_interpolategatepos() const;
  public:
  void clear_interpolategatepos();
  bool interpolategatepos() const;
  void set_interpolategatepos(bool value);
  private:
  bool _internal_interpolategatepos() const;
  void _internal_set_interpolategatepos(bool value);
  public:

  // optional bool drawOutline = 11 [default = true];
  bool has_drawoutline() const;
  private:
  bool _internal_has_drawoutline() const;
  public:
  void clear_drawoutline();
  bool drawoutline() const;
  void set_drawoutline(bool value);
  private:
  bool _internal_drawoutline() const;
  void _internal_set_drawoutline(bool value);
  public:

  // @@protoc_insertion_point(class_scope:simData.GatePrefs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::simData::CommonPrefs* commonprefs_;
  bool gatelighting_;
  int gatedrawmode_;
  double gateazimuthoffset_;
  double gateelevationoffset_;
  double gaterolloffset_;
  int fillpattern_;
  bool gateblending_;
  bool drawcentroid_;
  bool interpolategatepos_;
  bool drawoutline_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT GateUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.GateUpdate) */ {
 public:
  inline GateUpdate() : GateUpdate(nullptr) {}
  virtual ~GateUpdate();

  GateUpdate(const GateUpdate& from);
  GateUpdate(GateUpdate&& from) noexcept
    : GateUpdate() {
    *this = ::std::move(from);
  }

  inline GateUpdate& operator=(const GateUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline GateUpdate& operator=(GateUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GateUpdate& default_instance();

  static inline const GateUpdate* internal_default_instance() {
    return reinterpret_cast<const GateUpdate*>(
               &_GateUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GateUpdate& a, GateUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(GateUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GateUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GateUpdate* New() const final {
    return CreateMaybeMessage<GateUpdate>(nullptr);
  }

  GateUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GateUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GateUpdate& from);
  void MergeFrom(const GateUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.GateUpdate";
  }
  protected:
  explicit GateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kAzimuthFieldNumber = 2,
    kElevationFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kMinRangeFieldNumber = 6,
    kMaxRangeFieldNumber = 7,
    kCentroidFieldNumber = 8,
  };
  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // optional double azimuth = 2;
  bool has_azimuth() const;
  private:
  bool _internal_has_azimuth() const;
  public:
  void clear_azimuth();
  double azimuth() const;
  void set_azimuth(double value);
  private:
  double _internal_azimuth() const;
  void _internal_set_azimuth(double value);
  public:

  // optional double elevation = 3;
  bool has_elevation() const;
  private:
  bool _internal_has_elevation() const;
  public:
  void clear_elevation();
  double elevation() const;
  void set_elevation(double value);
  private:
  double _internal_elevation() const;
  void _internal_set_elevation(double value);
  public:

  // optional double width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional double minRange = 6;
  bool has_minrange() const;
  private:
  bool _internal_has_minrange() const;
  public:
  void clear_minrange();
  double minrange() const;
  void set_minrange(double value);
  private:
  double _internal_minrange() const;
  void _internal_set_minrange(double value);
  public:

  // optional double maxRange = 7;
  bool has_maxrange() const;
  private:
  bool _internal_has_maxrange() const;
  public:
  void clear_maxrange();
  double maxrange() const;
  void set_maxrange(double value);
  private:
  double _internal_maxrange() const;
  void _internal_set_maxrange(double value);
  public:

  // optional double centroid = 8;
  bool has_centroid() const;
  private:
  bool _internal_has_centroid() const;
  public:
  void clear_centroid();
  double centroid() const;
  void set_centroid(double value);
  private:
  double _internal_centroid() const;
  void _internal_set_centroid(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.GateUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double time_;
  double azimuth_;
  double elevation_;
  double width_;
  double height_;
  double minrange_;
  double maxrange_;
  double centroid_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT GateCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.GateCommand) */ {
 public:
  inline GateCommand() : GateCommand(nullptr) {}
  virtual ~GateCommand();

  GateCommand(const GateCommand& from);
  GateCommand(GateCommand&& from) noexcept
    : GateCommand() {
    *this = ::std::move(from);
  }

  inline GateCommand& operator=(const GateCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GateCommand& operator=(GateCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GateCommand& default_instance();

  static inline const GateCommand* internal_default_instance() {
    return reinterpret_cast<const GateCommand*>(
               &_GateCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GateCommand& a, GateCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GateCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GateCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GateCommand* New() const final {
    return CreateMaybeMessage<GateCommand>(nullptr);
  }

  GateCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GateCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GateCommand& from);
  void MergeFrom(const GateCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.GateCommand";
  }
  protected:
  explicit GateCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatePrefsFieldNumber = 2,
    kTimeFieldNumber = 1,
    kIsClearCommandFieldNumber = 3,
  };
  // optional .simData.GatePrefs updatePrefs = 2;
  bool has_updateprefs() const;
  private:
  bool _internal_has_updateprefs() const;
  public:
  void clear_updateprefs();
  const ::simData::GatePrefs& updateprefs() const;
  ::simData::GatePrefs* release_updateprefs();
  ::simData::GatePrefs* mutable_updateprefs();
  void set_allocated_updateprefs(::simData::GatePrefs* updateprefs);
  private:
  const ::simData::GatePrefs& _internal_updateprefs() const;
  ::simData::GatePrefs* _internal_mutable_updateprefs();
  public:
  void unsafe_arena_set_allocated_updateprefs(
      ::simData::GatePrefs* updateprefs);
  ::simData::GatePrefs* unsafe_arena_release_updateprefs();

  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // optional bool isClearCommand = 3 [default = false];
  bool has_isclearcommand() const;
  private:
  bool _internal_has_isclearcommand() const;
  public:
  void clear_isclearcommand();
  bool isclearcommand() const;
  void set_isclearcommand(bool value);
  private:
  bool _internal_isclearcommand() const;
  void _internal_set_isclearcommand(bool value);
  public:

  // @@protoc_insertion_point(class_scope:simData.GateCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::simData::GatePrefs* updateprefs_;
  double time_;
  bool isclearcommand_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT LaserProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.LaserProperties) */ {
 public:
  inline LaserProperties() : LaserProperties(nullptr) {}
  virtual ~LaserProperties();

  LaserProperties(const LaserProperties& from);
  LaserProperties(LaserProperties&& from) noexcept
    : LaserProperties() {
    *this = ::std::move(from);
  }

  inline LaserProperties& operator=(const LaserProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserProperties& operator=(LaserProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaserProperties& default_instance();

  static inline const LaserProperties* internal_default_instance() {
    return reinterpret_cast<const LaserProperties*>(
               &_LaserProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(LaserProperties& a, LaserProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(LaserProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaserProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaserProperties* New() const final {
    return CreateMaybeMessage<LaserProperties>(nullptr);
  }

  LaserProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaserProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaserProperties& from);
  void MergeFrom(const LaserProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.LaserProperties";
  }
  protected:
  explicit LaserProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 4,
    kIdFieldNumber = 1,
    kHostIdFieldNumber = 2,
    kOriginalIdFieldNumber = 3,
    kAzElRelativeToHostOriFieldNumber = 6,
    kCoordinateSystemFieldNumber = 5,
  };
  // optional string source = 4;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 hostId = 2;
  bool has_hostid() const;
  private:
  bool _internal_has_hostid() const;
  public:
  void clear_hostid();
  ::PROTOBUF_NAMESPACE_ID::uint64 hostid() const;
  void set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hostid() const;
  void _internal_set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 originalId = 3;
  bool has_originalid() const;
  private:
  bool _internal_has_originalid() const;
  public:
  void clear_originalid();
  ::PROTOBUF_NAMESPACE_ID::uint64 originalid() const;
  void set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_originalid() const;
  void _internal_set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool azElRelativeToHostOri = 6;
  bool has_azelrelativetohostori() const;
  private:
  bool _internal_has_azelrelativetohostori() const;
  public:
  void clear_azelrelativetohostori();
  bool azelrelativetohostori() const;
  void set_azelrelativetohostori(bool value);
  private:
  bool _internal_azelrelativetohostori() const;
  void _internal_set_azelrelativetohostori(bool value);
  public:

  // optional .simData.CoordinateSystem coordinateSystem = 5;
  bool has_coordinatesystem() const;
  private:
  bool _internal_has_coordinatesystem() const;
  public:
  void clear_coordinatesystem();
  ::simData::CoordinateSystem coordinatesystem() const;
  void set_coordinatesystem(::simData::CoordinateSystem value);
  private:
  ::simData::CoordinateSystem _internal_coordinatesystem() const;
  void _internal_set_coordinatesystem(::simData::CoordinateSystem value);
  public:

  // @@protoc_insertion_point(class_scope:simData.LaserProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hostid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 originalid_;
  bool azelrelativetohostori_;
  int coordinatesystem_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT LaserPrefs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.LaserPrefs) */ {
 public:
  inline LaserPrefs() : LaserPrefs(nullptr) {}
  virtual ~LaserPrefs();

  LaserPrefs(const LaserPrefs& from);
  LaserPrefs(LaserPrefs&& from) noexcept
    : LaserPrefs() {
    *this = ::std::move(from);
  }

  inline LaserPrefs& operator=(const LaserPrefs& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserPrefs& operator=(LaserPrefs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaserPrefs& default_instance();

  static inline const LaserPrefs* internal_default_instance() {
    return reinterpret_cast<const LaserPrefs*>(
               &_LaserPrefs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(LaserPrefs& a, LaserPrefs& b) {
    a.Swap(&b);
  }
  inline void Swap(LaserPrefs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaserPrefs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaserPrefs* New() const final {
    return CreateMaybeMessage<LaserPrefs>(nullptr);
  }

  LaserPrefs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaserPrefs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaserPrefs& from);
  void MergeFrom(const LaserPrefs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserPrefs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.LaserPrefs";
  }
  protected:
  explicit LaserPrefs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonPrefsFieldNumber = 1,
    kLaserXyzOffsetFieldNumber = 2,
    kLaserWidthFieldNumber = 4,
    kMaxRangeFieldNumber = 3,
  };
  // optional .simData.CommonPrefs commonPrefs = 1;
  bool has_commonprefs() const;
  private:
  bool _internal_has_commonprefs() const;
  public:
  void clear_commonprefs();
  const ::simData::CommonPrefs& commonprefs() const;
  ::simData::CommonPrefs* release_commonprefs();
  ::simData::CommonPrefs* mutable_commonprefs();
  void set_allocated_commonprefs(::simData::CommonPrefs* commonprefs);
  private:
  const ::simData::CommonPrefs& _internal_commonprefs() const;
  ::simData::CommonPrefs* _internal_mutable_commonprefs();
  public:
  void unsafe_arena_set_allocated_commonprefs(
      ::simData::CommonPrefs* commonprefs);
  ::simData::CommonPrefs* unsafe_arena_release_commonprefs();

  // optional .simData.Position laserXyzOffset = 2;
  bool has_laserxyzoffset() const;
  private:
  bool _internal_has_laserxyzoffset() const;
  public:
  void clear_laserxyzoffset();
  const ::simData::Position& laserxyzoffset() const;
  ::simData::Position* release_laserxyzoffset();
  ::simData::Position* mutable_laserxyzoffset();
  void set_allocated_laserxyzoffset(::simData::Position* laserxyzoffset);
  private:
  const ::simData::Position& _internal_laserxyzoffset() const;
  ::simData::Position* _internal_mutable_laserxyzoffset();
  public:
  void unsafe_arena_set_allocated_laserxyzoffset(
      ::simData::Position* laserxyzoffset);
  ::simData::Position* unsafe_arena_release_laserxyzoffset();

  // optional int32 laserWidth = 4 [default = 1];
  bool has_laserwidth() const;
  private:
  bool _internal_has_laserwidth() const;
  public:
  void clear_laserwidth();
  ::PROTOBUF_NAMESPACE_ID::int32 laserwidth() const;
  void set_laserwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_laserwidth() const;
  void _internal_set_laserwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double maxRange = 3 [default = 1000000];
  bool has_maxrange() const;
  private:
  bool _internal_has_maxrange() const;
  public:
  void clear_maxrange();
  double maxrange() const;
  void set_maxrange(double value);
  private:
  double _internal_maxrange() const;
  void _internal_set_maxrange(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.LaserPrefs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::simData::CommonPrefs* commonprefs_;
  ::simData::Position* laserxyzoffset_;
  ::PROTOBUF_NAMESPACE_ID::int32 laserwidth_;
  double maxrange_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT LaserUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.LaserUpdate) */ {
 public:
  inline LaserUpdate() : LaserUpdate(nullptr) {}
  virtual ~LaserUpdate();

  LaserUpdate(const LaserUpdate& from);
  LaserUpdate(LaserUpdate&& from) noexcept
    : LaserUpdate() {
    *this = ::std::move(from);
  }

  inline LaserUpdate& operator=(const LaserUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserUpdate& operator=(LaserUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaserUpdate& default_instance();

  static inline const LaserUpdate* internal_default_instance() {
    return reinterpret_cast<const LaserUpdate*>(
               &_LaserUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(LaserUpdate& a, LaserUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(LaserUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaserUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaserUpdate* New() const final {
    return CreateMaybeMessage<LaserUpdate>(nullptr);
  }

  LaserUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaserUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaserUpdate& from);
  void MergeFrom(const LaserUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.LaserUpdate";
  }
  protected:
  explicit LaserUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // optional .simData.BodyOrientation orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::simData::BodyOrientation& orientation() const;
  ::simData::BodyOrientation* release_orientation();
  ::simData::BodyOrientation* mutable_orientation();
  void set_allocated_orientation(::simData::BodyOrientation* orientation);
  private:
  const ::simData::BodyOrientation& _internal_orientation() const;
  ::simData::BodyOrientation* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::simData::BodyOrientation* orientation);
  ::simData::BodyOrientation* unsafe_arena_release_orientation();

  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.LaserUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::simData::BodyOrientation* orientation_;
  double time_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT LaserCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.LaserCommand) */ {
 public:
  inline LaserCommand() : LaserCommand(nullptr) {}
  virtual ~LaserCommand();

  LaserCommand(const LaserCommand& from);
  LaserCommand(LaserCommand&& from) noexcept
    : LaserCommand() {
    *this = ::std::move(from);
  }

  inline LaserCommand& operator=(const LaserCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserCommand& operator=(LaserCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaserCommand& default_instance();

  static inline const LaserCommand* internal_default_instance() {
    return reinterpret_cast<const LaserCommand*>(
               &_LaserCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(LaserCommand& a, LaserCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(LaserCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaserCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaserCommand* New() const final {
    return CreateMaybeMessage<LaserCommand>(nullptr);
  }

  LaserCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaserCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaserCommand& from);
  void MergeFrom(const LaserCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.LaserCommand";
  }
  protected:
  explicit LaserCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatePrefsFieldNumber = 2,
    kTimeFieldNumber = 1,
    kIsClearCommandFieldNumber = 3,
  };
  // optional .simData.LaserPrefs updatePrefs = 2;
  bool has_updateprefs() const;
  private:
  bool _internal_has_updateprefs() const;
  public:
  void clear_updateprefs();
  const ::simData::LaserPrefs& updateprefs() const;
  ::simData::LaserPrefs* release_updateprefs();
  ::simData::LaserPrefs* mutable_updateprefs();
  void set_allocated_updateprefs(::simData::LaserPrefs* updateprefs);
  private:
  const ::simData::LaserPrefs& _internal_updateprefs() const;
  ::simData::LaserPrefs* _internal_mutable_updateprefs();
  public:
  void unsafe_arena_set_allocated_updateprefs(
      ::simData::LaserPrefs* updateprefs);
  ::simData::LaserPrefs* unsafe_arena_release_updateprefs();

  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // optional bool isClearCommand = 3 [default = false];
  bool has_isclearcommand() const;
  private:
  bool _internal_has_isclearcommand() const;
  public:
  void clear_isclearcommand();
  bool isclearcommand() const;
  void set_isclearcommand(bool value);
  private:
  bool _internal_isclearcommand() const;
  void _internal_set_isclearcommand(bool value);
  public:

  // @@protoc_insertion_point(class_scope:simData.LaserCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::simData::LaserPrefs* updateprefs_;
  double time_;
  bool isclearcommand_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT CustomRenderingProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.CustomRenderingProperties) */ {
 public:
  inline CustomRenderingProperties() : CustomRenderingProperties(nullptr) {}
  virtual ~CustomRenderingProperties();

  CustomRenderingProperties(const CustomRenderingProperties& from);
  CustomRenderingProperties(CustomRenderingProperties&& from) noexcept
    : CustomRenderingProperties() {
    *this = ::std::move(from);
  }

  inline CustomRenderingProperties& operator=(const CustomRenderingProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomRenderingProperties& operator=(CustomRenderingProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomRenderingProperties& default_instance();

  static inline const CustomRenderingProperties* internal_default_instance() {
    return reinterpret_cast<const CustomRenderingProperties*>(
               &_CustomRenderingProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CustomRenderingProperties& a, CustomRenderingProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomRenderingProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomRenderingProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomRenderingProperties* New() const final {
    return CreateMaybeMessage<CustomRenderingProperties>(nullptr);
  }

  CustomRenderingProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomRenderingProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomRenderingProperties& from);
  void MergeFrom(const CustomRenderingProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomRenderingProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.CustomRenderingProperties";
  }
  protected:
  explicit CustomRenderingProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 4,
    kRendererFieldNumber = 5,
    kIdFieldNumber = 1,
    kHostIdFieldNumber = 2,
    kOriginalIdFieldNumber = 3,
  };
  // optional string source = 4;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string renderer = 5;
  bool has_renderer() const;
  private:
  bool _internal_has_renderer() const;
  public:
  void clear_renderer();
  const std::string& renderer() const;
  void set_renderer(const std::string& value);
  void set_renderer(std::string&& value);
  void set_renderer(const char* value);
  void set_renderer(const char* value, size_t size);
  std::string* mutable_renderer();
  std::string* release_renderer();
  void set_allocated_renderer(std::string* renderer);
  private:
  const std::string& _internal_renderer() const;
  void _internal_set_renderer(const std::string& value);
  std::string* _internal_mutable_renderer();
  public:

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 hostId = 2;
  bool has_hostid() const;
  private:
  bool _internal_has_hostid() const;
  public:
  void clear_hostid();
  ::PROTOBUF_NAMESPACE_ID::uint64 hostid() const;
  void set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hostid() const;
  void _internal_set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 originalId = 3;
  bool has_originalid() const;
  private:
  bool _internal_has_originalid() const;
  public:
  void clear_originalid();
  ::PROTOBUF_NAMESPACE_ID::uint64 originalid() const;
  void set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_originalid() const;
  void _internal_set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:simData.CustomRenderingProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr renderer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hostid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 originalid_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT CustomRenderingPrefs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.CustomRenderingPrefs) */ {
 public:
  inline CustomRenderingPrefs() : CustomRenderingPrefs(nullptr) {}
  virtual ~CustomRenderingPrefs();

  CustomRenderingPrefs(const CustomRenderingPrefs& from);
  CustomRenderingPrefs(CustomRenderingPrefs&& from) noexcept
    : CustomRenderingPrefs() {
    *this = ::std::move(from);
  }

  inline CustomRenderingPrefs& operator=(const CustomRenderingPrefs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomRenderingPrefs& operator=(CustomRenderingPrefs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomRenderingPrefs& default_instance();

  static inline const CustomRenderingPrefs* internal_default_instance() {
    return reinterpret_cast<const CustomRenderingPrefs*>(
               &_CustomRenderingPrefs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CustomRenderingPrefs& a, CustomRenderingPrefs& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomRenderingPrefs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomRenderingPrefs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomRenderingPrefs* New() const final {
    return CreateMaybeMessage<CustomRenderingPrefs>(nullptr);
  }

  CustomRenderingPrefs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomRenderingPrefs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomRenderingPrefs& from);
  void MergeFrom(const CustomRenderingPrefs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomRenderingPrefs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.CustomRenderingPrefs";
  }
  protected:
  explicit CustomRenderingPrefs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonPrefsFieldNumber = 1,
    kPointsHistoryFieldNumber = 4,
    kOutlineFieldNumber = 5,
    kUseHistoryOverrideColorFieldNumber = 6,
    kCenterAxisFieldNumber = 8,
    kShowLightedFieldNumber = 9,
    kHistoryOverrideColorFieldNumber = 7,
    kPersistenceFieldNumber = 2,
    kSecondsHistoryFieldNumber = 3,
  };
  // optional .simData.CommonPrefs commonPrefs = 1;
  bool has_commonprefs() const;
  private:
  bool _internal_has_commonprefs() const;
  public:
  void clear_commonprefs();
  const ::simData::CommonPrefs& commonprefs() const;
  ::simData::CommonPrefs* release_commonprefs();
  ::simData::CommonPrefs* mutable_commonprefs();
  void set_allocated_commonprefs(::simData::CommonPrefs* commonprefs);
  private:
  const ::simData::CommonPrefs& _internal_commonprefs() const;
  ::simData::CommonPrefs* _internal_mutable_commonprefs();
  public:
  void unsafe_arena_set_allocated_commonprefs(
      ::simData::CommonPrefs* commonprefs);
  ::simData::CommonPrefs* unsafe_arena_release_commonprefs();

  // optional uint32 pointsHistory = 4 [default = 0];
  bool has_pointshistory() const;
  private:
  bool _internal_has_pointshistory() const;
  public:
  void clear_pointshistory();
  ::PROTOBUF_NAMESPACE_ID::uint32 pointshistory() const;
  void set_pointshistory(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pointshistory() const;
  void _internal_set_pointshistory(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool outline = 5 [default = false];
  bool has_outline() const;
  private:
  bool _internal_has_outline() const;
  public:
  void clear_outline();
  bool outline() const;
  void set_outline(bool value);
  private:
  bool _internal_outline() const;
  void _internal_set_outline(bool value);
  public:

  // optional bool useHistoryOverrideColor = 6 [default = false];
  bool has_usehistoryoverridecolor() const;
  private:
  bool _internal_has_usehistoryoverridecolor() const;
  public:
  void clear_usehistoryoverridecolor();
  bool usehistoryoverridecolor() const;
  void set_usehistoryoverridecolor(bool value);
  private:
  bool _internal_usehistoryoverridecolor() const;
  void _internal_set_usehistoryoverridecolor(bool value);
  public:

  // optional bool centerAxis = 8 [default = false];
  bool has_centeraxis() const;
  private:
  bool _internal_has_centeraxis() const;
  public:
  void clear_centeraxis();
  bool centeraxis() const;
  void set_centeraxis(bool value);
  private:
  bool _internal_centeraxis() const;
  void _internal_set_centeraxis(bool value);
  public:

  // optional bool showLighted = 9 [default = false];
  bool has_showlighted() const;
  private:
  bool _internal_has_showlighted() const;
  public:
  void clear_showlighted();
  bool showlighted() const;
  void set_showlighted(bool value);
  private:
  bool _internal_showlighted() const;
  void _internal_set_showlighted(bool value);
  public:

  // optional fixed32 historyOverrideColor = 7 [default = 434438399];
  bool has_historyoverridecolor() const;
  private:
  bool _internal_has_historyoverridecolor() const;
  public:
  void clear_historyoverridecolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 historyoverridecolor() const;
  void set_historyoverridecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_historyoverridecolor() const;
  void _internal_set_historyoverridecolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double persistence = 2 [default = 5];
  bool has_persistence() const;
  private:
  bool _internal_has_persistence() const;
  public:
  void clear_persistence();
  double persistence() const;
  void set_persistence(double value);
  private:
  double _internal_persistence() const;
  void _internal_set_persistence(double value);
  public:

  // optional double secondsHistory = 3 [default = 5];
  bool has_secondshistory() const;
  private:
  bool _internal_has_secondshistory() const;
  public:
  void clear_secondshistory();
  double secondshistory() const;
  void set_secondshistory(double value);
  private:
  double _internal_secondshistory() const;
  void _internal_set_secondshistory(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.CustomRenderingPrefs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::simData::CommonPrefs* commonprefs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pointshistory_;
  bool outline_;
  bool usehistoryoverridecolor_;
  bool centeraxis_;
  bool showlighted_;
  ::PROTOBUF_NAMESPACE_ID::uint32 historyoverridecolor_;
  double persistence_;
  double secondshistory_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT CustomRenderingUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.CustomRenderingUpdate) */ {
 public:
  inline CustomRenderingUpdate() : CustomRenderingUpdate(nullptr) {}
  virtual ~CustomRenderingUpdate();

  CustomRenderingUpdate(const CustomRenderingUpdate& from);
  CustomRenderingUpdate(CustomRenderingUpdate&& from) noexcept
    : CustomRenderingUpdate() {
    *this = ::std::move(from);
  }

  inline CustomRenderingUpdate& operator=(const CustomRenderingUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomRenderingUpdate& operator=(CustomRenderingUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomRenderingUpdate& default_instance();

  static inline const CustomRenderingUpdate* internal_default_instance() {
    return reinterpret_cast<const CustomRenderingUpdate*>(
               &_CustomRenderingUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CustomRenderingUpdate& a, CustomRenderingUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomRenderingUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomRenderingUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomRenderingUpdate* New() const final {
    return CreateMaybeMessage<CustomRenderingUpdate>(nullptr);
  }

  CustomRenderingUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomRenderingUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomRenderingUpdate& from);
  void MergeFrom(const CustomRenderingUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomRenderingUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.CustomRenderingUpdate";
  }
  protected:
  explicit CustomRenderingUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.CustomRenderingUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double time_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT CustomRenderingCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.CustomRenderingCommand) */ {
 public:
  inline CustomRenderingCommand() : CustomRenderingCommand(nullptr) {}
  virtual ~CustomRenderingCommand();

  CustomRenderingCommand(const CustomRenderingCommand& from);
  CustomRenderingCommand(CustomRenderingCommand&& from) noexcept
    : CustomRenderingCommand() {
    *this = ::std::move(from);
  }

  inline CustomRenderingCommand& operator=(const CustomRenderingCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomRenderingCommand& operator=(CustomRenderingCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomRenderingCommand& default_instance();

  static inline const CustomRenderingCommand* internal_default_instance() {
    return reinterpret_cast<const CustomRenderingCommand*>(
               &_CustomRenderingCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CustomRenderingCommand& a, CustomRenderingCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomRenderingCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomRenderingCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomRenderingCommand* New() const final {
    return CreateMaybeMessage<CustomRenderingCommand>(nullptr);
  }

  CustomRenderingCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomRenderingCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomRenderingCommand& from);
  void MergeFrom(const CustomRenderingCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomRenderingCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.CustomRenderingCommand";
  }
  protected:
  explicit CustomRenderingCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatePrefsFieldNumber = 2,
    kTimeFieldNumber = 1,
    kIsClearCommandFieldNumber = 3,
  };
  // optional .simData.CustomRenderingPrefs updatePrefs = 2;
  bool has_updateprefs() const;
  private:
  bool _internal_has_updateprefs() const;
  public:
  void clear_updateprefs();
  const ::simData::CustomRenderingPrefs& updateprefs() const;
  ::simData::CustomRenderingPrefs* release_updateprefs();
  ::simData::CustomRenderingPrefs* mutable_updateprefs();
  void set_allocated_updateprefs(::simData::CustomRenderingPrefs* updateprefs);
  private:
  const ::simData::CustomRenderingPrefs& _internal_updateprefs() const;
  ::simData::CustomRenderingPrefs* _internal_mutable_updateprefs();
  public:
  void unsafe_arena_set_allocated_updateprefs(
      ::simData::CustomRenderingPrefs* updateprefs);
  ::simData::CustomRenderingPrefs* unsafe_arena_release_updateprefs();

  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // optional bool isClearCommand = 3 [default = false];
  bool has_isclearcommand() const;
  private:
  bool _internal_has_isclearcommand() const;
  public:
  void clear_isclearcommand();
  bool isclearcommand() const;
  void set_isclearcommand(bool value);
  private:
  bool _internal_isclearcommand() const;
  void _internal_set_isclearcommand(bool value);
  public:

  // @@protoc_insertion_point(class_scope:simData.CustomRenderingCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::simData::CustomRenderingPrefs* updateprefs_;
  double time_;
  bool isclearcommand_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT ProjectorProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.ProjectorProperties) */ {
 public:
  inline ProjectorProperties() : ProjectorProperties(nullptr) {}
  virtual ~ProjectorProperties();

  ProjectorProperties(const ProjectorProperties& from);
  ProjectorProperties(ProjectorProperties&& from) noexcept
    : ProjectorProperties() {
    *this = ::std::move(from);
  }

  inline ProjectorProperties& operator=(const ProjectorProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectorProperties& operator=(ProjectorProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjectorProperties& default_instance();

  static inline const ProjectorProperties* internal_default_instance() {
    return reinterpret_cast<const ProjectorProperties*>(
               &_ProjectorProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ProjectorProperties& a, ProjectorProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectorProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectorProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectorProperties* New() const final {
    return CreateMaybeMessage<ProjectorProperties>(nullptr);
  }

  ProjectorProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectorProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectorProperties& from);
  void MergeFrom(const ProjectorProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectorProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.ProjectorProperties";
  }
  protected:
  explicit ProjectorProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 4,
    kIdFieldNumber = 1,
    kHostIdFieldNumber = 2,
    kOriginalIdFieldNumber = 3,
  };
  // optional string source = 4;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 hostId = 2;
  bool has_hostid() const;
  private:
  bool _internal_has_hostid() const;
  public:
  void clear_hostid();
  ::PROTOBUF_NAMESPACE_ID::uint64 hostid() const;
  void set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hostid() const;
  void _internal_set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 originalId = 3;
  bool has_originalid() const;
  private:
  bool _internal_has_originalid() const;
  public:
  void clear_originalid();
  ::PROTOBUF_NAMESPACE_ID::uint64 originalid() const;
  void set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_originalid() const;
  void _internal_set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:simData.ProjectorProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hostid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 originalid_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT ProjectorPrefs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.ProjectorPrefs) */ {
 public:
  inline ProjectorPrefs() : ProjectorPrefs(nullptr) {}
  virtual ~ProjectorPrefs();

  ProjectorPrefs(const ProjectorPrefs& from);
  ProjectorPrefs(ProjectorPrefs&& from) noexcept
    : ProjectorPrefs() {
    *this = ::std::move(from);
  }

  inline ProjectorPrefs& operator=(const ProjectorPrefs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectorPrefs& operator=(ProjectorPrefs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjectorPrefs& default_instance();

  static inline const ProjectorPrefs* internal_default_instance() {
    return reinterpret_cast<const ProjectorPrefs*>(
               &_ProjectorPrefs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ProjectorPrefs& a, ProjectorPrefs& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectorPrefs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectorPrefs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectorPrefs* New() const final {
    return CreateMaybeMessage<ProjectorPrefs>(nullptr);
  }

  ProjectorPrefs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectorPrefs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectorPrefs& from);
  void MergeFrom(const ProjectorPrefs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectorPrefs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.ProjectorPrefs";
  }
  protected:
  explicit ProjectorPrefs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRasterFileFieldNumber = 2,
    kCommonPrefsFieldNumber = 1,
    kShowFrustumFieldNumber = 3,
    kOverrideFovFieldNumber = 6,
    kShadowMappingFieldNumber = 8,
    kDoubleSidedFieldNumber = 10,
    kMaxDrawRangeFieldNumber = 9,
    kProjectorAlphaFieldNumber = 4,
    kInterpolateProjectorFovFieldNumber = 5,
    kOverrideFovAngleFieldNumber = 7,
  };
  // optional string rasterFile = 2;
  bool has_rasterfile() const;
  private:
  bool _internal_has_rasterfile() const;
  public:
  void clear_rasterfile();
  const std::string& rasterfile() const;
  void set_rasterfile(const std::string& value);
  void set_rasterfile(std::string&& value);
  void set_rasterfile(const char* value);
  void set_rasterfile(const char* value, size_t size);
  std::string* mutable_rasterfile();
  std::string* release_rasterfile();
  void set_allocated_rasterfile(std::string* rasterfile);
  private:
  const std::string& _internal_rasterfile() const;
  void _internal_set_rasterfile(const std::string& value);
  std::string* _internal_mutable_rasterfile();
  public:

  // optional .simData.CommonPrefs commonPrefs = 1;
  bool has_commonprefs() const;
  private:
  bool _internal_has_commonprefs() const;
  public:
  void clear_commonprefs();
  const ::simData::CommonPrefs& commonprefs() const;
  ::simData::CommonPrefs* release_commonprefs();
  ::simData::CommonPrefs* mutable_commonprefs();
  void set_allocated_commonprefs(::simData::CommonPrefs* commonprefs);
  private:
  const ::simData::CommonPrefs& _internal_commonprefs() const;
  ::simData::CommonPrefs* _internal_mutable_commonprefs();
  public:
  void unsafe_arena_set_allocated_commonprefs(
      ::simData::CommonPrefs* commonprefs);
  ::simData::CommonPrefs* unsafe_arena_release_commonprefs();

  // optional bool showFrustum = 3 [default = false];
  bool has_showfrustum() const;
  private:
  bool _internal_has_showfrustum() const;
  public:
  void clear_showfrustum();
  bool showfrustum() const;
  void set_showfrustum(bool value);
  private:
  bool _internal_showfrustum() const;
  void _internal_set_showfrustum(bool value);
  public:

  // optional bool overrideFov = 6 [default = false];
  bool has_overridefov() const;
  private:
  bool _internal_has_overridefov() const;
  public:
  void clear_overridefov();
  bool overridefov() const;
  void set_overridefov(bool value);
  private:
  bool _internal_overridefov() const;
  void _internal_set_overridefov(bool value);
  public:

  // optional bool shadowMapping = 8 [default = false];
  bool has_shadowmapping() const;
  private:
  bool _internal_has_shadowmapping() const;
  public:
  void clear_shadowmapping();
  bool shadowmapping() const;
  void set_shadowmapping(bool value);
  private:
  bool _internal_shadowmapping() const;
  void _internal_set_shadowmapping(bool value);
  public:

  // optional bool doubleSided = 10 [default = false];
  bool has_doublesided() const;
  private:
  bool _internal_has_doublesided() const;
  public:
  void clear_doublesided();
  bool doublesided() const;
  void set_doublesided(bool value);
  private:
  bool _internal_doublesided() const;
  void _internal_set_doublesided(bool value);
  public:

  // optional float maxDrawRange = 9 [default = 0];
  bool has_maxdrawrange() const;
  private:
  bool _internal_has_maxdrawrange() const;
  public:
  void clear_maxdrawrange();
  float maxdrawrange() const;
  void set_maxdrawrange(float value);
  private:
  float _internal_maxdrawrange() const;
  void _internal_set_maxdrawrange(float value);
  public:

  // optional float projectorAlpha = 4 [default = 1];
  bool has_projectoralpha() const;
  private:
  bool _internal_has_projectoralpha() const;
  public:
  void clear_projectoralpha();
  float projectoralpha() const;
  void set_projectoralpha(float value);
  private:
  float _internal_projectoralpha() const;
  void _internal_set_projectoralpha(float value);
  public:

  // optional bool interpolateProjectorFov = 5 [default = true];
  bool has_interpolateprojectorfov() const;
  private:
  bool _internal_has_interpolateprojectorfov() const;
  public:
  void clear_interpolateprojectorfov();
  bool interpolateprojectorfov() const;
  void set_interpolateprojectorfov(bool value);
  private:
  bool _internal_interpolateprojectorfov() const;
  void _internal_set_interpolateprojectorfov(bool value);
  public:

  // optional double overrideFovAngle = 7 [default = 0.174533];
  bool has_overridefovangle() const;
  private:
  bool _internal_has_overridefovangle() const;
  public:
  void clear_overridefovangle();
  double overridefovangle() const;
  void set_overridefovangle(double value);
  private:
  double _internal_overridefovangle() const;
  void _internal_set_overridefovangle(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.ProjectorPrefs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rasterfile_;
  ::simData::CommonPrefs* commonprefs_;
  bool showfrustum_;
  bool overridefov_;
  bool shadowmapping_;
  bool doublesided_;
  float maxdrawrange_;
  float projectoralpha_;
  bool interpolateprojectorfov_;
  double overridefovangle_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT ProjectorUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.ProjectorUpdate) */ {
 public:
  inline ProjectorUpdate() : ProjectorUpdate(nullptr) {}
  virtual ~ProjectorUpdate();

  ProjectorUpdate(const ProjectorUpdate& from);
  ProjectorUpdate(ProjectorUpdate&& from) noexcept
    : ProjectorUpdate() {
    *this = ::std::move(from);
  }

  inline ProjectorUpdate& operator=(const ProjectorUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectorUpdate& operator=(ProjectorUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjectorUpdate& default_instance();

  static inline const ProjectorUpdate* internal_default_instance() {
    return reinterpret_cast<const ProjectorUpdate*>(
               &_ProjectorUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ProjectorUpdate& a, ProjectorUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectorUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectorUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectorUpdate* New() const final {
    return CreateMaybeMessage<ProjectorUpdate>(nullptr);
  }

  ProjectorUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectorUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectorUpdate& from);
  void MergeFrom(const ProjectorUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectorUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.ProjectorUpdate";
  }
  protected:
  explicit ProjectorUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kFovFieldNumber = 2,
  };
  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // optional double fov = 2;
  bool has_fov() const;
  private:
  bool _internal_has_fov() const;
  public:
  void clear_fov();
  double fov() const;
  void set_fov(double value);
  private:
  double _internal_fov() const;
  void _internal_set_fov(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.ProjectorUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double time_;
  double fov_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT ProjectorCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.ProjectorCommand) */ {
 public:
  inline ProjectorCommand() : ProjectorCommand(nullptr) {}
  virtual ~ProjectorCommand();

  ProjectorCommand(const ProjectorCommand& from);
  ProjectorCommand(ProjectorCommand&& from) noexcept
    : ProjectorCommand() {
    *this = ::std::move(from);
  }

  inline ProjectorCommand& operator=(const ProjectorCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectorCommand& operator=(ProjectorCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjectorCommand& default_instance();

  static inline const ProjectorCommand* internal_default_instance() {
    return reinterpret_cast<const ProjectorCommand*>(
               &_ProjectorCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ProjectorCommand& a, ProjectorCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectorCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectorCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectorCommand* New() const final {
    return CreateMaybeMessage<ProjectorCommand>(nullptr);
  }

  ProjectorCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectorCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectorCommand& from);
  void MergeFrom(const ProjectorCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectorCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.ProjectorCommand";
  }
  protected:
  explicit ProjectorCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatePrefsFieldNumber = 2,
    kTimeFieldNumber = 1,
    kIsClearCommandFieldNumber = 3,
  };
  // optional .simData.ProjectorPrefs updatePrefs = 2;
  bool has_updateprefs() const;
  private:
  bool _internal_has_updateprefs() const;
  public:
  void clear_updateprefs();
  const ::simData::ProjectorPrefs& updateprefs() const;
  ::simData::ProjectorPrefs* release_updateprefs();
  ::simData::ProjectorPrefs* mutable_updateprefs();
  void set_allocated_updateprefs(::simData::ProjectorPrefs* updateprefs);
  private:
  const ::simData::ProjectorPrefs& _internal_updateprefs() const;
  ::simData::ProjectorPrefs* _internal_mutable_updateprefs();
  public:
  void unsafe_arena_set_allocated_updateprefs(
      ::simData::ProjectorPrefs* updateprefs);
  ::simData::ProjectorPrefs* unsafe_arena_release_updateprefs();

  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // optional bool isClearCommand = 3 [default = false];
  bool has_isclearcommand() const;
  private:
  bool _internal_has_isclearcommand() const;
  public:
  void clear_isclearcommand();
  bool isclearcommand() const;
  void set_isclearcommand(bool value);
  private:
  bool _internal_isclearcommand() const;
  void _internal_set_isclearcommand(bool value);
  public:

  // @@protoc_insertion_point(class_scope:simData.ProjectorCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::simData::ProjectorPrefs* updateprefs_;
  double time_;
  bool isclearcommand_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT LobGroupProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.LobGroupProperties) */ {
 public:
  inline LobGroupProperties() : LobGroupProperties(nullptr) {}
  virtual ~LobGroupProperties();

  LobGroupProperties(const LobGroupProperties& from);
  LobGroupProperties(LobGroupProperties&& from) noexcept
    : LobGroupProperties() {
    *this = ::std::move(from);
  }

  inline LobGroupProperties& operator=(const LobGroupProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobGroupProperties& operator=(LobGroupProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LobGroupProperties& default_instance();

  static inline const LobGroupProperties* internal_default_instance() {
    return reinterpret_cast<const LobGroupProperties*>(
               &_LobGroupProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(LobGroupProperties& a, LobGroupProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(LobGroupProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobGroupProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LobGroupProperties* New() const final {
    return CreateMaybeMessage<LobGroupProperties>(nullptr);
  }

  LobGroupProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LobGroupProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LobGroupProperties& from);
  void MergeFrom(const LobGroupProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobGroupProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.LobGroupProperties";
  }
  protected:
  explicit LobGroupProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 4,
    kIdFieldNumber = 1,
    kHostIdFieldNumber = 2,
    kOriginalIdFieldNumber = 3,
    kAzElRelativeToHostOriFieldNumber = 6,
    kCoordinateSystemFieldNumber = 5,
  };
  // optional string source = 4;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 hostId = 2;
  bool has_hostid() const;
  private:
  bool _internal_has_hostid() const;
  public:
  void clear_hostid();
  ::PROTOBUF_NAMESPACE_ID::uint64 hostid() const;
  void set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hostid() const;
  void _internal_set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 originalId = 3;
  bool has_originalid() const;
  private:
  bool _internal_has_originalid() const;
  public:
  void clear_originalid();
  ::PROTOBUF_NAMESPACE_ID::uint64 originalid() const;
  void set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_originalid() const;
  void _internal_set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool azElRelativeToHostOri = 6;
  bool has_azelrelativetohostori() const;
  private:
  bool _internal_has_azelrelativetohostori() const;
  public:
  void clear_azelrelativetohostori();
  bool azelrelativetohostori() const;
  void set_azelrelativetohostori(bool value);
  private:
  bool _internal_azelrelativetohostori() const;
  void _internal_set_azelrelativetohostori(bool value);
  public:

  // optional .simData.CoordinateSystem coordinateSystem = 5;
  bool has_coordinatesystem() const;
  private:
  bool _internal_has_coordinatesystem() const;
  public:
  void clear_coordinatesystem();
  ::simData::CoordinateSystem coordinatesystem() const;
  void set_coordinatesystem(::simData::CoordinateSystem value);
  private:
  ::simData::CoordinateSystem _internal_coordinatesystem() const;
  void _internal_set_coordinatesystem(::simData::CoordinateSystem value);
  public:

  // @@protoc_insertion_point(class_scope:simData.LobGroupProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hostid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 originalid_;
  bool azelrelativetohostori_;
  int coordinatesystem_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT LobGroupPrefs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.LobGroupPrefs) */ {
 public:
  inline LobGroupPrefs() : LobGroupPrefs(nullptr) {}
  virtual ~LobGroupPrefs();

  LobGroupPrefs(const LobGroupPrefs& from);
  LobGroupPrefs(LobGroupPrefs&& from) noexcept
    : LobGroupPrefs() {
    *this = ::std::move(from);
  }

  inline LobGroupPrefs& operator=(const LobGroupPrefs& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobGroupPrefs& operator=(LobGroupPrefs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LobGroupPrefs& default_instance();

  static inline const LobGroupPrefs* internal_default_instance() {
    return reinterpret_cast<const LobGroupPrefs*>(
               &_LobGroupPrefs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(LobGroupPrefs& a, LobGroupPrefs& b) {
    a.Swap(&b);
  }
  inline void Swap(LobGroupPrefs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobGroupPrefs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LobGroupPrefs* New() const final {
    return CreateMaybeMessage<LobGroupPrefs>(nullptr);
  }

  LobGroupPrefs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LobGroupPrefs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LobGroupPrefs& from);
  void MergeFrom(const LobGroupPrefs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobGroupPrefs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.LobGroupPrefs";
  }
  protected:
  explicit LobGroupPrefs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonPrefsFieldNumber = 1,
    kXyzOffsetFieldNumber = 2,
    kLobUseClampAltFieldNumber = 10,
    kUseRangeOverrideFieldNumber = 11,
    kBendingFieldNumber = 13,
    kLobwidthFieldNumber = 3,
    kColor1FieldNumber = 4,
    kColor2FieldNumber = 5,
    kStipple1FieldNumber = 6,
    kMaxDataSecondsFieldNumber = 8,
    kStipple2FieldNumber = 7,
    kMaxDataPointsFieldNumber = 9,
    kRangeOverrideValueFieldNumber = 12,
  };
  // optional .simData.CommonPrefs commonPrefs = 1;
  bool has_commonprefs() const;
  private:
  bool _internal_has_commonprefs() const;
  public:
  void clear_commonprefs();
  const ::simData::CommonPrefs& commonprefs() const;
  ::simData::CommonPrefs* release_commonprefs();
  ::simData::CommonPrefs* mutable_commonprefs();
  void set_allocated_commonprefs(::simData::CommonPrefs* commonprefs);
  private:
  const ::simData::CommonPrefs& _internal_commonprefs() const;
  ::simData::CommonPrefs* _internal_mutable_commonprefs();
  public:
  void unsafe_arena_set_allocated_commonprefs(
      ::simData::CommonPrefs* commonprefs);
  ::simData::CommonPrefs* unsafe_arena_release_commonprefs();

  // optional .simData.Position xyzOffset = 2;
  bool has_xyzoffset() const;
  private:
  bool _internal_has_xyzoffset() const;
  public:
  void clear_xyzoffset();
  const ::simData::Position& xyzoffset() const;
  ::simData::Position* release_xyzoffset();
  ::simData::Position* mutable_xyzoffset();
  void set_allocated_xyzoffset(::simData::Position* xyzoffset);
  private:
  const ::simData::Position& _internal_xyzoffset() const;
  ::simData::Position* _internal_mutable_xyzoffset();
  public:
  void unsafe_arena_set_allocated_xyzoffset(
      ::simData::Position* xyzoffset);
  ::simData::Position* unsafe_arena_release_xyzoffset();

  // optional bool lobUseClampAlt = 10 [default = false];
  bool has_lobuseclampalt() const;
  private:
  bool _internal_has_lobuseclampalt() const;
  public:
  void clear_lobuseclampalt();
  bool lobuseclampalt() const;
  void set_lobuseclampalt(bool value);
  private:
  bool _internal_lobuseclampalt() const;
  void _internal_set_lobuseclampalt(bool value);
  public:

  // optional bool useRangeOverride = 11 [default = false];
  bool has_userangeoverride() const;
  private:
  bool _internal_has_userangeoverride() const;
  public:
  void clear_userangeoverride();
  bool userangeoverride() const;
  void set_userangeoverride(bool value);
  private:
  bool _internal_userangeoverride() const;
  void _internal_set_userangeoverride(bool value);
  public:

  // optional .simData.AnimatedLineBend bending = 13 [default = ALB_AUTO];
  bool has_bending() const;
  private:
  bool _internal_has_bending() const;
  public:
  void clear_bending();
  ::simData::AnimatedLineBend bending() const;
  void set_bending(::simData::AnimatedLineBend value);
  private:
  ::simData::AnimatedLineBend _internal_bending() const;
  void _internal_set_bending(::simData::AnimatedLineBend value);
  public:

  // optional int32 lobwidth = 3 [default = 2];
  bool has_lobwidth() const;
  private:
  bool _internal_has_lobwidth() const;
  public:
  void clear_lobwidth();
  ::PROTOBUF_NAMESPACE_ID::int32 lobwidth() const;
  void set_lobwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lobwidth() const;
  void _internal_set_lobwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed32 color1 = 4 [default = 16711935];
  bool has_color1() const;
  private:
  bool _internal_has_color1() const;
  public:
  void clear_color1();
  ::PROTOBUF_NAMESPACE_ID::uint32 color1() const;
  void set_color1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color1() const;
  void _internal_set_color1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 color2 = 5 [default = 4278190335];
  bool has_color2() const;
  private:
  bool _internal_has_color2() const;
  public:
  void clear_color2();
  ::PROTOBUF_NAMESPACE_ID::uint32 color2() const;
  void set_color2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color2() const;
  void _internal_set_color2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stipple1 = 6 [default = 65280];
  bool has_stipple1() const;
  private:
  bool _internal_has_stipple1() const;
  public:
  void clear_stipple1();
  ::PROTOBUF_NAMESPACE_ID::uint32 stipple1() const;
  void set_stipple1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stipple1() const;
  void _internal_set_stipple1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double maxDataSeconds = 8 [default = 5];
  bool has_maxdataseconds() const;
  private:
  bool _internal_has_maxdataseconds() const;
  public:
  void clear_maxdataseconds();
  double maxdataseconds() const;
  void set_maxdataseconds(double value);
  private:
  double _internal_maxdataseconds() const;
  void _internal_set_maxdataseconds(double value);
  public:

  // optional uint32 stipple2 = 7 [default = 255];
  bool has_stipple2() const;
  private:
  bool _internal_has_stipple2() const;
  public:
  void clear_stipple2();
  ::PROTOBUF_NAMESPACE_ID::uint32 stipple2() const;
  void set_stipple2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stipple2() const;
  void _internal_set_stipple2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 maxDataPoints = 9 [default = 10];
  bool has_maxdatapoints() const;
  private:
  bool _internal_has_maxdatapoints() const;
  public:
  void clear_maxdatapoints();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxdatapoints() const;
  void set_maxdatapoints(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxdatapoints() const;
  void _internal_set_maxdatapoints(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double rangeOverrideValue = 12 [default = 1000];
  bool has_rangeoverridevalue() const;
  private:
  bool _internal_has_rangeoverridevalue() const;
  public:
  void clear_rangeoverridevalue();
  double rangeoverridevalue() const;
  void set_rangeoverridevalue(double value);
  private:
  double _internal_rangeoverridevalue() const;
  void _internal_set_rangeoverridevalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.LobGroupPrefs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::simData::CommonPrefs* commonprefs_;
  ::simData::Position* xyzoffset_;
  bool lobuseclampalt_;
  bool userangeoverride_;
  int bending_;
  ::PROTOBUF_NAMESPACE_ID::int32 lobwidth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stipple1_;
  double maxdataseconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stipple2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxdatapoints_;
  double rangeoverridevalue_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT LobGroupUpdatePoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.LobGroupUpdatePoint) */ {
 public:
  inline LobGroupUpdatePoint() : LobGroupUpdatePoint(nullptr) {}
  virtual ~LobGroupUpdatePoint();

  LobGroupUpdatePoint(const LobGroupUpdatePoint& from);
  LobGroupUpdatePoint(LobGroupUpdatePoint&& from) noexcept
    : LobGroupUpdatePoint() {
    *this = ::std::move(from);
  }

  inline LobGroupUpdatePoint& operator=(const LobGroupUpdatePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobGroupUpdatePoint& operator=(LobGroupUpdatePoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LobGroupUpdatePoint& default_instance();

  static inline const LobGroupUpdatePoint* internal_default_instance() {
    return reinterpret_cast<const LobGroupUpdatePoint*>(
               &_LobGroupUpdatePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(LobGroupUpdatePoint& a, LobGroupUpdatePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(LobGroupUpdatePoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobGroupUpdatePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LobGroupUpdatePoint* New() const final {
    return CreateMaybeMessage<LobGroupUpdatePoint>(nullptr);
  }

  LobGroupUpdatePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LobGroupUpdatePoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LobGroupUpdatePoint& from);
  void MergeFrom(const LobGroupUpdatePoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobGroupUpdatePoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.LobGroupUpdatePoint";
  }
  protected:
  explicit LobGroupUpdatePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kRangeFieldNumber = 2,
    kAzimuthFieldNumber = 3,
    kElevationFieldNumber = 4,
  };
  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // optional double range = 2;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  double range() const;
  void set_range(double value);
  private:
  double _internal_range() const;
  void _internal_set_range(double value);
  public:

  // optional double azimuth = 3;
  bool has_azimuth() const;
  private:
  bool _internal_has_azimuth() const;
  public:
  void clear_azimuth();
  double azimuth() const;
  void set_azimuth(double value);
  private:
  double _internal_azimuth() const;
  void _internal_set_azimuth(double value);
  public:

  // optional double elevation = 4;
  bool has_elevation() const;
  private:
  bool _internal_has_elevation() const;
  public:
  void clear_elevation();
  double elevation() const;
  void set_elevation(double value);
  private:
  double _internal_elevation() const;
  void _internal_set_elevation(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.LobGroupUpdatePoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double time_;
  double range_;
  double azimuth_;
  double elevation_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT LobGroupUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.LobGroupUpdate) */ {
 public:
  inline LobGroupUpdate() : LobGroupUpdate(nullptr) {}
  virtual ~LobGroupUpdate();

  LobGroupUpdate(const LobGroupUpdate& from);
  LobGroupUpdate(LobGroupUpdate&& from) noexcept
    : LobGroupUpdate() {
    *this = ::std::move(from);
  }

  inline LobGroupUpdate& operator=(const LobGroupUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobGroupUpdate& operator=(LobGroupUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LobGroupUpdate& default_instance();

  static inline const LobGroupUpdate* internal_default_instance() {
    return reinterpret_cast<const LobGroupUpdate*>(
               &_LobGroupUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(LobGroupUpdate& a, LobGroupUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(LobGroupUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobGroupUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LobGroupUpdate* New() const final {
    return CreateMaybeMessage<LobGroupUpdate>(nullptr);
  }

  LobGroupUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LobGroupUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LobGroupUpdate& from);
  void MergeFrom(const LobGroupUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobGroupUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.LobGroupUpdate";
  }
  protected:
  explicit LobGroupUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // repeated .simData.LobGroupUpdatePoint dataPoints = 2;
  int datapoints_size() const;
  private:
  int _internal_datapoints_size() const;
  public:
  void clear_datapoints();
  ::simData::LobGroupUpdatePoint* mutable_datapoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::LobGroupUpdatePoint >*
      mutable_datapoints();
  private:
  const ::simData::LobGroupUpdatePoint& _internal_datapoints(int index) const;
  ::simData::LobGroupUpdatePoint* _internal_add_datapoints();
  public:
  const ::simData::LobGroupUpdatePoint& datapoints(int index) const;
  ::simData::LobGroupUpdatePoint* add_datapoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::LobGroupUpdatePoint >&
      datapoints() const;

  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.LobGroupUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::LobGroupUpdatePoint > datapoints_;
  double time_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT LobGroupCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.LobGroupCommand) */ {
 public:
  inline LobGroupCommand() : LobGroupCommand(nullptr) {}
  virtual ~LobGroupCommand();

  LobGroupCommand(const LobGroupCommand& from);
  LobGroupCommand(LobGroupCommand&& from) noexcept
    : LobGroupCommand() {
    *this = ::std::move(from);
  }

  inline LobGroupCommand& operator=(const LobGroupCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobGroupCommand& operator=(LobGroupCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LobGroupCommand& default_instance();

  static inline const LobGroupCommand* internal_default_instance() {
    return reinterpret_cast<const LobGroupCommand*>(
               &_LobGroupCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(LobGroupCommand& a, LobGroupCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(LobGroupCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobGroupCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LobGroupCommand* New() const final {
    return CreateMaybeMessage<LobGroupCommand>(nullptr);
  }

  LobGroupCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LobGroupCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LobGroupCommand& from);
  void MergeFrom(const LobGroupCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobGroupCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.LobGroupCommand";
  }
  protected:
  explicit LobGroupCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatePrefsFieldNumber = 2,
    kTimeFieldNumber = 1,
    kIsClearCommandFieldNumber = 3,
  };
  // optional .simData.LobGroupPrefs updatePrefs = 2;
  bool has_updateprefs() const;
  private:
  bool _internal_has_updateprefs() const;
  public:
  void clear_updateprefs();
  const ::simData::LobGroupPrefs& updateprefs() const;
  ::simData::LobGroupPrefs* release_updateprefs();
  ::simData::LobGroupPrefs* mutable_updateprefs();
  void set_allocated_updateprefs(::simData::LobGroupPrefs* updateprefs);
  private:
  const ::simData::LobGroupPrefs& _internal_updateprefs() const;
  ::simData::LobGroupPrefs* _internal_mutable_updateprefs();
  public:
  void unsafe_arena_set_allocated_updateprefs(
      ::simData::LobGroupPrefs* updateprefs);
  ::simData::LobGroupPrefs* unsafe_arena_release_updateprefs();

  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // optional bool isClearCommand = 3 [default = false];
  bool has_isclearcommand() const;
  private:
  bool _internal_has_isclearcommand() const;
  public:
  void clear_isclearcommand();
  bool isclearcommand() const;
  void set_isclearcommand(bool value);
  private:
  bool _internal_isclearcommand() const;
  void _internal_set_isclearcommand(bool value);
  public:

  // @@protoc_insertion_point(class_scope:simData.LobGroupCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::simData::LobGroupPrefs* updateprefs_;
  double time_;
  bool isclearcommand_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT CategoryData_Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.CategoryData.Entry) */ {
 public:
  inline CategoryData_Entry() : CategoryData_Entry(nullptr) {}
  virtual ~CategoryData_Entry();

  CategoryData_Entry(const CategoryData_Entry& from);
  CategoryData_Entry(CategoryData_Entry&& from) noexcept
    : CategoryData_Entry() {
    *this = ::std::move(from);
  }

  inline CategoryData_Entry& operator=(const CategoryData_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryData_Entry& operator=(CategoryData_Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CategoryData_Entry& default_instance();

  static inline const CategoryData_Entry* internal_default_instance() {
    return reinterpret_cast<const CategoryData_Entry*>(
               &_CategoryData_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CategoryData_Entry& a, CategoryData_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryData_Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryData_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryData_Entry* New() const final {
    return CreateMaybeMessage<CategoryData_Entry>(nullptr);
  }

  CategoryData_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryData_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryData_Entry& from);
  void MergeFrom(const CategoryData_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryData_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.CategoryData.Entry";
  }
  protected:
  explicit CategoryData_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:simData.CategoryData.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT CategoryData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.CategoryData) */ {
 public:
  inline CategoryData() : CategoryData(nullptr) {}
  virtual ~CategoryData();

  CategoryData(const CategoryData& from);
  CategoryData(CategoryData&& from) noexcept
    : CategoryData() {
    *this = ::std::move(from);
  }

  inline CategoryData& operator=(const CategoryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryData& operator=(CategoryData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CategoryData& default_instance();

  static inline const CategoryData* internal_default_instance() {
    return reinterpret_cast<const CategoryData*>(
               &_CategoryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CategoryData& a, CategoryData& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryData* New() const final {
    return CreateMaybeMessage<CategoryData>(nullptr);
  }

  CategoryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryData& from);
  void MergeFrom(const CategoryData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.CategoryData";
  }
  protected:
  explicit CategoryData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CategoryData_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // repeated .simData.CategoryData.Entry entry = 2;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  ::simData::CategoryData_Entry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::CategoryData_Entry >*
      mutable_entry();
  private:
  const ::simData::CategoryData_Entry& _internal_entry(int index) const;
  ::simData::CategoryData_Entry* _internal_add_entry();
  public:
  const ::simData::CategoryData_Entry& entry(int index) const;
  ::simData::CategoryData_Entry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::CategoryData_Entry >&
      entry() const;

  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.CategoryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::CategoryData_Entry > entry_;
  double time_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT GenericData_Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.GenericData.Entry) */ {
 public:
  inline GenericData_Entry() : GenericData_Entry(nullptr) {}
  virtual ~GenericData_Entry();

  GenericData_Entry(const GenericData_Entry& from);
  GenericData_Entry(GenericData_Entry&& from) noexcept
    : GenericData_Entry() {
    *this = ::std::move(from);
  }

  inline GenericData_Entry& operator=(const GenericData_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericData_Entry& operator=(GenericData_Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenericData_Entry& default_instance();

  static inline const GenericData_Entry* internal_default_instance() {
    return reinterpret_cast<const GenericData_Entry*>(
               &_GenericData_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GenericData_Entry& a, GenericData_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericData_Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericData_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericData_Entry* New() const final {
    return CreateMaybeMessage<GenericData_Entry>(nullptr);
  }

  GenericData_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericData_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenericData_Entry& from);
  void MergeFrom(const GenericData_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericData_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.GenericData.Entry";
  }
  protected:
  explicit GenericData_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // optional string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:simData.GenericData.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_simData_2eproto;
};
// -------------------------------------------------------------------

class SDKDATA_EXPORT GenericData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:simData.GenericData) */ {
 public:
  inline GenericData() : GenericData(nullptr) {}
  virtual ~GenericData();

  GenericData(const GenericData& from);
  GenericData(GenericData&& from) noexcept
    : GenericData() {
    *this = ::std::move(from);
  }

  inline GenericData& operator=(const GenericData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericData& operator=(GenericData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenericData& default_instance();

  static inline const GenericData* internal_default_instance() {
    return reinterpret_cast<const GenericData*>(
               &_GenericData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GenericData& a, GenericData& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericData* New() const final {
    return CreateMaybeMessage<GenericData>(nullptr);
  }

  GenericData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenericData& from);
  void MergeFrom(const GenericData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simData.GenericData";
  }
  protected:
  explicit GenericData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simData_2eproto);
    return ::descriptor_table_simData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GenericData_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 3,
    kTimeFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // repeated .simData.GenericData.Entry entry = 3;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  ::simData::GenericData_Entry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::GenericData_Entry >*
      mutable_entry();
  private:
  const ::simData::GenericData_Entry& _internal_entry(int index) const;
  ::simData::GenericData_Entry* _internal_add_entry();
  public:
  const ::simData::GenericData_Entry& entry(int index) const;
  ::simData::GenericData_Entry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::GenericData_Entry >&
      entry() const;

  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // optional double duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // @@protoc_insertion_point(class_scope:simData.GenericData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::GenericData_Entry > entry_;
  double time_;
  double duration_;
  friend struct ::TableStruct_simData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// optional double x = 1;
inline bool Position::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Position::has_x() const {
  return _internal_has_x();
}
inline void Position::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Position::_internal_x() const {
  return x_;
}
inline double Position::x() const {
  // @@protoc_insertion_point(field_get:simData.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Position::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:simData.Position.x)
}

// optional double y = 2;
inline bool Position::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Position::has_y() const {
  return _internal_has_y();
}
inline void Position::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Position::_internal_y() const {
  return y_;
}
inline double Position::y() const {
  // @@protoc_insertion_point(field_get:simData.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Position::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:simData.Position.y)
}

// optional double z = 3;
inline bool Position::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Position::has_z() const {
  return _internal_has_z();
}
inline void Position::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Position::_internal_z() const {
  return z_;
}
inline double Position::z() const {
  // @@protoc_insertion_point(field_get:simData.Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Position::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:simData.Position.z)
}

// -------------------------------------------------------------------

// BodyOrientation

// optional double yaw = 1;
inline bool BodyOrientation::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BodyOrientation::has_yaw() const {
  return _internal_has_yaw();
}
inline void BodyOrientation::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double BodyOrientation::_internal_yaw() const {
  return yaw_;
}
inline double BodyOrientation::yaw() const {
  // @@protoc_insertion_point(field_get:simData.BodyOrientation.yaw)
  return _internal_yaw();
}
inline void BodyOrientation::_internal_set_yaw(double value) {
  _has_bits_[0] |= 0x00000001u;
  yaw_ = value;
}
inline void BodyOrientation::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:simData.BodyOrientation.yaw)
}

// optional double pitch = 2;
inline bool BodyOrientation::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BodyOrientation::has_pitch() const {
  return _internal_has_pitch();
}
inline void BodyOrientation::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double BodyOrientation::_internal_pitch() const {
  return pitch_;
}
inline double BodyOrientation::pitch() const {
  // @@protoc_insertion_point(field_get:simData.BodyOrientation.pitch)
  return _internal_pitch();
}
inline void BodyOrientation::_internal_set_pitch(double value) {
  _has_bits_[0] |= 0x00000002u;
  pitch_ = value;
}
inline void BodyOrientation::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:simData.BodyOrientation.pitch)
}

// optional double roll = 3;
inline bool BodyOrientation::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BodyOrientation::has_roll() const {
  return _internal_has_roll();
}
inline void BodyOrientation::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double BodyOrientation::_internal_roll() const {
  return roll_;
}
inline double BodyOrientation::roll() const {
  // @@protoc_insertion_point(field_get:simData.BodyOrientation.roll)
  return _internal_roll();
}
inline void BodyOrientation::_internal_set_roll(double value) {
  _has_bits_[0] |= 0x00000004u;
  roll_ = value;
}
inline void BodyOrientation::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:simData.BodyOrientation.roll)
}

// -------------------------------------------------------------------

// Reference

// optional double lat = 1;
inline bool Reference::_internal_has_lat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Reference::has_lat() const {
  return _internal_has_lat();
}
inline void Reference::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Reference::_internal_lat() const {
  return lat_;
}
inline double Reference::lat() const {
  // @@protoc_insertion_point(field_get:simData.Reference.lat)
  return _internal_lat();
}
inline void Reference::_internal_set_lat(double value) {
  _has_bits_[0] |= 0x00000001u;
  lat_ = value;
}
inline void Reference::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:simData.Reference.lat)
}

// optional double lon = 2;
inline bool Reference::_internal_has_lon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Reference::has_lon() const {
  return _internal_has_lon();
}
inline void Reference::clear_lon() {
  lon_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Reference::_internal_lon() const {
  return lon_;
}
inline double Reference::lon() const {
  // @@protoc_insertion_point(field_get:simData.Reference.lon)
  return _internal_lon();
}
inline void Reference::_internal_set_lon(double value) {
  _has_bits_[0] |= 0x00000002u;
  lon_ = value;
}
inline void Reference::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:simData.Reference.lon)
}

// optional double alt = 3;
inline bool Reference::_internal_has_alt() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Reference::has_alt() const {
  return _internal_has_alt();
}
inline void Reference::clear_alt() {
  alt_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Reference::_internal_alt() const {
  return alt_;
}
inline double Reference::alt() const {
  // @@protoc_insertion_point(field_get:simData.Reference.alt)
  return _internal_alt();
}
inline void Reference::_internal_set_alt(double value) {
  _has_bits_[0] |= 0x00000004u;
  alt_ = value;
}
inline void Reference::set_alt(double value) {
  _internal_set_alt(value);
  // @@protoc_insertion_point(field_set:simData.Reference.alt)
}

// -------------------------------------------------------------------

// CoordinateFrame_TangentPlaneOffsets

// optional double tx = 1;
inline bool CoordinateFrame_TangentPlaneOffsets::_internal_has_tx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CoordinateFrame_TangentPlaneOffsets::has_tx() const {
  return _internal_has_tx();
}
inline void CoordinateFrame_TangentPlaneOffsets::clear_tx() {
  tx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double CoordinateFrame_TangentPlaneOffsets::_internal_tx() const {
  return tx_;
}
inline double CoordinateFrame_TangentPlaneOffsets::tx() const {
  // @@protoc_insertion_point(field_get:simData.CoordinateFrame.TangentPlaneOffsets.tx)
  return _internal_tx();
}
inline void CoordinateFrame_TangentPlaneOffsets::_internal_set_tx(double value) {
  _has_bits_[0] |= 0x00000001u;
  tx_ = value;
}
inline void CoordinateFrame_TangentPlaneOffsets::set_tx(double value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:simData.CoordinateFrame.TangentPlaneOffsets.tx)
}

// optional double ty = 2;
inline bool CoordinateFrame_TangentPlaneOffsets::_internal_has_ty() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CoordinateFrame_TangentPlaneOffsets::has_ty() const {
  return _internal_has_ty();
}
inline void CoordinateFrame_TangentPlaneOffsets::clear_ty() {
  ty_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CoordinateFrame_TangentPlaneOffsets::_internal_ty() const {
  return ty_;
}
inline double CoordinateFrame_TangentPlaneOffsets::ty() const {
  // @@protoc_insertion_point(field_get:simData.CoordinateFrame.TangentPlaneOffsets.ty)
  return _internal_ty();
}
inline void CoordinateFrame_TangentPlaneOffsets::_internal_set_ty(double value) {
  _has_bits_[0] |= 0x00000002u;
  ty_ = value;
}
inline void CoordinateFrame_TangentPlaneOffsets::set_ty(double value) {
  _internal_set_ty(value);
  // @@protoc_insertion_point(field_set:simData.CoordinateFrame.TangentPlaneOffsets.ty)
}

// optional double angle = 3;
inline bool CoordinateFrame_TangentPlaneOffsets::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CoordinateFrame_TangentPlaneOffsets::has_angle() const {
  return _internal_has_angle();
}
inline void CoordinateFrame_TangentPlaneOffsets::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double CoordinateFrame_TangentPlaneOffsets::_internal_angle() const {
  return angle_;
}
inline double CoordinateFrame_TangentPlaneOffsets::angle() const {
  // @@protoc_insertion_point(field_get:simData.CoordinateFrame.TangentPlaneOffsets.angle)
  return _internal_angle();
}
inline void CoordinateFrame_TangentPlaneOffsets::_internal_set_angle(double value) {
  _has_bits_[0] |= 0x00000004u;
  angle_ = value;
}
inline void CoordinateFrame_TangentPlaneOffsets::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:simData.CoordinateFrame.TangentPlaneOffsets.angle)
}

// -------------------------------------------------------------------

// CoordinateFrame

// optional .simData.CoordinateSystem coordinateSystem = 1;
inline bool CoordinateFrame::_internal_has_coordinatesystem() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CoordinateFrame::has_coordinatesystem() const {
  return _internal_has_coordinatesystem();
}
inline void CoordinateFrame::clear_coordinatesystem() {
  coordinatesystem_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::simData::CoordinateSystem CoordinateFrame::_internal_coordinatesystem() const {
  return static_cast< ::simData::CoordinateSystem >(coordinatesystem_);
}
inline ::simData::CoordinateSystem CoordinateFrame::coordinatesystem() const {
  // @@protoc_insertion_point(field_get:simData.CoordinateFrame.coordinateSystem)
  return _internal_coordinatesystem();
}
inline void CoordinateFrame::_internal_set_coordinatesystem(::simData::CoordinateSystem value) {
  assert(::simData::CoordinateSystem_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  coordinatesystem_ = value;
}
inline void CoordinateFrame::set_coordinatesystem(::simData::CoordinateSystem value) {
  _internal_set_coordinatesystem(value);
  // @@protoc_insertion_point(field_set:simData.CoordinateFrame.coordinateSystem)
}

// optional .simData.Reference referenceLla = 2;
inline bool CoordinateFrame::_internal_has_referencella() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || referencella_ != nullptr);
  return value;
}
inline bool CoordinateFrame::has_referencella() const {
  return _internal_has_referencella();
}
inline void CoordinateFrame::clear_referencella() {
  if (referencella_ != nullptr) referencella_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::simData::Reference& CoordinateFrame::_internal_referencella() const {
  const ::simData::Reference* p = referencella_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::Reference&>(
      ::simData::_Reference_default_instance_);
}
inline const ::simData::Reference& CoordinateFrame::referencella() const {
  // @@protoc_insertion_point(field_get:simData.CoordinateFrame.referenceLla)
  return _internal_referencella();
}
inline void CoordinateFrame::unsafe_arena_set_allocated_referencella(
    ::simData::Reference* referencella) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(referencella_);
  }
  referencella_ = referencella;
  if (referencella) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.CoordinateFrame.referenceLla)
}
inline ::simData::Reference* CoordinateFrame::release_referencella() {
  _has_bits_[0] &= ~0x00000001u;
  ::simData::Reference* temp = referencella_;
  referencella_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::Reference* CoordinateFrame::unsafe_arena_release_referencella() {
  // @@protoc_insertion_point(field_release:simData.CoordinateFrame.referenceLla)
  _has_bits_[0] &= ~0x00000001u;
  ::simData::Reference* temp = referencella_;
  referencella_ = nullptr;
  return temp;
}
inline ::simData::Reference* CoordinateFrame::_internal_mutable_referencella() {
  _has_bits_[0] |= 0x00000001u;
  if (referencella_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::Reference>(GetArena());
    referencella_ = p;
  }
  return referencella_;
}
inline ::simData::Reference* CoordinateFrame::mutable_referencella() {
  // @@protoc_insertion_point(field_mutable:simData.CoordinateFrame.referenceLla)
  return _internal_mutable_referencella();
}
inline void CoordinateFrame::set_allocated_referencella(::simData::Reference* referencella) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete referencella_;
  }
  if (referencella) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(referencella);
    if (message_arena != submessage_arena) {
      referencella = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, referencella, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  referencella_ = referencella;
  // @@protoc_insertion_point(field_set_allocated:simData.CoordinateFrame.referenceLla)
}

// optional .simData.MagneticVariance magneticVariance = 3;
inline bool CoordinateFrame::_internal_has_magneticvariance() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CoordinateFrame::has_magneticvariance() const {
  return _internal_has_magneticvariance();
}
inline void CoordinateFrame::clear_magneticvariance() {
  magneticvariance_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::simData::MagneticVariance CoordinateFrame::_internal_magneticvariance() const {
  return static_cast< ::simData::MagneticVariance >(magneticvariance_);
}
inline ::simData::MagneticVariance CoordinateFrame::magneticvariance() const {
  // @@protoc_insertion_point(field_get:simData.CoordinateFrame.magneticVariance)
  return _internal_magneticvariance();
}
inline void CoordinateFrame::_internal_set_magneticvariance(::simData::MagneticVariance value) {
  assert(::simData::MagneticVariance_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  magneticvariance_ = value;
}
inline void CoordinateFrame::set_magneticvariance(::simData::MagneticVariance value) {
  _internal_set_magneticvariance(value);
  // @@protoc_insertion_point(field_set:simData.CoordinateFrame.magneticVariance)
}

// optional double magneticVarianceUserValue = 4;
inline bool CoordinateFrame::_internal_has_magneticvarianceuservalue() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CoordinateFrame::has_magneticvarianceuservalue() const {
  return _internal_has_magneticvarianceuservalue();
}
inline void CoordinateFrame::clear_magneticvarianceuservalue() {
  magneticvarianceuservalue_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double CoordinateFrame::_internal_magneticvarianceuservalue() const {
  return magneticvarianceuservalue_;
}
inline double CoordinateFrame::magneticvarianceuservalue() const {
  // @@protoc_insertion_point(field_get:simData.CoordinateFrame.magneticVarianceUserValue)
  return _internal_magneticvarianceuservalue();
}
inline void CoordinateFrame::_internal_set_magneticvarianceuservalue(double value) {
  _has_bits_[0] |= 0x00000004u;
  magneticvarianceuservalue_ = value;
}
inline void CoordinateFrame::set_magneticvarianceuservalue(double value) {
  _internal_set_magneticvarianceuservalue(value);
  // @@protoc_insertion_point(field_set:simData.CoordinateFrame.magneticVarianceUserValue)
}

// optional .simData.VerticalDatum verticalDatum = 5;
inline bool CoordinateFrame::_internal_has_verticaldatum() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CoordinateFrame::has_verticaldatum() const {
  return _internal_has_verticaldatum();
}
inline void CoordinateFrame::clear_verticaldatum() {
  verticaldatum_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::simData::VerticalDatum CoordinateFrame::_internal_verticaldatum() const {
  return static_cast< ::simData::VerticalDatum >(verticaldatum_);
}
inline ::simData::VerticalDatum CoordinateFrame::verticaldatum() const {
  // @@protoc_insertion_point(field_get:simData.CoordinateFrame.verticalDatum)
  return _internal_verticaldatum();
}
inline void CoordinateFrame::_internal_set_verticaldatum(::simData::VerticalDatum value) {
  assert(::simData::VerticalDatum_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  verticaldatum_ = value;
}
inline void CoordinateFrame::set_verticaldatum(::simData::VerticalDatum value) {
  _internal_set_verticaldatum(value);
  // @@protoc_insertion_point(field_set:simData.CoordinateFrame.verticalDatum)
}

// optional double verticalDatumUserValue = 6;
inline bool CoordinateFrame::_internal_has_verticaldatumuservalue() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CoordinateFrame::has_verticaldatumuservalue() const {
  return _internal_has_verticaldatumuservalue();
}
inline void CoordinateFrame::clear_verticaldatumuservalue() {
  verticaldatumuservalue_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CoordinateFrame::_internal_verticaldatumuservalue() const {
  return verticaldatumuservalue_;
}
inline double CoordinateFrame::verticaldatumuservalue() const {
  // @@protoc_insertion_point(field_get:simData.CoordinateFrame.verticalDatumUserValue)
  return _internal_verticaldatumuservalue();
}
inline void CoordinateFrame::_internal_set_verticaldatumuservalue(double value) {
  _has_bits_[0] |= 0x00000008u;
  verticaldatumuservalue_ = value;
}
inline void CoordinateFrame::set_verticaldatumuservalue(double value) {
  _internal_set_verticaldatumuservalue(value);
  // @@protoc_insertion_point(field_set:simData.CoordinateFrame.verticalDatumUserValue)
}

// optional double eciReferenceTime = 7;
inline bool CoordinateFrame::_internal_has_ecireferencetime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CoordinateFrame::has_ecireferencetime() const {
  return _internal_has_ecireferencetime();
}
inline void CoordinateFrame::clear_ecireferencetime() {
  ecireferencetime_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CoordinateFrame::_internal_ecireferencetime() const {
  return ecireferencetime_;
}
inline double CoordinateFrame::ecireferencetime() const {
  // @@protoc_insertion_point(field_get:simData.CoordinateFrame.eciReferenceTime)
  return _internal_ecireferencetime();
}
inline void CoordinateFrame::_internal_set_ecireferencetime(double value) {
  _has_bits_[0] |= 0x00000010u;
  ecireferencetime_ = value;
}
inline void CoordinateFrame::set_ecireferencetime(double value) {
  _internal_set_ecireferencetime(value);
  // @@protoc_insertion_point(field_set:simData.CoordinateFrame.eciReferenceTime)
}

// optional .simData.CoordinateFrame.TangentPlaneOffsets tangentPlaneOffset = 8;
inline bool CoordinateFrame::_internal_has_tangentplaneoffset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tangentplaneoffset_ != nullptr);
  return value;
}
inline bool CoordinateFrame::has_tangentplaneoffset() const {
  return _internal_has_tangentplaneoffset();
}
inline void CoordinateFrame::clear_tangentplaneoffset() {
  if (tangentplaneoffset_ != nullptr) tangentplaneoffset_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::simData::CoordinateFrame_TangentPlaneOffsets& CoordinateFrame::_internal_tangentplaneoffset() const {
  const ::simData::CoordinateFrame_TangentPlaneOffsets* p = tangentplaneoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::CoordinateFrame_TangentPlaneOffsets&>(
      ::simData::_CoordinateFrame_TangentPlaneOffsets_default_instance_);
}
inline const ::simData::CoordinateFrame_TangentPlaneOffsets& CoordinateFrame::tangentplaneoffset() const {
  // @@protoc_insertion_point(field_get:simData.CoordinateFrame.tangentPlaneOffset)
  return _internal_tangentplaneoffset();
}
inline void CoordinateFrame::unsafe_arena_set_allocated_tangentplaneoffset(
    ::simData::CoordinateFrame_TangentPlaneOffsets* tangentplaneoffset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tangentplaneoffset_);
  }
  tangentplaneoffset_ = tangentplaneoffset;
  if (tangentplaneoffset) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.CoordinateFrame.tangentPlaneOffset)
}
inline ::simData::CoordinateFrame_TangentPlaneOffsets* CoordinateFrame::release_tangentplaneoffset() {
  _has_bits_[0] &= ~0x00000002u;
  ::simData::CoordinateFrame_TangentPlaneOffsets* temp = tangentplaneoffset_;
  tangentplaneoffset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::CoordinateFrame_TangentPlaneOffsets* CoordinateFrame::unsafe_arena_release_tangentplaneoffset() {
  // @@protoc_insertion_point(field_release:simData.CoordinateFrame.tangentPlaneOffset)
  _has_bits_[0] &= ~0x00000002u;
  ::simData::CoordinateFrame_TangentPlaneOffsets* temp = tangentplaneoffset_;
  tangentplaneoffset_ = nullptr;
  return temp;
}
inline ::simData::CoordinateFrame_TangentPlaneOffsets* CoordinateFrame::_internal_mutable_tangentplaneoffset() {
  _has_bits_[0] |= 0x00000002u;
  if (tangentplaneoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::CoordinateFrame_TangentPlaneOffsets>(GetArena());
    tangentplaneoffset_ = p;
  }
  return tangentplaneoffset_;
}
inline ::simData::CoordinateFrame_TangentPlaneOffsets* CoordinateFrame::mutable_tangentplaneoffset() {
  // @@protoc_insertion_point(field_mutable:simData.CoordinateFrame.tangentPlaneOffset)
  return _internal_mutable_tangentplaneoffset();
}
inline void CoordinateFrame::set_allocated_tangentplaneoffset(::simData::CoordinateFrame_TangentPlaneOffsets* tangentplaneoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tangentplaneoffset_;
  }
  if (tangentplaneoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tangentplaneoffset);
    if (message_arena != submessage_arena) {
      tangentplaneoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tangentplaneoffset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tangentplaneoffset_ = tangentplaneoffset;
  // @@protoc_insertion_point(field_set_allocated:simData.CoordinateFrame.tangentPlaneOffset)
}

// -------------------------------------------------------------------

// TimeTickPrefs

// optional .simData.TimeTickPrefs.DrawStyle drawStyle = 1 [default = NONE];
inline bool TimeTickPrefs::_internal_has_drawstyle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TimeTickPrefs::has_drawstyle() const {
  return _internal_has_drawstyle();
}
inline void TimeTickPrefs::clear_drawstyle() {
  drawstyle_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::simData::TimeTickPrefs_DrawStyle TimeTickPrefs::_internal_drawstyle() const {
  return static_cast< ::simData::TimeTickPrefs_DrawStyle >(drawstyle_);
}
inline ::simData::TimeTickPrefs_DrawStyle TimeTickPrefs::drawstyle() const {
  // @@protoc_insertion_point(field_get:simData.TimeTickPrefs.drawStyle)
  return _internal_drawstyle();
}
inline void TimeTickPrefs::_internal_set_drawstyle(::simData::TimeTickPrefs_DrawStyle value) {
  assert(::simData::TimeTickPrefs_DrawStyle_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  drawstyle_ = value;
}
inline void TimeTickPrefs::set_drawstyle(::simData::TimeTickPrefs_DrawStyle value) {
  _internal_set_drawstyle(value);
  // @@protoc_insertion_point(field_set:simData.TimeTickPrefs.drawStyle)
}

// optional fixed32 color = 2 [default = 4294967193];
inline bool TimeTickPrefs::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TimeTickPrefs::has_color() const {
  return _internal_has_color();
}
inline void TimeTickPrefs::clear_color() {
  color_ = 4294967193u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTickPrefs::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTickPrefs::color() const {
  // @@protoc_insertion_point(field_get:simData.TimeTickPrefs.color)
  return _internal_color();
}
inline void TimeTickPrefs::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  color_ = value;
}
inline void TimeTickPrefs::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:simData.TimeTickPrefs.color)
}

// optional double interval = 3 [default = 10];
inline bool TimeTickPrefs::_internal_has_interval() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TimeTickPrefs::has_interval() const {
  return _internal_has_interval();
}
inline void TimeTickPrefs::clear_interval() {
  interval_ = 10;
  _has_bits_[0] &= ~0x00000008u;
}
inline double TimeTickPrefs::_internal_interval() const {
  return interval_;
}
inline double TimeTickPrefs::interval() const {
  // @@protoc_insertion_point(field_get:simData.TimeTickPrefs.interval)
  return _internal_interval();
}
inline void TimeTickPrefs::_internal_set_interval(double value) {
  _has_bits_[0] |= 0x00000008u;
  interval_ = value;
}
inline void TimeTickPrefs::set_interval(double value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:simData.TimeTickPrefs.interval)
}

// optional uint32 largeIntervalFactor = 4 [default = 6];
inline bool TimeTickPrefs::_internal_has_largeintervalfactor() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TimeTickPrefs::has_largeintervalfactor() const {
  return _internal_has_largeintervalfactor();
}
inline void TimeTickPrefs::clear_largeintervalfactor() {
  largeintervalfactor_ = 6u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTickPrefs::_internal_largeintervalfactor() const {
  return largeintervalfactor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTickPrefs::largeintervalfactor() const {
  // @@protoc_insertion_point(field_get:simData.TimeTickPrefs.largeIntervalFactor)
  return _internal_largeintervalfactor();
}
inline void TimeTickPrefs::_internal_set_largeintervalfactor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  largeintervalfactor_ = value;
}
inline void TimeTickPrefs::set_largeintervalfactor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_largeintervalfactor(value);
  // @@protoc_insertion_point(field_set:simData.TimeTickPrefs.largeIntervalFactor)
}

// optional uint32 labelIntervalFactor = 5 [default = 6];
inline bool TimeTickPrefs::_internal_has_labelintervalfactor() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TimeTickPrefs::has_labelintervalfactor() const {
  return _internal_has_labelintervalfactor();
}
inline void TimeTickPrefs::clear_labelintervalfactor() {
  labelintervalfactor_ = 6u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTickPrefs::_internal_labelintervalfactor() const {
  return labelintervalfactor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTickPrefs::labelintervalfactor() const {
  // @@protoc_insertion_point(field_get:simData.TimeTickPrefs.labelIntervalFactor)
  return _internal_labelintervalfactor();
}
inline void TimeTickPrefs::_internal_set_labelintervalfactor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  labelintervalfactor_ = value;
}
inline void TimeTickPrefs::set_labelintervalfactor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_labelintervalfactor(value);
  // @@protoc_insertion_point(field_set:simData.TimeTickPrefs.labelIntervalFactor)
}

// optional string labelFontName = 6 [default = "arial.ttf"];
inline bool TimeTickPrefs::_internal_has_labelfontname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TimeTickPrefs::has_labelfontname() const {
  return _internal_has_labelfontname();
}
inline void TimeTickPrefs::clear_labelfontname() {
  labelfontname_.ClearToDefault(::simData::TimeTickPrefs::_i_give_permission_to_break_this_code_default_labelfontname_, GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TimeTickPrefs::labelfontname() const {
  // @@protoc_insertion_point(field_get:simData.TimeTickPrefs.labelFontName)
  if (labelfontname_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_labelfontname_.get();
  return _internal_labelfontname();
}
inline void TimeTickPrefs::set_labelfontname(const std::string& value) {
  _internal_set_labelfontname(value);
  // @@protoc_insertion_point(field_set:simData.TimeTickPrefs.labelFontName)
}
inline std::string* TimeTickPrefs::mutable_labelfontname() {
  // @@protoc_insertion_point(field_mutable:simData.TimeTickPrefs.labelFontName)
  return _internal_mutable_labelfontname();
}
inline const std::string& TimeTickPrefs::_internal_labelfontname() const {
  return labelfontname_.Get();
}
inline void TimeTickPrefs::_internal_set_labelfontname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  labelfontname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void TimeTickPrefs::set_labelfontname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  labelfontname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.TimeTickPrefs.labelFontName)
}
inline void TimeTickPrefs::set_labelfontname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  labelfontname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.TimeTickPrefs.labelFontName)
}
inline void TimeTickPrefs::set_labelfontname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  labelfontname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.TimeTickPrefs.labelFontName)
}
inline std::string* TimeTickPrefs::_internal_mutable_labelfontname() {
  _has_bits_[0] |= 0x00000001u;
  return labelfontname_.Mutable(::simData::TimeTickPrefs::_i_give_permission_to_break_this_code_default_labelfontname_, GetArena());
}
inline std::string* TimeTickPrefs::release_labelfontname() {
  // @@protoc_insertion_point(field_release:simData.TimeTickPrefs.labelFontName)
  if (!_internal_has_labelfontname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return labelfontname_.ReleaseNonDefault(nullptr, GetArena());
}
inline void TimeTickPrefs::set_allocated_labelfontname(std::string* labelfontname) {
  if (labelfontname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  labelfontname_.SetAllocated(nullptr, labelfontname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.TimeTickPrefs.labelFontName)
}

// optional fixed32 labelFontPointSize = 7 [default = 12];
inline bool TimeTickPrefs::_internal_has_labelfontpointsize() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TimeTickPrefs::has_labelfontpointsize() const {
  return _internal_has_labelfontpointsize();
}
inline void TimeTickPrefs::clear_labelfontpointsize() {
  labelfontpointsize_ = 12u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTickPrefs::_internal_labelfontpointsize() const {
  return labelfontpointsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTickPrefs::labelfontpointsize() const {
  // @@protoc_insertion_point(field_get:simData.TimeTickPrefs.labelFontPointSize)
  return _internal_labelfontpointsize();
}
inline void TimeTickPrefs::_internal_set_labelfontpointsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  labelfontpointsize_ = value;
}
inline void TimeTickPrefs::set_labelfontpointsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_labelfontpointsize(value);
  // @@protoc_insertion_point(field_set:simData.TimeTickPrefs.labelFontPointSize)
}

// optional fixed32 labelColor = 13 [default = 0];
inline bool TimeTickPrefs::_internal_has_labelcolor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TimeTickPrefs::has_labelcolor() const {
  return _internal_has_labelcolor();
}
inline void TimeTickPrefs::clear_labelcolor() {
  labelcolor_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTickPrefs::_internal_labelcolor() const {
  return labelcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTickPrefs::labelcolor() const {
  // @@protoc_insertion_point(field_get:simData.TimeTickPrefs.labelColor)
  return _internal_labelcolor();
}
inline void TimeTickPrefs::_internal_set_labelcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  labelcolor_ = value;
}
inline void TimeTickPrefs::set_labelcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_labelcolor(value);
  // @@protoc_insertion_point(field_set:simData.TimeTickPrefs.labelColor)
}

// optional double lineLength = 8 [default = 40];
inline bool TimeTickPrefs::_internal_has_linelength() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TimeTickPrefs::has_linelength() const {
  return _internal_has_linelength();
}
inline void TimeTickPrefs::clear_linelength() {
  linelength_ = 40;
  _has_bits_[0] &= ~0x00000100u;
}
inline double TimeTickPrefs::_internal_linelength() const {
  return linelength_;
}
inline double TimeTickPrefs::linelength() const {
  // @@protoc_insertion_point(field_get:simData.TimeTickPrefs.lineLength)
  return _internal_linelength();
}
inline void TimeTickPrefs::_internal_set_linelength(double value) {
  _has_bits_[0] |= 0x00000100u;
  linelength_ = value;
}
inline void TimeTickPrefs::set_linelength(double value) {
  _internal_set_linelength(value);
  // @@protoc_insertion_point(field_set:simData.TimeTickPrefs.lineLength)
}

// optional uint32 largeSizeFactor = 9 [default = 2];
inline bool TimeTickPrefs::_internal_has_largesizefactor() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TimeTickPrefs::has_largesizefactor() const {
  return _internal_has_largesizefactor();
}
inline void TimeTickPrefs::clear_largesizefactor() {
  largesizefactor_ = 2u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTickPrefs::_internal_largesizefactor() const {
  return largesizefactor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTickPrefs::largesizefactor() const {
  // @@protoc_insertion_point(field_get:simData.TimeTickPrefs.largeSizeFactor)
  return _internal_largesizefactor();
}
inline void TimeTickPrefs::_internal_set_largesizefactor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  largesizefactor_ = value;
}
inline void TimeTickPrefs::set_largesizefactor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_largesizefactor(value);
  // @@protoc_insertion_point(field_set:simData.TimeTickPrefs.largeSizeFactor)
}

// optional .simData.ElapsedTimeFormat labelTimeFormat = 10 [default = ELAPSED_HOURS];
inline bool TimeTickPrefs::_internal_has_labeltimeformat() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TimeTickPrefs::has_labeltimeformat() const {
  return _internal_has_labeltimeformat();
}
inline void TimeTickPrefs::clear_labeltimeformat() {
  labeltimeformat_ = 3;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::simData::ElapsedTimeFormat TimeTickPrefs::_internal_labeltimeformat() const {
  return static_cast< ::simData::ElapsedTimeFormat >(labeltimeformat_);
}
inline ::simData::ElapsedTimeFormat TimeTickPrefs::labeltimeformat() const {
  // @@protoc_insertion_point(field_get:simData.TimeTickPrefs.labelTimeFormat)
  return _internal_labeltimeformat();
}
inline void TimeTickPrefs::_internal_set_labeltimeformat(::simData::ElapsedTimeFormat value) {
  assert(::simData::ElapsedTimeFormat_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  labeltimeformat_ = value;
}
inline void TimeTickPrefs::set_labeltimeformat(::simData::ElapsedTimeFormat value) {
  _internal_set_labeltimeformat(value);
  // @@protoc_insertion_point(field_set:simData.TimeTickPrefs.labelTimeFormat)
}

// optional double lineWidth = 11 [default = 2];
inline bool TimeTickPrefs::_internal_has_linewidth() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TimeTickPrefs::has_linewidth() const {
  return _internal_has_linewidth();
}
inline void TimeTickPrefs::clear_linewidth() {
  linewidth_ = 2;
  _has_bits_[0] &= ~0x00000800u;
}
inline double TimeTickPrefs::_internal_linewidth() const {
  return linewidth_;
}
inline double TimeTickPrefs::linewidth() const {
  // @@protoc_insertion_point(field_get:simData.TimeTickPrefs.lineWidth)
  return _internal_linewidth();
}
inline void TimeTickPrefs::_internal_set_linewidth(double value) {
  _has_bits_[0] |= 0x00000800u;
  linewidth_ = value;
}
inline void TimeTickPrefs::set_linewidth(double value) {
  _internal_set_linewidth(value);
  // @@protoc_insertion_point(field_set:simData.TimeTickPrefs.lineWidth)
}

// -------------------------------------------------------------------

// TrackPrefs

// optional fixed32 trackColor = 1 [default = 4227595263];
inline bool TrackPrefs::_internal_has_trackcolor() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrackPrefs::has_trackcolor() const {
  return _internal_has_trackcolor();
}
inline void TrackPrefs::clear_trackcolor() {
  trackcolor_ = 4227595263u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackPrefs::_internal_trackcolor() const {
  return trackcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackPrefs::trackcolor() const {
  // @@protoc_insertion_point(field_get:simData.TrackPrefs.trackColor)
  return _internal_trackcolor();
}
inline void TrackPrefs::_internal_set_trackcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  trackcolor_ = value;
}
inline void TrackPrefs::set_trackcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trackcolor(value);
  // @@protoc_insertion_point(field_set:simData.TrackPrefs.trackColor)
}

// optional bool multiTrackColor = 2 [default = true];
inline bool TrackPrefs::_internal_has_multitrackcolor() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TrackPrefs::has_multitrackcolor() const {
  return _internal_has_multitrackcolor();
}
inline void TrackPrefs::clear_multitrackcolor() {
  multitrackcolor_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool TrackPrefs::_internal_multitrackcolor() const {
  return multitrackcolor_;
}
inline bool TrackPrefs::multitrackcolor() const {
  // @@protoc_insertion_point(field_get:simData.TrackPrefs.multiTrackColor)
  return _internal_multitrackcolor();
}
inline void TrackPrefs::_internal_set_multitrackcolor(bool value) {
  _has_bits_[0] |= 0x00000100u;
  multitrackcolor_ = value;
}
inline void TrackPrefs::set_multitrackcolor(bool value) {
  _internal_set_multitrackcolor(value);
  // @@protoc_insertion_point(field_set:simData.TrackPrefs.multiTrackColor)
}

// optional bool flatMode = 3 [default = false];
inline bool TrackPrefs::_internal_has_flatmode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackPrefs::has_flatmode() const {
  return _internal_has_flatmode();
}
inline void TrackPrefs::clear_flatmode() {
  flatmode_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TrackPrefs::_internal_flatmode() const {
  return flatmode_;
}
inline bool TrackPrefs::flatmode() const {
  // @@protoc_insertion_point(field_get:simData.TrackPrefs.flatMode)
  return _internal_flatmode();
}
inline void TrackPrefs::_internal_set_flatmode(bool value) {
  _has_bits_[0] |= 0x00000002u;
  flatmode_ = value;
}
inline void TrackPrefs::set_flatmode(bool value) {
  _internal_set_flatmode(value);
  // @@protoc_insertion_point(field_set:simData.TrackPrefs.flatMode)
}

// optional bool altMode = 4 [default = false];
inline bool TrackPrefs::_internal_has_altmode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackPrefs::has_altmode() const {
  return _internal_has_altmode();
}
inline void TrackPrefs::clear_altmode() {
  altmode_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TrackPrefs::_internal_altmode() const {
  return altmode_;
}
inline bool TrackPrefs::altmode() const {
  // @@protoc_insertion_point(field_get:simData.TrackPrefs.altMode)
  return _internal_altmode();
}
inline void TrackPrefs::_internal_set_altmode(bool value) {
  _has_bits_[0] |= 0x00000004u;
  altmode_ = value;
}
inline void TrackPrefs::set_altmode(bool value) {
  _internal_set_altmode(value);
  // @@protoc_insertion_point(field_set:simData.TrackPrefs.altMode)
}

// optional bool expireMode = 5 [default = false];
inline bool TrackPrefs::_internal_has_expiremode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackPrefs::has_expiremode() const {
  return _internal_has_expiremode();
}
inline void TrackPrefs::clear_expiremode() {
  expiremode_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TrackPrefs::_internal_expiremode() const {
  return expiremode_;
}
inline bool TrackPrefs::expiremode() const {
  // @@protoc_insertion_point(field_get:simData.TrackPrefs.expireMode)
  return _internal_expiremode();
}
inline void TrackPrefs::_internal_set_expiremode(bool value) {
  _has_bits_[0] |= 0x00000008u;
  expiremode_ = value;
}
inline void TrackPrefs::set_expiremode(bool value) {
  _internal_set_expiremode(value);
  // @@protoc_insertion_point(field_set:simData.TrackPrefs.expireMode)
}

// optional bool usePlatformColor = 6 [default = false];
inline bool TrackPrefs::_internal_has_useplatformcolor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrackPrefs::has_useplatformcolor() const {
  return _internal_has_useplatformcolor();
}
inline void TrackPrefs::clear_useplatformcolor() {
  useplatformcolor_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TrackPrefs::_internal_useplatformcolor() const {
  return useplatformcolor_;
}
inline bool TrackPrefs::useplatformcolor() const {
  // @@protoc_insertion_point(field_get:simData.TrackPrefs.usePlatformColor)
  return _internal_useplatformcolor();
}
inline void TrackPrefs::_internal_set_useplatformcolor(bool value) {
  _has_bits_[0] |= 0x00000010u;
  useplatformcolor_ = value;
}
inline void TrackPrefs::set_useplatformcolor(bool value) {
  _internal_set_useplatformcolor(value);
  // @@protoc_insertion_point(field_set:simData.TrackPrefs.usePlatformColor)
}

// optional bool useTrackOverrideColor = 7 [default = false];
inline bool TrackPrefs::_internal_has_usetrackoverridecolor() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrackPrefs::has_usetrackoverridecolor() const {
  return _internal_has_usetrackoverridecolor();
}
inline void TrackPrefs::clear_usetrackoverridecolor() {
  usetrackoverridecolor_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TrackPrefs::_internal_usetrackoverridecolor() const {
  return usetrackoverridecolor_;
}
inline bool TrackPrefs::usetrackoverridecolor() const {
  // @@protoc_insertion_point(field_get:simData.TrackPrefs.useTrackOverrideColor)
  return _internal_usetrackoverridecolor();
}
inline void TrackPrefs::_internal_set_usetrackoverridecolor(bool value) {
  _has_bits_[0] |= 0x00000020u;
  usetrackoverridecolor_ = value;
}
inline void TrackPrefs::set_usetrackoverridecolor(bool value) {
  _internal_set_usetrackoverridecolor(value);
  // @@protoc_insertion_point(field_set:simData.TrackPrefs.useTrackOverrideColor)
}

// optional fixed32 trackOverrideColor = 8 [default = 434438399];
inline bool TrackPrefs::_internal_has_trackoverridecolor() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TrackPrefs::has_trackoverridecolor() const {
  return _internal_has_trackoverridecolor();
}
inline void TrackPrefs::clear_trackoverridecolor() {
  trackoverridecolor_ = 434438399u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackPrefs::_internal_trackoverridecolor() const {
  return trackoverridecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackPrefs::trackoverridecolor() const {
  // @@protoc_insertion_point(field_get:simData.TrackPrefs.trackOverrideColor)
  return _internal_trackoverridecolor();
}
inline void TrackPrefs::_internal_set_trackoverridecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  trackoverridecolor_ = value;
}
inline void TrackPrefs::set_trackoverridecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trackoverridecolor(value);
  // @@protoc_insertion_point(field_set:simData.TrackPrefs.trackOverrideColor)
}

// optional int32 trackLength = 9 [default = 60];
inline bool TrackPrefs::_internal_has_tracklength() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TrackPrefs::has_tracklength() const {
  return _internal_has_tracklength();
}
inline void TrackPrefs::clear_tracklength() {
  tracklength_ = 60;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPrefs::_internal_tracklength() const {
  return tracklength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPrefs::tracklength() const {
  // @@protoc_insertion_point(field_get:simData.TrackPrefs.trackLength)
  return _internal_tracklength();
}
inline void TrackPrefs::_internal_set_tracklength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  tracklength_ = value;
}
inline void TrackPrefs::set_tracklength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tracklength(value);
  // @@protoc_insertion_point(field_set:simData.TrackPrefs.trackLength)
}

// optional double lineWidth = 10 [default = 1];
inline bool TrackPrefs::_internal_has_linewidth() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TrackPrefs::has_linewidth() const {
  return _internal_has_linewidth();
}
inline void TrackPrefs::clear_linewidth() {
  linewidth_ = 1;
  _has_bits_[0] &= ~0x00000800u;
}
inline double TrackPrefs::_internal_linewidth() const {
  return linewidth_;
}
inline double TrackPrefs::linewidth() const {
  // @@protoc_insertion_point(field_get:simData.TrackPrefs.lineWidth)
  return _internal_linewidth();
}
inline void TrackPrefs::_internal_set_linewidth(double value) {
  _has_bits_[0] |= 0x00000800u;
  linewidth_ = value;
}
inline void TrackPrefs::set_linewidth(double value) {
  _internal_set_linewidth(value);
  // @@protoc_insertion_point(field_set:simData.TrackPrefs.lineWidth)
}

// optional .simData.TrackPrefs.Mode trackDrawMode = 11 [default = POINT];
inline bool TrackPrefs::_internal_has_trackdrawmode() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrackPrefs::has_trackdrawmode() const {
  return _internal_has_trackdrawmode();
}
inline void TrackPrefs::clear_trackdrawmode() {
  trackdrawmode_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::simData::TrackPrefs_Mode TrackPrefs::_internal_trackdrawmode() const {
  return static_cast< ::simData::TrackPrefs_Mode >(trackdrawmode_);
}
inline ::simData::TrackPrefs_Mode TrackPrefs::trackdrawmode() const {
  // @@protoc_insertion_point(field_get:simData.TrackPrefs.trackDrawMode)
  return _internal_trackdrawmode();
}
inline void TrackPrefs::_internal_set_trackdrawmode(::simData::TrackPrefs_Mode value) {
  assert(::simData::TrackPrefs_Mode_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  trackdrawmode_ = value;
}
inline void TrackPrefs::set_trackdrawmode(::simData::TrackPrefs_Mode value) {
  _internal_set_trackdrawmode(value);
  // @@protoc_insertion_point(field_set:simData.TrackPrefs.trackDrawMode)
}

// optional .simData.TimeTickPrefs timeTicks = 12;
inline bool TrackPrefs::_internal_has_timeticks() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || timeticks_ != nullptr);
  return value;
}
inline bool TrackPrefs::has_timeticks() const {
  return _internal_has_timeticks();
}
inline void TrackPrefs::clear_timeticks() {
  if (timeticks_ != nullptr) timeticks_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::simData::TimeTickPrefs& TrackPrefs::_internal_timeticks() const {
  const ::simData::TimeTickPrefs* p = timeticks_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::TimeTickPrefs&>(
      ::simData::_TimeTickPrefs_default_instance_);
}
inline const ::simData::TimeTickPrefs& TrackPrefs::timeticks() const {
  // @@protoc_insertion_point(field_get:simData.TrackPrefs.timeTicks)
  return _internal_timeticks();
}
inline void TrackPrefs::unsafe_arena_set_allocated_timeticks(
    ::simData::TimeTickPrefs* timeticks) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeticks_);
  }
  timeticks_ = timeticks;
  if (timeticks) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.TrackPrefs.timeTicks)
}
inline ::simData::TimeTickPrefs* TrackPrefs::release_timeticks() {
  _has_bits_[0] &= ~0x00000001u;
  ::simData::TimeTickPrefs* temp = timeticks_;
  timeticks_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::TimeTickPrefs* TrackPrefs::unsafe_arena_release_timeticks() {
  // @@protoc_insertion_point(field_release:simData.TrackPrefs.timeTicks)
  _has_bits_[0] &= ~0x00000001u;
  ::simData::TimeTickPrefs* temp = timeticks_;
  timeticks_ = nullptr;
  return temp;
}
inline ::simData::TimeTickPrefs* TrackPrefs::_internal_mutable_timeticks() {
  _has_bits_[0] |= 0x00000001u;
  if (timeticks_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::TimeTickPrefs>(GetArena());
    timeticks_ = p;
  }
  return timeticks_;
}
inline ::simData::TimeTickPrefs* TrackPrefs::mutable_timeticks() {
  // @@protoc_insertion_point(field_mutable:simData.TrackPrefs.timeTicks)
  return _internal_mutable_timeticks();
}
inline void TrackPrefs::set_allocated_timeticks(::simData::TimeTickPrefs* timeticks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete timeticks_;
  }
  if (timeticks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timeticks);
    if (message_arena != submessage_arena) {
      timeticks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeticks, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timeticks_ = timeticks;
  // @@protoc_insertion_point(field_set_allocated:simData.TrackPrefs.timeTicks)
}

// -------------------------------------------------------------------

// LabelPrefs_DisplayFields

// optional bool xLat = 1 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_xlat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_xlat() const {
  return _internal_has_xlat();
}
inline void LabelPrefs_DisplayFields::clear_xlat() {
  xlat_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LabelPrefs_DisplayFields::_internal_xlat() const {
  return xlat_;
}
inline bool LabelPrefs_DisplayFields::xlat() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.xLat)
  return _internal_xlat();
}
inline void LabelPrefs_DisplayFields::_internal_set_xlat(bool value) {
  _has_bits_[0] |= 0x00000002u;
  xlat_ = value;
}
inline void LabelPrefs_DisplayFields::set_xlat(bool value) {
  _internal_set_xlat(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.xLat)
}

// optional bool yLon = 2 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_ylon() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_ylon() const {
  return _internal_has_ylon();
}
inline void LabelPrefs_DisplayFields::clear_ylon() {
  ylon_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool LabelPrefs_DisplayFields::_internal_ylon() const {
  return ylon_;
}
inline bool LabelPrefs_DisplayFields::ylon() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.yLon)
  return _internal_ylon();
}
inline void LabelPrefs_DisplayFields::_internal_set_ylon(bool value) {
  _has_bits_[0] |= 0x00000004u;
  ylon_ = value;
}
inline void LabelPrefs_DisplayFields::set_ylon(bool value) {
  _internal_set_ylon(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.yLon)
}

// optional bool zAlt = 3 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_zalt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_zalt() const {
  return _internal_has_zalt();
}
inline void LabelPrefs_DisplayFields::clear_zalt() {
  zalt_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool LabelPrefs_DisplayFields::_internal_zalt() const {
  return zalt_;
}
inline bool LabelPrefs_DisplayFields::zalt() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.zAlt)
  return _internal_zalt();
}
inline void LabelPrefs_DisplayFields::_internal_set_zalt(bool value) {
  _has_bits_[0] |= 0x00000008u;
  zalt_ = value;
}
inline void LabelPrefs_DisplayFields::set_zalt(bool value) {
  _internal_set_zalt(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.zAlt)
}

// optional bool genericData = 4 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_genericdata() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_genericdata() const {
  return _internal_has_genericdata();
}
inline void LabelPrefs_DisplayFields::clear_genericdata() {
  genericdata_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LabelPrefs_DisplayFields::_internal_genericdata() const {
  return genericdata_;
}
inline bool LabelPrefs_DisplayFields::genericdata() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.genericData)
  return _internal_genericdata();
}
inline void LabelPrefs_DisplayFields::_internal_set_genericdata(bool value) {
  _has_bits_[0] |= 0x00000010u;
  genericdata_ = value;
}
inline void LabelPrefs_DisplayFields::set_genericdata(bool value) {
  _internal_set_genericdata(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.genericData)
}

// optional bool categoryData = 5 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_categorydata() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_categorydata() const {
  return _internal_has_categorydata();
}
inline void LabelPrefs_DisplayFields::clear_categorydata() {
  categorydata_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool LabelPrefs_DisplayFields::_internal_categorydata() const {
  return categorydata_;
}
inline bool LabelPrefs_DisplayFields::categorydata() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.categoryData)
  return _internal_categorydata();
}
inline void LabelPrefs_DisplayFields::_internal_set_categorydata(bool value) {
  _has_bits_[0] |= 0x00000020u;
  categorydata_ = value;
}
inline void LabelPrefs_DisplayFields::set_categorydata(bool value) {
  _internal_set_categorydata(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.categoryData)
}

// optional bool yaw = 6 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_yaw() const {
  return _internal_has_yaw();
}
inline void LabelPrefs_DisplayFields::clear_yaw() {
  yaw_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool LabelPrefs_DisplayFields::_internal_yaw() const {
  return yaw_;
}
inline bool LabelPrefs_DisplayFields::yaw() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.yaw)
  return _internal_yaw();
}
inline void LabelPrefs_DisplayFields::_internal_set_yaw(bool value) {
  _has_bits_[0] |= 0x00000040u;
  yaw_ = value;
}
inline void LabelPrefs_DisplayFields::set_yaw(bool value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.yaw)
}

// optional bool pitch = 7 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_pitch() const {
  return _internal_has_pitch();
}
inline void LabelPrefs_DisplayFields::clear_pitch() {
  pitch_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool LabelPrefs_DisplayFields::_internal_pitch() const {
  return pitch_;
}
inline bool LabelPrefs_DisplayFields::pitch() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.pitch)
  return _internal_pitch();
}
inline void LabelPrefs_DisplayFields::_internal_set_pitch(bool value) {
  _has_bits_[0] |= 0x00000080u;
  pitch_ = value;
}
inline void LabelPrefs_DisplayFields::set_pitch(bool value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.pitch)
}

// optional bool roll = 8 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_roll() const {
  return _internal_has_roll();
}
inline void LabelPrefs_DisplayFields::clear_roll() {
  roll_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool LabelPrefs_DisplayFields::_internal_roll() const {
  return roll_;
}
inline bool LabelPrefs_DisplayFields::roll() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.roll)
  return _internal_roll();
}
inline void LabelPrefs_DisplayFields::_internal_set_roll(bool value) {
  _has_bits_[0] |= 0x00000100u;
  roll_ = value;
}
inline void LabelPrefs_DisplayFields::set_roll(bool value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.roll)
}

// optional bool course = 11 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_course() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_course() const {
  return _internal_has_course();
}
inline void LabelPrefs_DisplayFields::clear_course() {
  course_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool LabelPrefs_DisplayFields::_internal_course() const {
  return course_;
}
inline bool LabelPrefs_DisplayFields::course() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.course)
  return _internal_course();
}
inline void LabelPrefs_DisplayFields::_internal_set_course(bool value) {
  _has_bits_[0] |= 0x00000200u;
  course_ = value;
}
inline void LabelPrefs_DisplayFields::set_course(bool value) {
  _internal_set_course(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.course)
}

// optional bool flightPathElevation = 12 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_flightpathelevation() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_flightpathelevation() const {
  return _internal_has_flightpathelevation();
}
inline void LabelPrefs_DisplayFields::clear_flightpathelevation() {
  flightpathelevation_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool LabelPrefs_DisplayFields::_internal_flightpathelevation() const {
  return flightpathelevation_;
}
inline bool LabelPrefs_DisplayFields::flightpathelevation() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.flightPathElevation)
  return _internal_flightpathelevation();
}
inline void LabelPrefs_DisplayFields::_internal_set_flightpathelevation(bool value) {
  _has_bits_[0] |= 0x00000400u;
  flightpathelevation_ = value;
}
inline void LabelPrefs_DisplayFields::set_flightpathelevation(bool value) {
  _internal_set_flightpathelevation(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.flightPathElevation)
}

// optional bool displayVX = 13 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_displayvx() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_displayvx() const {
  return _internal_has_displayvx();
}
inline void LabelPrefs_DisplayFields::clear_displayvx() {
  displayvx_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool LabelPrefs_DisplayFields::_internal_displayvx() const {
  return displayvx_;
}
inline bool LabelPrefs_DisplayFields::displayvx() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.displayVX)
  return _internal_displayvx();
}
inline void LabelPrefs_DisplayFields::_internal_set_displayvx(bool value) {
  _has_bits_[0] |= 0x00000800u;
  displayvx_ = value;
}
inline void LabelPrefs_DisplayFields::set_displayvx(bool value) {
  _internal_set_displayvx(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.displayVX)
}

// optional bool displayVY = 14 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_displayvy() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_displayvy() const {
  return _internal_has_displayvy();
}
inline void LabelPrefs_DisplayFields::clear_displayvy() {
  displayvy_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool LabelPrefs_DisplayFields::_internal_displayvy() const {
  return displayvy_;
}
inline bool LabelPrefs_DisplayFields::displayvy() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.displayVY)
  return _internal_displayvy();
}
inline void LabelPrefs_DisplayFields::_internal_set_displayvy(bool value) {
  _has_bits_[0] |= 0x00001000u;
  displayvy_ = value;
}
inline void LabelPrefs_DisplayFields::set_displayvy(bool value) {
  _internal_set_displayvy(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.displayVY)
}

// optional bool displayVZ = 15 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_displayvz() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_displayvz() const {
  return _internal_has_displayvz();
}
inline void LabelPrefs_DisplayFields::clear_displayvz() {
  displayvz_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool LabelPrefs_DisplayFields::_internal_displayvz() const {
  return displayvz_;
}
inline bool LabelPrefs_DisplayFields::displayvz() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.displayVZ)
  return _internal_displayvz();
}
inline void LabelPrefs_DisplayFields::_internal_set_displayvz(bool value) {
  _has_bits_[0] |= 0x00002000u;
  displayvz_ = value;
}
inline void LabelPrefs_DisplayFields::set_displayvz(bool value) {
  _internal_set_displayvz(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.displayVZ)
}

// optional bool speed = 16 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_speed() const {
  return _internal_has_speed();
}
inline void LabelPrefs_DisplayFields::clear_speed() {
  speed_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool LabelPrefs_DisplayFields::_internal_speed() const {
  return speed_;
}
inline bool LabelPrefs_DisplayFields::speed() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.speed)
  return _internal_speed();
}
inline void LabelPrefs_DisplayFields::_internal_set_speed(bool value) {
  _has_bits_[0] |= 0x00004000u;
  speed_ = value;
}
inline void LabelPrefs_DisplayFields::set_speed(bool value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.speed)
}

// optional bool mach = 17 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_mach() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_mach() const {
  return _internal_has_mach();
}
inline void LabelPrefs_DisplayFields::clear_mach() {
  mach_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool LabelPrefs_DisplayFields::_internal_mach() const {
  return mach_;
}
inline bool LabelPrefs_DisplayFields::mach() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.mach)
  return _internal_mach();
}
inline void LabelPrefs_DisplayFields::_internal_set_mach(bool value) {
  _has_bits_[0] |= 0x00008000u;
  mach_ = value;
}
inline void LabelPrefs_DisplayFields::set_mach(bool value) {
  _internal_set_mach(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.mach)
}

// optional bool angleOfAttack = 18 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_angleofattack() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_angleofattack() const {
  return _internal_has_angleofattack();
}
inline void LabelPrefs_DisplayFields::clear_angleofattack() {
  angleofattack_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool LabelPrefs_DisplayFields::_internal_angleofattack() const {
  return angleofattack_;
}
inline bool LabelPrefs_DisplayFields::angleofattack() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.angleOfAttack)
  return _internal_angleofattack();
}
inline void LabelPrefs_DisplayFields::_internal_set_angleofattack(bool value) {
  _has_bits_[0] |= 0x00010000u;
  angleofattack_ = value;
}
inline void LabelPrefs_DisplayFields::set_angleofattack(bool value) {
  _internal_set_angleofattack(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.angleOfAttack)
}

// optional bool sideSlip = 19 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_sideslip() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_sideslip() const {
  return _internal_has_sideslip();
}
inline void LabelPrefs_DisplayFields::clear_sideslip() {
  sideslip_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool LabelPrefs_DisplayFields::_internal_sideslip() const {
  return sideslip_;
}
inline bool LabelPrefs_DisplayFields::sideslip() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.sideSlip)
  return _internal_sideslip();
}
inline void LabelPrefs_DisplayFields::_internal_set_sideslip(bool value) {
  _has_bits_[0] |= 0x00020000u;
  sideslip_ = value;
}
inline void LabelPrefs_DisplayFields::set_sideslip(bool value) {
  _internal_set_sideslip(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.sideSlip)
}

// optional bool totalAngleOfAttack = 20 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_totalangleofattack() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_totalangleofattack() const {
  return _internal_has_totalangleofattack();
}
inline void LabelPrefs_DisplayFields::clear_totalangleofattack() {
  totalangleofattack_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool LabelPrefs_DisplayFields::_internal_totalangleofattack() const {
  return totalangleofattack_;
}
inline bool LabelPrefs_DisplayFields::totalangleofattack() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.totalAngleOfAttack)
  return _internal_totalangleofattack();
}
inline void LabelPrefs_DisplayFields::_internal_set_totalangleofattack(bool value) {
  _has_bits_[0] |= 0x00040000u;
  totalangleofattack_ = value;
}
inline void LabelPrefs_DisplayFields::set_totalangleofattack(bool value) {
  _internal_set_totalangleofattack(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.totalAngleOfAttack)
}

// optional bool solarAzimuth = 21 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_solarazimuth() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_solarazimuth() const {
  return _internal_has_solarazimuth();
}
inline void LabelPrefs_DisplayFields::clear_solarazimuth() {
  solarazimuth_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool LabelPrefs_DisplayFields::_internal_solarazimuth() const {
  return solarazimuth_;
}
inline bool LabelPrefs_DisplayFields::solarazimuth() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.solarAzimuth)
  return _internal_solarazimuth();
}
inline void LabelPrefs_DisplayFields::_internal_set_solarazimuth(bool value) {
  _has_bits_[0] |= 0x00080000u;
  solarazimuth_ = value;
}
inline void LabelPrefs_DisplayFields::set_solarazimuth(bool value) {
  _internal_set_solarazimuth(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.solarAzimuth)
}

// optional bool solarElevation = 22 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_solarelevation() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_solarelevation() const {
  return _internal_has_solarelevation();
}
inline void LabelPrefs_DisplayFields::clear_solarelevation() {
  solarelevation_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool LabelPrefs_DisplayFields::_internal_solarelevation() const {
  return solarelevation_;
}
inline bool LabelPrefs_DisplayFields::solarelevation() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.solarElevation)
  return _internal_solarelevation();
}
inline void LabelPrefs_DisplayFields::_internal_set_solarelevation(bool value) {
  _has_bits_[0] |= 0x00100000u;
  solarelevation_ = value;
}
inline void LabelPrefs_DisplayFields::set_solarelevation(bool value) {
  _internal_set_solarelevation(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.solarElevation)
}

// optional bool solarIlluminance = 23 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_solarilluminance() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_solarilluminance() const {
  return _internal_has_solarilluminance();
}
inline void LabelPrefs_DisplayFields::clear_solarilluminance() {
  solarilluminance_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool LabelPrefs_DisplayFields::_internal_solarilluminance() const {
  return solarilluminance_;
}
inline bool LabelPrefs_DisplayFields::solarilluminance() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.solarIlluminance)
  return _internal_solarilluminance();
}
inline void LabelPrefs_DisplayFields::_internal_set_solarilluminance(bool value) {
  _has_bits_[0] |= 0x00200000u;
  solarilluminance_ = value;
}
inline void LabelPrefs_DisplayFields::set_solarilluminance(bool value) {
  _internal_set_solarilluminance(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.solarIlluminance)
}

// optional bool lunarAzimuth = 24 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_lunarazimuth() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_lunarazimuth() const {
  return _internal_has_lunarazimuth();
}
inline void LabelPrefs_DisplayFields::clear_lunarazimuth() {
  lunarazimuth_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool LabelPrefs_DisplayFields::_internal_lunarazimuth() const {
  return lunarazimuth_;
}
inline bool LabelPrefs_DisplayFields::lunarazimuth() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.lunarAzimuth)
  return _internal_lunarazimuth();
}
inline void LabelPrefs_DisplayFields::_internal_set_lunarazimuth(bool value) {
  _has_bits_[0] |= 0x00400000u;
  lunarazimuth_ = value;
}
inline void LabelPrefs_DisplayFields::set_lunarazimuth(bool value) {
  _internal_set_lunarazimuth(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.lunarAzimuth)
}

// optional bool lunarElevation = 25 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_lunarelevation() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_lunarelevation() const {
  return _internal_has_lunarelevation();
}
inline void LabelPrefs_DisplayFields::clear_lunarelevation() {
  lunarelevation_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool LabelPrefs_DisplayFields::_internal_lunarelevation() const {
  return lunarelevation_;
}
inline bool LabelPrefs_DisplayFields::lunarelevation() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.lunarElevation)
  return _internal_lunarelevation();
}
inline void LabelPrefs_DisplayFields::_internal_set_lunarelevation(bool value) {
  _has_bits_[0] |= 0x00800000u;
  lunarelevation_ = value;
}
inline void LabelPrefs_DisplayFields::set_lunarelevation(bool value) {
  _internal_set_lunarelevation(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.lunarElevation)
}

// optional bool lunarIlluminance = 26 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_lunarilluminance() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_lunarilluminance() const {
  return _internal_has_lunarilluminance();
}
inline void LabelPrefs_DisplayFields::clear_lunarilluminance() {
  lunarilluminance_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool LabelPrefs_DisplayFields::_internal_lunarilluminance() const {
  return lunarilluminance_;
}
inline bool LabelPrefs_DisplayFields::lunarilluminance() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.lunarIlluminance)
  return _internal_lunarilluminance();
}
inline void LabelPrefs_DisplayFields::_internal_set_lunarilluminance(bool value) {
  _has_bits_[0] |= 0x01000000u;
  lunarilluminance_ = value;
}
inline void LabelPrefs_DisplayFields::set_lunarilluminance(bool value) {
  _internal_set_lunarilluminance(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.lunarIlluminance)
}

// optional bool late = 27 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_late() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_late() const {
  return _internal_has_late();
}
inline void LabelPrefs_DisplayFields::clear_late() {
  late_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool LabelPrefs_DisplayFields::_internal_late() const {
  return late_;
}
inline bool LabelPrefs_DisplayFields::late() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.late)
  return _internal_late();
}
inline void LabelPrefs_DisplayFields::_internal_set_late(bool value) {
  _has_bits_[0] |= 0x02000000u;
  late_ = value;
}
inline void LabelPrefs_DisplayFields::set_late(bool value) {
  _internal_set_late(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.late)
}

// optional bool useLabelCode = 28 [default = false];
inline bool LabelPrefs_DisplayFields::_internal_has_uselabelcode() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_uselabelcode() const {
  return _internal_has_uselabelcode();
}
inline void LabelPrefs_DisplayFields::clear_uselabelcode() {
  uselabelcode_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool LabelPrefs_DisplayFields::_internal_uselabelcode() const {
  return uselabelcode_;
}
inline bool LabelPrefs_DisplayFields::uselabelcode() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.useLabelCode)
  return _internal_uselabelcode();
}
inline void LabelPrefs_DisplayFields::_internal_set_uselabelcode(bool value) {
  _has_bits_[0] |= 0x04000000u;
  uselabelcode_ = value;
}
inline void LabelPrefs_DisplayFields::set_uselabelcode(bool value) {
  _internal_set_uselabelcode(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.useLabelCode)
}

// optional string labelCode = 29 [default = ""];
inline bool LabelPrefs_DisplayFields::_internal_has_labelcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LabelPrefs_DisplayFields::has_labelcode() const {
  return _internal_has_labelcode();
}
inline void LabelPrefs_DisplayFields::clear_labelcode() {
  labelcode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LabelPrefs_DisplayFields::labelcode() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.DisplayFields.labelCode)
  return _internal_labelcode();
}
inline void LabelPrefs_DisplayFields::set_labelcode(const std::string& value) {
  _internal_set_labelcode(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.DisplayFields.labelCode)
}
inline std::string* LabelPrefs_DisplayFields::mutable_labelcode() {
  // @@protoc_insertion_point(field_mutable:simData.LabelPrefs.DisplayFields.labelCode)
  return _internal_mutable_labelcode();
}
inline const std::string& LabelPrefs_DisplayFields::_internal_labelcode() const {
  return labelcode_.Get();
}
inline void LabelPrefs_DisplayFields::_internal_set_labelcode(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  labelcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LabelPrefs_DisplayFields::set_labelcode(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  labelcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.LabelPrefs.DisplayFields.labelCode)
}
inline void LabelPrefs_DisplayFields::set_labelcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  labelcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.LabelPrefs.DisplayFields.labelCode)
}
inline void LabelPrefs_DisplayFields::set_labelcode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  labelcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.LabelPrefs.DisplayFields.labelCode)
}
inline std::string* LabelPrefs_DisplayFields::_internal_mutable_labelcode() {
  _has_bits_[0] |= 0x00000001u;
  return labelcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LabelPrefs_DisplayFields::release_labelcode() {
  // @@protoc_insertion_point(field_release:simData.LabelPrefs.DisplayFields.labelCode)
  if (!_internal_has_labelcode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return labelcode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabelPrefs_DisplayFields::set_allocated_labelcode(std::string* labelcode) {
  if (labelcode != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  labelcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), labelcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.LabelPrefs.DisplayFields.labelCode)
}

// -------------------------------------------------------------------

// LabelPrefs

// optional bool draw = 1 [default = false];
inline bool LabelPrefs::_internal_has_draw() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LabelPrefs::has_draw() const {
  return _internal_has_draw();
}
inline void LabelPrefs::clear_draw() {
  draw_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool LabelPrefs::_internal_draw() const {
  return draw_;
}
inline bool LabelPrefs::draw() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.draw)
  return _internal_draw();
}
inline void LabelPrefs::_internal_set_draw(bool value) {
  _has_bits_[0] |= 0x00000080u;
  draw_ = value;
}
inline void LabelPrefs::set_draw(bool value) {
  _internal_set_draw(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.draw)
}

// optional fixed32 color = 2 [default = 4227595263];
inline bool LabelPrefs::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool LabelPrefs::has_color() const {
  return _internal_has_color();
}
inline void LabelPrefs::clear_color() {
  color_ = 4227595263u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabelPrefs::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabelPrefs::color() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.color)
  return _internal_color();
}
inline void LabelPrefs::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  color_ = value;
}
inline void LabelPrefs::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.color)
}

// optional .simData.TextOutline textOutline = 3 [default = TO_THIN];
inline bool LabelPrefs::_internal_has_textoutline() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool LabelPrefs::has_textoutline() const {
  return _internal_has_textoutline();
}
inline void LabelPrefs::clear_textoutline() {
  textoutline_ = 1;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::simData::TextOutline LabelPrefs::_internal_textoutline() const {
  return static_cast< ::simData::TextOutline >(textoutline_);
}
inline ::simData::TextOutline LabelPrefs::textoutline() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.textOutline)
  return _internal_textoutline();
}
inline void LabelPrefs::_internal_set_textoutline(::simData::TextOutline value) {
  assert(::simData::TextOutline_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  textoutline_ = value;
}
inline void LabelPrefs::set_textoutline(::simData::TextOutline value) {
  _internal_set_textoutline(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.textOutline)
}

// optional fixed32 outlineColor = 4 [default = 255];
inline bool LabelPrefs::_internal_has_outlinecolor() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool LabelPrefs::has_outlinecolor() const {
  return _internal_has_outlinecolor();
}
inline void LabelPrefs::clear_outlinecolor() {
  outlinecolor_ = 255u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabelPrefs::_internal_outlinecolor() const {
  return outlinecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabelPrefs::outlinecolor() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.outlineColor)
  return _internal_outlinecolor();
}
inline void LabelPrefs::_internal_set_outlinecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  outlinecolor_ = value;
}
inline void LabelPrefs::set_outlinecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outlinecolor(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.outlineColor)
}

// optional .simData.BackdropType backdropType = 33 [default = BDT_OUTLINE];
inline bool LabelPrefs::_internal_has_backdroptype() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool LabelPrefs::has_backdroptype() const {
  return _internal_has_backdroptype();
}
inline void LabelPrefs::clear_backdroptype() {
  backdroptype_ = 8;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::simData::BackdropType LabelPrefs::_internal_backdroptype() const {
  return static_cast< ::simData::BackdropType >(backdroptype_);
}
inline ::simData::BackdropType LabelPrefs::backdroptype() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.backdropType)
  return _internal_backdroptype();
}
inline void LabelPrefs::_internal_set_backdroptype(::simData::BackdropType value) {
  assert(::simData::BackdropType_IsValid(value));
  _has_bits_[1] |= 0x00000002u;
  backdroptype_ = value;
}
inline void LabelPrefs::set_backdroptype(::simData::BackdropType value) {
  _internal_set_backdroptype(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.backdropType)
}

// optional .simData.BackdropImplementation backdropImplementation = 34 [default = BDI_POLYGON_OFFSET];
inline bool LabelPrefs::_internal_has_backdropimplementation() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LabelPrefs::has_backdropimplementation() const {
  return _internal_has_backdropimplementation();
}
inline void LabelPrefs::clear_backdropimplementation() {
  backdropimplementation_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::simData::BackdropImplementation LabelPrefs::_internal_backdropimplementation() const {
  return static_cast< ::simData::BackdropImplementation >(backdropimplementation_);
}
inline ::simData::BackdropImplementation LabelPrefs::backdropimplementation() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.backdropImplementation)
  return _internal_backdropimplementation();
}
inline void LabelPrefs::_internal_set_backdropimplementation(::simData::BackdropImplementation value) {
  assert(::simData::BackdropImplementation_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  backdropimplementation_ = value;
}
inline void LabelPrefs::set_backdropimplementation(::simData::BackdropImplementation value) {
  _internal_set_backdropimplementation(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.backdropImplementation)
}

// optional string overlayFontName = 5 [default = "arial.ttf"];
inline bool LabelPrefs::_internal_has_overlayfontname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LabelPrefs::has_overlayfontname() const {
  return _internal_has_overlayfontname();
}
inline void LabelPrefs::clear_overlayfontname() {
  overlayfontname_.ClearToDefault(::simData::LabelPrefs::_i_give_permission_to_break_this_code_default_overlayfontname_, GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LabelPrefs::overlayfontname() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.overlayFontName)
  if (overlayfontname_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_overlayfontname_.get();
  return _internal_overlayfontname();
}
inline void LabelPrefs::set_overlayfontname(const std::string& value) {
  _internal_set_overlayfontname(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.overlayFontName)
}
inline std::string* LabelPrefs::mutable_overlayfontname() {
  // @@protoc_insertion_point(field_mutable:simData.LabelPrefs.overlayFontName)
  return _internal_mutable_overlayfontname();
}
inline const std::string& LabelPrefs::_internal_overlayfontname() const {
  return overlayfontname_.Get();
}
inline void LabelPrefs::_internal_set_overlayfontname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  overlayfontname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void LabelPrefs::set_overlayfontname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  overlayfontname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.LabelPrefs.overlayFontName)
}
inline void LabelPrefs::set_overlayfontname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  overlayfontname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.LabelPrefs.overlayFontName)
}
inline void LabelPrefs::set_overlayfontname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  overlayfontname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.LabelPrefs.overlayFontName)
}
inline std::string* LabelPrefs::_internal_mutable_overlayfontname() {
  _has_bits_[0] |= 0x00000001u;
  return overlayfontname_.Mutable(::simData::LabelPrefs::_i_give_permission_to_break_this_code_default_overlayfontname_, GetArena());
}
inline std::string* LabelPrefs::release_overlayfontname() {
  // @@protoc_insertion_point(field_release:simData.LabelPrefs.overlayFontName)
  if (!_internal_has_overlayfontname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return overlayfontname_.ReleaseNonDefault(nullptr, GetArena());
}
inline void LabelPrefs::set_allocated_overlayfontname(std::string* overlayfontname) {
  if (overlayfontname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  overlayfontname_.SetAllocated(nullptr, overlayfontname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.LabelPrefs.overlayFontName)
}

// optional fixed32 overlayFontPointSize = 6 [default = 14];
inline bool LabelPrefs::_internal_has_overlayfontpointsize() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool LabelPrefs::has_overlayfontpointsize() const {
  return _internal_has_overlayfontpointsize();
}
inline void LabelPrefs::clear_overlayfontpointsize() {
  overlayfontpointsize_ = 14u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabelPrefs::_internal_overlayfontpointsize() const {
  return overlayfontpointsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabelPrefs::overlayfontpointsize() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.overlayFontPointSize)
  return _internal_overlayfontpointsize();
}
inline void LabelPrefs::_internal_set_overlayfontpointsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  overlayfontpointsize_ = value;
}
inline void LabelPrefs::set_overlayfontpointsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_overlayfontpointsize(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.overlayFontPointSize)
}

// optional int32 offsetX = 7 [default = 0];
inline bool LabelPrefs::_internal_has_offsetx() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LabelPrefs::has_offsetx() const {
  return _internal_has_offsetx();
}
inline void LabelPrefs::clear_offsetx() {
  offsetx_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::_internal_offsetx() const {
  return offsetx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::offsetx() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.offsetX)
  return _internal_offsetx();
}
inline void LabelPrefs::_internal_set_offsetx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  offsetx_ = value;
}
inline void LabelPrefs::set_offsetx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offsetx(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.offsetX)
}

// optional int32 offsetY = 8 [default = 0];
inline bool LabelPrefs::_internal_has_offsety() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LabelPrefs::has_offsety() const {
  return _internal_has_offsety();
}
inline void LabelPrefs::clear_offsety() {
  offsety_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::_internal_offsety() const {
  return offsety_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::offsety() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.offsetY)
  return _internal_offsety();
}
inline void LabelPrefs::_internal_set_offsety(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  offsety_ = value;
}
inline void LabelPrefs::set_offsety(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offsety(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.offsetY)
}

// optional .simData.TextAlignment alignment = 35 [default = ALIGN_CENTER_TOP];
inline bool LabelPrefs::_internal_has_alignment() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool LabelPrefs::has_alignment() const {
  return _internal_has_alignment();
}
inline void LabelPrefs::clear_alignment() {
  alignment_ = 3;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::simData::TextAlignment LabelPrefs::_internal_alignment() const {
  return static_cast< ::simData::TextAlignment >(alignment_);
}
inline ::simData::TextAlignment LabelPrefs::alignment() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.alignment)
  return _internal_alignment();
}
inline void LabelPrefs::_internal_set_alignment(::simData::TextAlignment value) {
  assert(::simData::TextAlignment_IsValid(value));
  _has_bits_[1] |= 0x00000004u;
  alignment_ = value;
}
inline void LabelPrefs::set_alignment(::simData::TextAlignment value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.alignment)
}

// optional double priority = 26 [default = 100];
inline bool LabelPrefs::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool LabelPrefs::has_priority() const {
  return _internal_has_priority();
}
inline void LabelPrefs::clear_priority() {
  priority_ = 100;
  _has_bits_[0] &= ~0x04000000u;
}
inline double LabelPrefs::_internal_priority() const {
  return priority_;
}
inline double LabelPrefs::priority() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.priority)
  return _internal_priority();
}
inline void LabelPrefs::_internal_set_priority(double value) {
  _has_bits_[0] |= 0x04000000u;
  priority_ = value;
}
inline void LabelPrefs::set_priority(double value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.priority)
}

// optional .simData.LabelPrefs.DisplayFields displayFields = 11;
inline bool LabelPrefs::_internal_has_displayfields() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || displayfields_ != nullptr);
  return value;
}
inline bool LabelPrefs::has_displayfields() const {
  return _internal_has_displayfields();
}
inline void LabelPrefs::clear_displayfields() {
  if (displayfields_ != nullptr) displayfields_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::simData::LabelPrefs_DisplayFields& LabelPrefs::_internal_displayfields() const {
  const ::simData::LabelPrefs_DisplayFields* p = displayfields_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::LabelPrefs_DisplayFields&>(
      ::simData::_LabelPrefs_DisplayFields_default_instance_);
}
inline const ::simData::LabelPrefs_DisplayFields& LabelPrefs::displayfields() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.displayFields)
  return _internal_displayfields();
}
inline void LabelPrefs::unsafe_arena_set_allocated_displayfields(
    ::simData::LabelPrefs_DisplayFields* displayfields) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(displayfields_);
  }
  displayfields_ = displayfields;
  if (displayfields) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LabelPrefs.displayFields)
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::release_displayfields() {
  _has_bits_[0] &= ~0x00000002u;
  ::simData::LabelPrefs_DisplayFields* temp = displayfields_;
  displayfields_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::unsafe_arena_release_displayfields() {
  // @@protoc_insertion_point(field_release:simData.LabelPrefs.displayFields)
  _has_bits_[0] &= ~0x00000002u;
  ::simData::LabelPrefs_DisplayFields* temp = displayfields_;
  displayfields_ = nullptr;
  return temp;
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::_internal_mutable_displayfields() {
  _has_bits_[0] |= 0x00000002u;
  if (displayfields_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::LabelPrefs_DisplayFields>(GetArena());
    displayfields_ = p;
  }
  return displayfields_;
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::mutable_displayfields() {
  // @@protoc_insertion_point(field_mutable:simData.LabelPrefs.displayFields)
  return _internal_mutable_displayfields();
}
inline void LabelPrefs::set_allocated_displayfields(::simData::LabelPrefs_DisplayFields* displayfields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete displayfields_;
  }
  if (displayfields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(displayfields);
    if (message_arena != submessage_arena) {
      displayfields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, displayfields, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  displayfields_ = displayfields;
  // @@protoc_insertion_point(field_set_allocated:simData.LabelPrefs.displayFields)
}

// optional .simData.LabelPrefs.DisplayFields legendDisplayFields = 22;
inline bool LabelPrefs::_internal_has_legenddisplayfields() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || legenddisplayfields_ != nullptr);
  return value;
}
inline bool LabelPrefs::has_legenddisplayfields() const {
  return _internal_has_legenddisplayfields();
}
inline void LabelPrefs::clear_legenddisplayfields() {
  if (legenddisplayfields_ != nullptr) legenddisplayfields_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::simData::LabelPrefs_DisplayFields& LabelPrefs::_internal_legenddisplayfields() const {
  const ::simData::LabelPrefs_DisplayFields* p = legenddisplayfields_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::LabelPrefs_DisplayFields&>(
      ::simData::_LabelPrefs_DisplayFields_default_instance_);
}
inline const ::simData::LabelPrefs_DisplayFields& LabelPrefs::legenddisplayfields() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.legendDisplayFields)
  return _internal_legenddisplayfields();
}
inline void LabelPrefs::unsafe_arena_set_allocated_legenddisplayfields(
    ::simData::LabelPrefs_DisplayFields* legenddisplayfields) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legenddisplayfields_);
  }
  legenddisplayfields_ = legenddisplayfields;
  if (legenddisplayfields) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LabelPrefs.legendDisplayFields)
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::release_legenddisplayfields() {
  _has_bits_[0] &= ~0x00000004u;
  ::simData::LabelPrefs_DisplayFields* temp = legenddisplayfields_;
  legenddisplayfields_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::unsafe_arena_release_legenddisplayfields() {
  // @@protoc_insertion_point(field_release:simData.LabelPrefs.legendDisplayFields)
  _has_bits_[0] &= ~0x00000004u;
  ::simData::LabelPrefs_DisplayFields* temp = legenddisplayfields_;
  legenddisplayfields_ = nullptr;
  return temp;
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::_internal_mutable_legenddisplayfields() {
  _has_bits_[0] |= 0x00000004u;
  if (legenddisplayfields_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::LabelPrefs_DisplayFields>(GetArena());
    legenddisplayfields_ = p;
  }
  return legenddisplayfields_;
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::mutable_legenddisplayfields() {
  // @@protoc_insertion_point(field_mutable:simData.LabelPrefs.legendDisplayFields)
  return _internal_mutable_legenddisplayfields();
}
inline void LabelPrefs::set_allocated_legenddisplayfields(::simData::LabelPrefs_DisplayFields* legenddisplayfields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete legenddisplayfields_;
  }
  if (legenddisplayfields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(legenddisplayfields);
    if (message_arena != submessage_arena) {
      legenddisplayfields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legenddisplayfields, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  legenddisplayfields_ = legenddisplayfields;
  // @@protoc_insertion_point(field_set_allocated:simData.LabelPrefs.legendDisplayFields)
}

// optional .simData.LabelPrefs.DisplayFields hoverDisplayFields = 23;
inline bool LabelPrefs::_internal_has_hoverdisplayfields() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || hoverdisplayfields_ != nullptr);
  return value;
}
inline bool LabelPrefs::has_hoverdisplayfields() const {
  return _internal_has_hoverdisplayfields();
}
inline void LabelPrefs::clear_hoverdisplayfields() {
  if (hoverdisplayfields_ != nullptr) hoverdisplayfields_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::simData::LabelPrefs_DisplayFields& LabelPrefs::_internal_hoverdisplayfields() const {
  const ::simData::LabelPrefs_DisplayFields* p = hoverdisplayfields_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::LabelPrefs_DisplayFields&>(
      ::simData::_LabelPrefs_DisplayFields_default_instance_);
}
inline const ::simData::LabelPrefs_DisplayFields& LabelPrefs::hoverdisplayfields() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.hoverDisplayFields)
  return _internal_hoverdisplayfields();
}
inline void LabelPrefs::unsafe_arena_set_allocated_hoverdisplayfields(
    ::simData::LabelPrefs_DisplayFields* hoverdisplayfields) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hoverdisplayfields_);
  }
  hoverdisplayfields_ = hoverdisplayfields;
  if (hoverdisplayfields) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LabelPrefs.hoverDisplayFields)
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::release_hoverdisplayfields() {
  _has_bits_[0] &= ~0x00000008u;
  ::simData::LabelPrefs_DisplayFields* temp = hoverdisplayfields_;
  hoverdisplayfields_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::unsafe_arena_release_hoverdisplayfields() {
  // @@protoc_insertion_point(field_release:simData.LabelPrefs.hoverDisplayFields)
  _has_bits_[0] &= ~0x00000008u;
  ::simData::LabelPrefs_DisplayFields* temp = hoverdisplayfields_;
  hoverdisplayfields_ = nullptr;
  return temp;
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::_internal_mutable_hoverdisplayfields() {
  _has_bits_[0] |= 0x00000008u;
  if (hoverdisplayfields_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::LabelPrefs_DisplayFields>(GetArena());
    hoverdisplayfields_ = p;
  }
  return hoverdisplayfields_;
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::mutable_hoverdisplayfields() {
  // @@protoc_insertion_point(field_mutable:simData.LabelPrefs.hoverDisplayFields)
  return _internal_mutable_hoverdisplayfields();
}
inline void LabelPrefs::set_allocated_hoverdisplayfields(::simData::LabelPrefs_DisplayFields* hoverdisplayfields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hoverdisplayfields_;
  }
  if (hoverdisplayfields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hoverdisplayfields);
    if (message_arena != submessage_arena) {
      hoverdisplayfields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hoverdisplayfields, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  hoverdisplayfields_ = hoverdisplayfields;
  // @@protoc_insertion_point(field_set_allocated:simData.LabelPrefs.hoverDisplayFields)
}

// optional .simData.LabelPrefs.DisplayFields hookDisplayFields = 36;
inline bool LabelPrefs::_internal_has_hookdisplayfields() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || hookdisplayfields_ != nullptr);
  return value;
}
inline bool LabelPrefs::has_hookdisplayfields() const {
  return _internal_has_hookdisplayfields();
}
inline void LabelPrefs::clear_hookdisplayfields() {
  if (hookdisplayfields_ != nullptr) hookdisplayfields_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::simData::LabelPrefs_DisplayFields& LabelPrefs::_internal_hookdisplayfields() const {
  const ::simData::LabelPrefs_DisplayFields* p = hookdisplayfields_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::LabelPrefs_DisplayFields&>(
      ::simData::_LabelPrefs_DisplayFields_default_instance_);
}
inline const ::simData::LabelPrefs_DisplayFields& LabelPrefs::hookdisplayfields() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.hookDisplayFields)
  return _internal_hookdisplayfields();
}
inline void LabelPrefs::unsafe_arena_set_allocated_hookdisplayfields(
    ::simData::LabelPrefs_DisplayFields* hookdisplayfields) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hookdisplayfields_);
  }
  hookdisplayfields_ = hookdisplayfields;
  if (hookdisplayfields) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LabelPrefs.hookDisplayFields)
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::release_hookdisplayfields() {
  _has_bits_[0] &= ~0x00000010u;
  ::simData::LabelPrefs_DisplayFields* temp = hookdisplayfields_;
  hookdisplayfields_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::unsafe_arena_release_hookdisplayfields() {
  // @@protoc_insertion_point(field_release:simData.LabelPrefs.hookDisplayFields)
  _has_bits_[0] &= ~0x00000010u;
  ::simData::LabelPrefs_DisplayFields* temp = hookdisplayfields_;
  hookdisplayfields_ = nullptr;
  return temp;
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::_internal_mutable_hookdisplayfields() {
  _has_bits_[0] |= 0x00000010u;
  if (hookdisplayfields_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::LabelPrefs_DisplayFields>(GetArena());
    hookdisplayfields_ = p;
  }
  return hookdisplayfields_;
}
inline ::simData::LabelPrefs_DisplayFields* LabelPrefs::mutable_hookdisplayfields() {
  // @@protoc_insertion_point(field_mutable:simData.LabelPrefs.hookDisplayFields)
  return _internal_mutable_hookdisplayfields();
}
inline void LabelPrefs::set_allocated_hookdisplayfields(::simData::LabelPrefs_DisplayFields* hookdisplayfields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hookdisplayfields_;
  }
  if (hookdisplayfields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hookdisplayfields);
    if (message_arena != submessage_arena) {
      hookdisplayfields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hookdisplayfields, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  hookdisplayfields_ = hookdisplayfields;
  // @@protoc_insertion_point(field_set_allocated:simData.LabelPrefs.hookDisplayFields)
}

// optional bool applyHeightAboveTerrain = 12 [default = false];
inline bool LabelPrefs::_internal_has_applyheightaboveterrain() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LabelPrefs::has_applyheightaboveterrain() const {
  return _internal_has_applyheightaboveterrain();
}
inline void LabelPrefs::clear_applyheightaboveterrain() {
  applyheightaboveterrain_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool LabelPrefs::_internal_applyheightaboveterrain() const {
  return applyheightaboveterrain_;
}
inline bool LabelPrefs::applyheightaboveterrain() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.applyHeightAboveTerrain)
  return _internal_applyheightaboveterrain();
}
inline void LabelPrefs::_internal_set_applyheightaboveterrain(bool value) {
  _has_bits_[0] |= 0x00000100u;
  applyheightaboveterrain_ = value;
}
inline void LabelPrefs::set_applyheightaboveterrain(bool value) {
  _internal_set_applyheightaboveterrain(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.applyHeightAboveTerrain)
}

// optional bool applyRoll = 13 [default = false];
inline bool LabelPrefs::_internal_has_applyroll() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LabelPrefs::has_applyroll() const {
  return _internal_has_applyroll();
}
inline void LabelPrefs::clear_applyroll() {
  applyroll_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool LabelPrefs::_internal_applyroll() const {
  return applyroll_;
}
inline bool LabelPrefs::applyroll() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.applyRoll)
  return _internal_applyroll();
}
inline void LabelPrefs::_internal_set_applyroll(bool value) {
  _has_bits_[0] |= 0x00000200u;
  applyroll_ = value;
}
inline void LabelPrefs::set_applyroll(bool value) {
  _internal_set_applyroll(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.applyRoll)
}

// optional .simData.CoordinateSystem coordinateSystem = 14 [default = LLA];
inline bool LabelPrefs::_internal_has_coordinatesystem() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool LabelPrefs::has_coordinatesystem() const {
  return _internal_has_coordinatesystem();
}
inline void LabelPrefs::clear_coordinatesystem() {
  coordinatesystem_ = 4;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::simData::CoordinateSystem LabelPrefs::_internal_coordinatesystem() const {
  return static_cast< ::simData::CoordinateSystem >(coordinatesystem_);
}
inline ::simData::CoordinateSystem LabelPrefs::coordinatesystem() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.coordinateSystem)
  return _internal_coordinatesystem();
}
inline void LabelPrefs::_internal_set_coordinatesystem(::simData::CoordinateSystem value) {
  assert(::simData::CoordinateSystem_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  coordinatesystem_ = value;
}
inline void LabelPrefs::set_coordinatesystem(::simData::CoordinateSystem value) {
  _internal_set_coordinatesystem(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.coordinateSystem)
}

// optional .simData.VerticalDatum verticalDatum = 15 [default = VD_WGS84];
inline bool LabelPrefs::_internal_has_verticaldatum() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool LabelPrefs::has_verticaldatum() const {
  return _internal_has_verticaldatum();
}
inline void LabelPrefs::clear_verticaldatum() {
  verticaldatum_ = 1;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::simData::VerticalDatum LabelPrefs::_internal_verticaldatum() const {
  return static_cast< ::simData::VerticalDatum >(verticaldatum_);
}
inline ::simData::VerticalDatum LabelPrefs::verticaldatum() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.verticalDatum)
  return _internal_verticaldatum();
}
inline void LabelPrefs::_internal_set_verticaldatum(::simData::VerticalDatum value) {
  assert(::simData::VerticalDatum_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  verticaldatum_ = value;
}
inline void LabelPrefs::set_verticaldatum(::simData::VerticalDatum value) {
  _internal_set_verticaldatum(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.verticalDatum)
}

// optional .simData.MagneticVariance magneticVariance = 16 [default = MV_TRUE];
inline bool LabelPrefs::_internal_has_magneticvariance() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool LabelPrefs::has_magneticvariance() const {
  return _internal_has_magneticvariance();
}
inline void LabelPrefs::clear_magneticvariance() {
  magneticvariance_ = 2;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::simData::MagneticVariance LabelPrefs::_internal_magneticvariance() const {
  return static_cast< ::simData::MagneticVariance >(magneticvariance_);
}
inline ::simData::MagneticVariance LabelPrefs::magneticvariance() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.magneticVariance)
  return _internal_magneticvariance();
}
inline void LabelPrefs::_internal_set_magneticvariance(::simData::MagneticVariance value) {
  assert(::simData::MagneticVariance_IsValid(value));
  _has_bits_[0] |= 0x00100000u;
  magneticvariance_ = value;
}
inline void LabelPrefs::set_magneticvariance(::simData::MagneticVariance value) {
  _internal_set_magneticvariance(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.magneticVariance)
}

// optional .simData.DistanceUnits distanceUnits = 17 [default = UNITS_METERS];
inline bool LabelPrefs::_internal_has_distanceunits() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool LabelPrefs::has_distanceunits() const {
  return _internal_has_distanceunits();
}
inline void LabelPrefs::clear_distanceunits() {
  distanceunits_ = 20;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::simData::DistanceUnits LabelPrefs::_internal_distanceunits() const {
  return static_cast< ::simData::DistanceUnits >(distanceunits_);
}
inline ::simData::DistanceUnits LabelPrefs::distanceunits() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.distanceUnits)
  return _internal_distanceunits();
}
inline void LabelPrefs::_internal_set_distanceunits(::simData::DistanceUnits value) {
  assert(::simData::DistanceUnits_IsValid(value));
  _has_bits_[0] |= 0x00200000u;
  distanceunits_ = value;
}
inline void LabelPrefs::set_distanceunits(::simData::DistanceUnits value) {
  _internal_set_distanceunits(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.distanceUnits)
}

// optional .simData.AngleUnits angleUnits = 18 [default = UNITS_DEGREES];
inline bool LabelPrefs::_internal_has_angleunits() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool LabelPrefs::has_angleunits() const {
  return _internal_has_angleunits();
}
inline void LabelPrefs::clear_angleunits() {
  angleunits_ = 11;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::simData::AngleUnits LabelPrefs::_internal_angleunits() const {
  return static_cast< ::simData::AngleUnits >(angleunits_);
}
inline ::simData::AngleUnits LabelPrefs::angleunits() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.angleUnits)
  return _internal_angleunits();
}
inline void LabelPrefs::_internal_set_angleunits(::simData::AngleUnits value) {
  assert(::simData::AngleUnits_IsValid(value));
  _has_bits_[0] |= 0x00400000u;
  angleunits_ = value;
}
inline void LabelPrefs::set_angleunits(::simData::AngleUnits value) {
  _internal_set_angleunits(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.angleUnits)
}

// optional .simData.SpeedUnits speedUnits = 19 [default = UNITS_KNOTS];
inline bool LabelPrefs::_internal_has_speedunits() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool LabelPrefs::has_speedunits() const {
  return _internal_has_speedunits();
}
inline void LabelPrefs::clear_speedunits() {
  speedunits_ = 42;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::simData::SpeedUnits LabelPrefs::_internal_speedunits() const {
  return static_cast< ::simData::SpeedUnits >(speedunits_);
}
inline ::simData::SpeedUnits LabelPrefs::speedunits() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.speedUnits)
  return _internal_speedunits();
}
inline void LabelPrefs::_internal_set_speedunits(::simData::SpeedUnits value) {
  assert(::simData::SpeedUnits_IsValid(value));
  _has_bits_[0] |= 0x00800000u;
  speedunits_ = value;
}
inline void LabelPrefs::set_speedunits(::simData::SpeedUnits value) {
  _internal_set_speedunits(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.speedUnits)
}

// optional int32 precision = 20 [default = 2];
inline bool LabelPrefs::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool LabelPrefs::has_precision() const {
  return _internal_has_precision();
}
inline void LabelPrefs::clear_precision() {
  precision_ = 2;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::precision() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.precision)
  return _internal_precision();
}
inline void LabelPrefs::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  precision_ = value;
}
inline void LabelPrefs::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.precision)
}

// optional int32 nameLength = 21 [default = 0];
inline bool LabelPrefs::_internal_has_namelength() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LabelPrefs::has_namelength() const {
  return _internal_has_namelength();
}
inline void LabelPrefs::clear_namelength() {
  namelength_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::_internal_namelength() const {
  return namelength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::namelength() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.nameLength)
  return _internal_namelength();
}
inline void LabelPrefs::_internal_set_namelength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  namelength_ = value;
}
inline void LabelPrefs::set_namelength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_namelength(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.nameLength)
}

// optional .simData.GeodeticUnits geodeticUnits = 24 [default = GEODETIC_DEGREES];
inline bool LabelPrefs::_internal_has_geodeticunits() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool LabelPrefs::has_geodeticunits() const {
  return _internal_has_geodeticunits();
}
inline void LabelPrefs::clear_geodeticunits() {
  geodeticunits_ = 11;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::simData::GeodeticUnits LabelPrefs::_internal_geodeticunits() const {
  return static_cast< ::simData::GeodeticUnits >(geodeticunits_);
}
inline ::simData::GeodeticUnits LabelPrefs::geodeticunits() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.geodeticUnits)
  return _internal_geodeticunits();
}
inline void LabelPrefs::_internal_set_geodeticunits(::simData::GeodeticUnits value) {
  assert(::simData::GeodeticUnits_IsValid(value));
  _has_bits_[0] |= 0x02000000u;
  geodeticunits_ = value;
}
inline void LabelPrefs::set_geodeticunits(::simData::GeodeticUnits value) {
  _internal_set_geodeticunits(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.geodeticUnits)
}

// optional .simData.DistanceUnits altitudeUnits = 25 [default = UNITS_METERS];
inline bool LabelPrefs::_internal_has_altitudeunits() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool LabelPrefs::has_altitudeunits() const {
  return _internal_has_altitudeunits();
}
inline void LabelPrefs::clear_altitudeunits() {
  altitudeunits_ = 20;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::simData::DistanceUnits LabelPrefs::_internal_altitudeunits() const {
  return static_cast< ::simData::DistanceUnits >(altitudeunits_);
}
inline ::simData::DistanceUnits LabelPrefs::altitudeunits() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.altitudeUnits)
  return _internal_altitudeunits();
}
inline void LabelPrefs::_internal_set_altitudeunits(::simData::DistanceUnits value) {
  assert(::simData::DistanceUnits_IsValid(value));
  _has_bits_[0] |= 0x08000000u;
  altitudeunits_ = value;
}
inline void LabelPrefs::set_altitudeunits(::simData::DistanceUnits value) {
  _internal_set_altitudeunits(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.altitudeUnits)
}

// optional int32 distancePrecision = 27 [default = 1];
inline bool LabelPrefs::_internal_has_distanceprecision() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool LabelPrefs::has_distanceprecision() const {
  return _internal_has_distanceprecision();
}
inline void LabelPrefs::clear_distanceprecision() {
  distanceprecision_ = 1;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::_internal_distanceprecision() const {
  return distanceprecision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::distanceprecision() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.distancePrecision)
  return _internal_distanceprecision();
}
inline void LabelPrefs::_internal_set_distanceprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  distanceprecision_ = value;
}
inline void LabelPrefs::set_distanceprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_distanceprecision(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.distancePrecision)
}

// optional int32 anglePrecision = 28 [default = 1];
inline bool LabelPrefs::_internal_has_angleprecision() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool LabelPrefs::has_angleprecision() const {
  return _internal_has_angleprecision();
}
inline void LabelPrefs::clear_angleprecision() {
  angleprecision_ = 1;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::_internal_angleprecision() const {
  return angleprecision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::angleprecision() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.anglePrecision)
  return _internal_angleprecision();
}
inline void LabelPrefs::_internal_set_angleprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x20000000u;
  angleprecision_ = value;
}
inline void LabelPrefs::set_angleprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_angleprecision(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.anglePrecision)
}

// optional int32 speedPrecision = 29 [default = 1];
inline bool LabelPrefs::_internal_has_speedprecision() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool LabelPrefs::has_speedprecision() const {
  return _internal_has_speedprecision();
}
inline void LabelPrefs::clear_speedprecision() {
  speedprecision_ = 1;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::_internal_speedprecision() const {
  return speedprecision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::speedprecision() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.speedPrecision)
  return _internal_speedprecision();
}
inline void LabelPrefs::_internal_set_speedprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x40000000u;
  speedprecision_ = value;
}
inline void LabelPrefs::set_speedprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speedprecision(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.speedPrecision)
}

// optional int32 geodeticPrecision = 30 [default = 6];
inline bool LabelPrefs::_internal_has_geodeticprecision() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool LabelPrefs::has_geodeticprecision() const {
  return _internal_has_geodeticprecision();
}
inline void LabelPrefs::clear_geodeticprecision() {
  geodeticprecision_ = 6;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::_internal_geodeticprecision() const {
  return geodeticprecision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::geodeticprecision() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.geodeticPrecision)
  return _internal_geodeticprecision();
}
inline void LabelPrefs::_internal_set_geodeticprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x80000000u;
  geodeticprecision_ = value;
}
inline void LabelPrefs::set_geodeticprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_geodeticprecision(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.geodeticPrecision)
}

// optional int32 altitudePrecision = 31 [default = 1];
inline bool LabelPrefs::_internal_has_altitudeprecision() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool LabelPrefs::has_altitudeprecision() const {
  return _internal_has_altitudeprecision();
}
inline void LabelPrefs::clear_altitudeprecision() {
  altitudeprecision_ = 1;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::_internal_altitudeprecision() const {
  return altitudeprecision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::altitudeprecision() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.altitudePrecision)
  return _internal_altitudeprecision();
}
inline void LabelPrefs::_internal_set_altitudeprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000001u;
  altitudeprecision_ = value;
}
inline void LabelPrefs::set_altitudeprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_altitudeprecision(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.altitudePrecision)
}

// optional int32 timePrecision = 32 [default = 0];
inline bool LabelPrefs::_internal_has_timeprecision() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LabelPrefs::has_timeprecision() const {
  return _internal_has_timeprecision();
}
inline void LabelPrefs::clear_timeprecision() {
  timeprecision_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::_internal_timeprecision() const {
  return timeprecision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelPrefs::timeprecision() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.timePrecision)
  return _internal_timeprecision();
}
inline void LabelPrefs::_internal_set_timeprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  timeprecision_ = value;
}
inline void LabelPrefs::set_timeprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeprecision(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.timePrecision)
}

// optional .simData.LabelPrefs.UseValue useValues = 37 [default = DISPLAY_VALUE];
inline bool LabelPrefs::_internal_has_usevalues() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LabelPrefs::has_usevalues() const {
  return _internal_has_usevalues();
}
inline void LabelPrefs::clear_usevalues() {
  usevalues_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::simData::LabelPrefs_UseValue LabelPrefs::_internal_usevalues() const {
  return static_cast< ::simData::LabelPrefs_UseValue >(usevalues_);
}
inline ::simData::LabelPrefs_UseValue LabelPrefs::usevalues() const {
  // @@protoc_insertion_point(field_get:simData.LabelPrefs.useValues)
  return _internal_usevalues();
}
inline void LabelPrefs::_internal_set_usevalues(::simData::LabelPrefs_UseValue value) {
  assert(::simData::LabelPrefs_UseValue_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  usevalues_ = value;
}
inline void LabelPrefs::set_usevalues(::simData::LabelPrefs_UseValue value) {
  _internal_set_usevalues(value);
  // @@protoc_insertion_point(field_set:simData.LabelPrefs.useValues)
}

// -------------------------------------------------------------------

// LocalGridPrefs_SpeedRing

// optional bool useFixedTime = 1 [default = false];
inline bool LocalGridPrefs_SpeedRing::_internal_has_usefixedtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LocalGridPrefs_SpeedRing::has_usefixedtime() const {
  return _internal_has_usefixedtime();
}
inline void LocalGridPrefs_SpeedRing::clear_usefixedtime() {
  usefixedtime_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LocalGridPrefs_SpeedRing::_internal_usefixedtime() const {
  return usefixedtime_;
}
inline bool LocalGridPrefs_SpeedRing::usefixedtime() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.SpeedRing.useFixedTime)
  return _internal_usefixedtime();
}
inline void LocalGridPrefs_SpeedRing::_internal_set_usefixedtime(bool value) {
  _has_bits_[0] |= 0x00000002u;
  usefixedtime_ = value;
}
inline void LocalGridPrefs_SpeedRing::set_usefixedtime(bool value) {
  _internal_set_usefixedtime(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.SpeedRing.useFixedTime)
}

// optional string fixedTime = 2 [default = ""];
inline bool LocalGridPrefs_SpeedRing::_internal_has_fixedtime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocalGridPrefs_SpeedRing::has_fixedtime() const {
  return _internal_has_fixedtime();
}
inline void LocalGridPrefs_SpeedRing::clear_fixedtime() {
  fixedtime_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LocalGridPrefs_SpeedRing::fixedtime() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.SpeedRing.fixedTime)
  return _internal_fixedtime();
}
inline void LocalGridPrefs_SpeedRing::set_fixedtime(const std::string& value) {
  _internal_set_fixedtime(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.SpeedRing.fixedTime)
}
inline std::string* LocalGridPrefs_SpeedRing::mutable_fixedtime() {
  // @@protoc_insertion_point(field_mutable:simData.LocalGridPrefs.SpeedRing.fixedTime)
  return _internal_mutable_fixedtime();
}
inline const std::string& LocalGridPrefs_SpeedRing::_internal_fixedtime() const {
  return fixedtime_.Get();
}
inline void LocalGridPrefs_SpeedRing::_internal_set_fixedtime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fixedtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LocalGridPrefs_SpeedRing::set_fixedtime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fixedtime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.LocalGridPrefs.SpeedRing.fixedTime)
}
inline void LocalGridPrefs_SpeedRing::set_fixedtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fixedtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.LocalGridPrefs.SpeedRing.fixedTime)
}
inline void LocalGridPrefs_SpeedRing::set_fixedtime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fixedtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.LocalGridPrefs.SpeedRing.fixedTime)
}
inline std::string* LocalGridPrefs_SpeedRing::_internal_mutable_fixedtime() {
  _has_bits_[0] |= 0x00000001u;
  return fixedtime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LocalGridPrefs_SpeedRing::release_fixedtime() {
  // @@protoc_insertion_point(field_release:simData.LocalGridPrefs.SpeedRing.fixedTime)
  if (!_internal_has_fixedtime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fixedtime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocalGridPrefs_SpeedRing::set_allocated_fixedtime(std::string* fixedtime) {
  if (fixedtime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fixedtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fixedtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.LocalGridPrefs.SpeedRing.fixedTime)
}

// optional .simData.ElapsedTimeFormat timeFormat = 3 [default = ELAPSED_HOURS];
inline bool LocalGridPrefs_SpeedRing::_internal_has_timeformat() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LocalGridPrefs_SpeedRing::has_timeformat() const {
  return _internal_has_timeformat();
}
inline void LocalGridPrefs_SpeedRing::clear_timeformat() {
  timeformat_ = 3;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::simData::ElapsedTimeFormat LocalGridPrefs_SpeedRing::_internal_timeformat() const {
  return static_cast< ::simData::ElapsedTimeFormat >(timeformat_);
}
inline ::simData::ElapsedTimeFormat LocalGridPrefs_SpeedRing::timeformat() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.SpeedRing.timeFormat)
  return _internal_timeformat();
}
inline void LocalGridPrefs_SpeedRing::_internal_set_timeformat(::simData::ElapsedTimeFormat value) {
  assert(::simData::ElapsedTimeFormat_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  timeformat_ = value;
}
inline void LocalGridPrefs_SpeedRing::set_timeformat(::simData::ElapsedTimeFormat value) {
  _internal_set_timeformat(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.SpeedRing.timeFormat)
}

// optional double radius = 4 [default = 1];
inline bool LocalGridPrefs_SpeedRing::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LocalGridPrefs_SpeedRing::has_radius() const {
  return _internal_has_radius();
}
inline void LocalGridPrefs_SpeedRing::clear_radius() {
  radius_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline double LocalGridPrefs_SpeedRing::_internal_radius() const {
  return radius_;
}
inline double LocalGridPrefs_SpeedRing::radius() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.SpeedRing.radius)
  return _internal_radius();
}
inline void LocalGridPrefs_SpeedRing::_internal_set_radius(double value) {
  _has_bits_[0] |= 0x00000008u;
  radius_ = value;
}
inline void LocalGridPrefs_SpeedRing::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.SpeedRing.radius)
}

// optional bool usePlatformSpeed = 5 [default = true];
inline bool LocalGridPrefs_SpeedRing::_internal_has_useplatformspeed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LocalGridPrefs_SpeedRing::has_useplatformspeed() const {
  return _internal_has_useplatformspeed();
}
inline void LocalGridPrefs_SpeedRing::clear_useplatformspeed() {
  useplatformspeed_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool LocalGridPrefs_SpeedRing::_internal_useplatformspeed() const {
  return useplatformspeed_;
}
inline bool LocalGridPrefs_SpeedRing::useplatformspeed() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.SpeedRing.usePlatformSpeed)
  return _internal_useplatformspeed();
}
inline void LocalGridPrefs_SpeedRing::_internal_set_useplatformspeed(bool value) {
  _has_bits_[0] |= 0x00000020u;
  useplatformspeed_ = value;
}
inline void LocalGridPrefs_SpeedRing::set_useplatformspeed(bool value) {
  _internal_set_useplatformspeed(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.SpeedRing.usePlatformSpeed)
}

// optional double speedToUse = 6 [default = 10];
inline bool LocalGridPrefs_SpeedRing::_internal_has_speedtouse() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LocalGridPrefs_SpeedRing::has_speedtouse() const {
  return _internal_has_speedtouse();
}
inline void LocalGridPrefs_SpeedRing::clear_speedtouse() {
  speedtouse_ = 10;
  _has_bits_[0] &= ~0x00000080u;
}
inline double LocalGridPrefs_SpeedRing::_internal_speedtouse() const {
  return speedtouse_;
}
inline double LocalGridPrefs_SpeedRing::speedtouse() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.SpeedRing.speedToUse)
  return _internal_speedtouse();
}
inline void LocalGridPrefs_SpeedRing::_internal_set_speedtouse(double value) {
  _has_bits_[0] |= 0x00000080u;
  speedtouse_ = value;
}
inline void LocalGridPrefs_SpeedRing::set_speedtouse(double value) {
  _internal_set_speedtouse(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.SpeedRing.speedToUse)
}

// optional bool displayTime = 7 [default = true];
inline bool LocalGridPrefs_SpeedRing::_internal_has_displaytime() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LocalGridPrefs_SpeedRing::has_displaytime() const {
  return _internal_has_displaytime();
}
inline void LocalGridPrefs_SpeedRing::clear_displaytime() {
  displaytime_ = true;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool LocalGridPrefs_SpeedRing::_internal_displaytime() const {
  return displaytime_;
}
inline bool LocalGridPrefs_SpeedRing::displaytime() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.SpeedRing.displayTime)
  return _internal_displaytime();
}
inline void LocalGridPrefs_SpeedRing::_internal_set_displaytime(bool value) {
  _has_bits_[0] |= 0x00000040u;
  displaytime_ = value;
}
inline void LocalGridPrefs_SpeedRing::set_displaytime(bool value) {
  _internal_set_displaytime(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.SpeedRing.displayTime)
}

// optional .simData.SpeedUnits speedUnits = 8 [default = UNITS_KNOTS];
inline bool LocalGridPrefs_SpeedRing::_internal_has_speedunits() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LocalGridPrefs_SpeedRing::has_speedunits() const {
  return _internal_has_speedunits();
}
inline void LocalGridPrefs_SpeedRing::clear_speedunits() {
  speedunits_ = 42;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::simData::SpeedUnits LocalGridPrefs_SpeedRing::_internal_speedunits() const {
  return static_cast< ::simData::SpeedUnits >(speedunits_);
}
inline ::simData::SpeedUnits LocalGridPrefs_SpeedRing::speedunits() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.SpeedRing.speedUnits)
  return _internal_speedunits();
}
inline void LocalGridPrefs_SpeedRing::_internal_set_speedunits(::simData::SpeedUnits value) {
  assert(::simData::SpeedUnits_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  speedunits_ = value;
}
inline void LocalGridPrefs_SpeedRing::set_speedunits(::simData::SpeedUnits value) {
  _internal_set_speedunits(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.SpeedRing.speedUnits)
}

// -------------------------------------------------------------------

// LocalGridPrefs_GridSettings

// optional uint32 numDivisions = 1 [default = 1];
inline bool LocalGridPrefs_GridSettings::_internal_has_numdivisions() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocalGridPrefs_GridSettings::has_numdivisions() const {
  return _internal_has_numdivisions();
}
inline void LocalGridPrefs_GridSettings::clear_numdivisions() {
  numdivisions_ = 1u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalGridPrefs_GridSettings::_internal_numdivisions() const {
  return numdivisions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalGridPrefs_GridSettings::numdivisions() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.GridSettings.numDivisions)
  return _internal_numdivisions();
}
inline void LocalGridPrefs_GridSettings::_internal_set_numdivisions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  numdivisions_ = value;
}
inline void LocalGridPrefs_GridSettings::set_numdivisions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numdivisions(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.GridSettings.numDivisions)
}

// optional uint32 numSubDivisions = 2 [default = 1];
inline bool LocalGridPrefs_GridSettings::_internal_has_numsubdivisions() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LocalGridPrefs_GridSettings::has_numsubdivisions() const {
  return _internal_has_numsubdivisions();
}
inline void LocalGridPrefs_GridSettings::clear_numsubdivisions() {
  numsubdivisions_ = 1u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalGridPrefs_GridSettings::_internal_numsubdivisions() const {
  return numsubdivisions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalGridPrefs_GridSettings::numsubdivisions() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.GridSettings.numSubDivisions)
  return _internal_numsubdivisions();
}
inline void LocalGridPrefs_GridSettings::_internal_set_numsubdivisions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  numsubdivisions_ = value;
}
inline void LocalGridPrefs_GridSettings::set_numsubdivisions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numsubdivisions(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.GridSettings.numSubDivisions)
}

// optional double sectorAngle = 3 [default = 30];
inline bool LocalGridPrefs_GridSettings::_internal_has_sectorangle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LocalGridPrefs_GridSettings::has_sectorangle() const {
  return _internal_has_sectorangle();
}
inline void LocalGridPrefs_GridSettings::clear_sectorangle() {
  sectorangle_ = 30;
  _has_bits_[0] &= ~0x00000004u;
}
inline double LocalGridPrefs_GridSettings::_internal_sectorangle() const {
  return sectorangle_;
}
inline double LocalGridPrefs_GridSettings::sectorangle() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.GridSettings.sectorAngle)
  return _internal_sectorangle();
}
inline void LocalGridPrefs_GridSettings::_internal_set_sectorangle(double value) {
  _has_bits_[0] |= 0x00000004u;
  sectorangle_ = value;
}
inline void LocalGridPrefs_GridSettings::set_sectorangle(double value) {
  _internal_set_sectorangle(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.GridSettings.sectorAngle)
}

// -------------------------------------------------------------------

// LocalGridPrefs

// optional .simData.LocalGridPrefs.Type gridType = 1 [default = POLAR];
inline bool LocalGridPrefs::_internal_has_gridtype() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_gridtype() const {
  return _internal_has_gridtype();
}
inline void LocalGridPrefs::clear_gridtype() {
  gridtype_ = 2;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::simData::LocalGridPrefs_Type LocalGridPrefs::_internal_gridtype() const {
  return static_cast< ::simData::LocalGridPrefs_Type >(gridtype_);
}
inline ::simData::LocalGridPrefs_Type LocalGridPrefs::gridtype() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.gridType)
  return _internal_gridtype();
}
inline void LocalGridPrefs::_internal_set_gridtype(::simData::LocalGridPrefs_Type value) {
  assert(::simData::LocalGridPrefs_Type_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  gridtype_ = value;
}
inline void LocalGridPrefs::set_gridtype(::simData::LocalGridPrefs_Type value) {
  _internal_set_gridtype(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.gridType)
}

// optional bool gridLabelDraw = 2 [default = true];
inline bool LocalGridPrefs::_internal_has_gridlabeldraw() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_gridlabeldraw() const {
  return _internal_has_gridlabeldraw();
}
inline void LocalGridPrefs::clear_gridlabeldraw() {
  gridlabeldraw_ = true;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool LocalGridPrefs::_internal_gridlabeldraw() const {
  return gridlabeldraw_;
}
inline bool LocalGridPrefs::gridlabeldraw() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.gridLabelDraw)
  return _internal_gridlabeldraw();
}
inline void LocalGridPrefs::_internal_set_gridlabeldraw(bool value) {
  _has_bits_[0] |= 0x00002000u;
  gridlabeldraw_ = value;
}
inline void LocalGridPrefs::set_gridlabeldraw(bool value) {
  _internal_set_gridlabeldraw(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.gridLabelDraw)
}

// optional fixed32 gridLabelColor = 3 [default = 4294902015];
inline bool LocalGridPrefs::_internal_has_gridlabelcolor() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_gridlabelcolor() const {
  return _internal_has_gridlabelcolor();
}
inline void LocalGridPrefs::clear_gridlabelcolor() {
  gridlabelcolor_ = 4294902015u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalGridPrefs::_internal_gridlabelcolor() const {
  return gridlabelcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalGridPrefs::gridlabelcolor() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.gridLabelColor)
  return _internal_gridlabelcolor();
}
inline void LocalGridPrefs::_internal_set_gridlabelcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  gridlabelcolor_ = value;
}
inline void LocalGridPrefs::set_gridlabelcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gridlabelcolor(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.gridLabelColor)
}

// optional .simData.TextOutline gridLabelTextOutline = 4 [default = TO_THIN];
inline bool LocalGridPrefs::_internal_has_gridlabeltextoutline() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_gridlabeltextoutline() const {
  return _internal_has_gridlabeltextoutline();
}
inline void LocalGridPrefs::clear_gridlabeltextoutline() {
  gridlabeltextoutline_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::simData::TextOutline LocalGridPrefs::_internal_gridlabeltextoutline() const {
  return static_cast< ::simData::TextOutline >(gridlabeltextoutline_);
}
inline ::simData::TextOutline LocalGridPrefs::gridlabeltextoutline() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.gridLabelTextOutline)
  return _internal_gridlabeltextoutline();
}
inline void LocalGridPrefs::_internal_set_gridlabeltextoutline(::simData::TextOutline value) {
  assert(::simData::TextOutline_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  gridlabeltextoutline_ = value;
}
inline void LocalGridPrefs::set_gridlabeltextoutline(::simData::TextOutline value) {
  _internal_set_gridlabeltextoutline(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.gridLabelTextOutline)
}

// optional fixed32 gridLabelOutlineColor = 5 [default = 255];
inline bool LocalGridPrefs::_internal_has_gridlabeloutlinecolor() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_gridlabeloutlinecolor() const {
  return _internal_has_gridlabeloutlinecolor();
}
inline void LocalGridPrefs::clear_gridlabeloutlinecolor() {
  gridlabeloutlinecolor_ = 255u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalGridPrefs::_internal_gridlabeloutlinecolor() const {
  return gridlabeloutlinecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalGridPrefs::gridlabeloutlinecolor() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.gridLabelOutlineColor)
  return _internal_gridlabeloutlinecolor();
}
inline void LocalGridPrefs::_internal_set_gridlabeloutlinecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  gridlabeloutlinecolor_ = value;
}
inline void LocalGridPrefs::set_gridlabeloutlinecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gridlabeloutlinecolor(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.gridLabelOutlineColor)
}

// optional string gridLabelFontName = 6 [default = "arialbd.ttf"];
inline bool LocalGridPrefs::_internal_has_gridlabelfontname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_gridlabelfontname() const {
  return _internal_has_gridlabelfontname();
}
inline void LocalGridPrefs::clear_gridlabelfontname() {
  gridlabelfontname_.ClearToDefault(::simData::LocalGridPrefs::_i_give_permission_to_break_this_code_default_gridlabelfontname_, GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LocalGridPrefs::gridlabelfontname() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.gridLabelFontName)
  if (gridlabelfontname_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_gridlabelfontname_.get();
  return _internal_gridlabelfontname();
}
inline void LocalGridPrefs::set_gridlabelfontname(const std::string& value) {
  _internal_set_gridlabelfontname(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.gridLabelFontName)
}
inline std::string* LocalGridPrefs::mutable_gridlabelfontname() {
  // @@protoc_insertion_point(field_mutable:simData.LocalGridPrefs.gridLabelFontName)
  return _internal_mutable_gridlabelfontname();
}
inline const std::string& LocalGridPrefs::_internal_gridlabelfontname() const {
  return gridlabelfontname_.Get();
}
inline void LocalGridPrefs::_internal_set_gridlabelfontname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gridlabelfontname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void LocalGridPrefs::set_gridlabelfontname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gridlabelfontname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.LocalGridPrefs.gridLabelFontName)
}
inline void LocalGridPrefs::set_gridlabelfontname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gridlabelfontname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.LocalGridPrefs.gridLabelFontName)
}
inline void LocalGridPrefs::set_gridlabelfontname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gridlabelfontname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.LocalGridPrefs.gridLabelFontName)
}
inline std::string* LocalGridPrefs::_internal_mutable_gridlabelfontname() {
  _has_bits_[0] |= 0x00000001u;
  return gridlabelfontname_.Mutable(::simData::LocalGridPrefs::_i_give_permission_to_break_this_code_default_gridlabelfontname_, GetArena());
}
inline std::string* LocalGridPrefs::release_gridlabelfontname() {
  // @@protoc_insertion_point(field_release:simData.LocalGridPrefs.gridLabelFontName)
  if (!_internal_has_gridlabelfontname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gridlabelfontname_.ReleaseNonDefault(nullptr, GetArena());
}
inline void LocalGridPrefs::set_allocated_gridlabelfontname(std::string* gridlabelfontname) {
  if (gridlabelfontname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gridlabelfontname_.SetAllocated(nullptr, gridlabelfontname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.LocalGridPrefs.gridLabelFontName)
}

// optional fixed32 gridLabelFontSize = 7 [default = 14];
inline bool LocalGridPrefs::_internal_has_gridlabelfontsize() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_gridlabelfontsize() const {
  return _internal_has_gridlabelfontsize();
}
inline void LocalGridPrefs::clear_gridlabelfontsize() {
  gridlabelfontsize_ = 14u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalGridPrefs::_internal_gridlabelfontsize() const {
  return gridlabelfontsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalGridPrefs::gridlabelfontsize() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.gridLabelFontSize)
  return _internal_gridlabelfontsize();
}
inline void LocalGridPrefs::_internal_set_gridlabelfontsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  gridlabelfontsize_ = value;
}
inline void LocalGridPrefs::set_gridlabelfontsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gridlabelfontsize(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.gridLabelFontSize)
}

// optional int32 gridLabelPrecision = 19 [default = 1];
inline bool LocalGridPrefs::_internal_has_gridlabelprecision() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_gridlabelprecision() const {
  return _internal_has_gridlabelprecision();
}
inline void LocalGridPrefs::clear_gridlabelprecision() {
  gridlabelprecision_ = 1;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalGridPrefs::_internal_gridlabelprecision() const {
  return gridlabelprecision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalGridPrefs::gridlabelprecision() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.gridLabelPrecision)
  return _internal_gridlabelprecision();
}
inline void LocalGridPrefs::_internal_set_gridlabelprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  gridlabelprecision_ = value;
}
inline void LocalGridPrefs::set_gridlabelprecision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gridlabelprecision(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.gridLabelPrecision)
}

// optional bool drawGrid = 8 [default = false];
inline bool LocalGridPrefs::_internal_has_drawgrid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_drawgrid() const {
  return _internal_has_drawgrid();
}
inline void LocalGridPrefs::clear_drawgrid() {
  drawgrid_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool LocalGridPrefs::_internal_drawgrid() const {
  return drawgrid_;
}
inline bool LocalGridPrefs::drawgrid() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.drawGrid)
  return _internal_drawgrid();
}
inline void LocalGridPrefs::_internal_set_drawgrid(bool value) {
  _has_bits_[0] |= 0x00000020u;
  drawgrid_ = value;
}
inline void LocalGridPrefs::set_drawgrid(bool value) {
  _internal_set_drawgrid(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.drawGrid)
}

// optional fixed32 gridColor = 9 [default = 4294902015];
inline bool LocalGridPrefs::_internal_has_gridcolor() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_gridcolor() const {
  return _internal_has_gridcolor();
}
inline void LocalGridPrefs::clear_gridcolor() {
  gridcolor_ = 4294902015u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalGridPrefs::_internal_gridcolor() const {
  return gridcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalGridPrefs::gridcolor() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.gridColor)
  return _internal_gridcolor();
}
inline void LocalGridPrefs::_internal_set_gridcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  gridcolor_ = value;
}
inline void LocalGridPrefs::set_gridcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gridcolor(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.gridColor)
}

// optional double size = 10 [default = 20];
inline bool LocalGridPrefs::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_size() const {
  return _internal_has_size();
}
inline void LocalGridPrefs::clear_size() {
  size_ = 20;
  _has_bits_[0] &= ~0x00008000u;
}
inline double LocalGridPrefs::_internal_size() const {
  return size_;
}
inline double LocalGridPrefs::size() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.size)
  return _internal_size();
}
inline void LocalGridPrefs::_internal_set_size(double value) {
  _has_bits_[0] |= 0x00008000u;
  size_ = value;
}
inline void LocalGridPrefs::set_size(double value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.size)
}

// optional .simData.LocalGridPrefs.SpeedRing speedRing = 11;
inline bool LocalGridPrefs::_internal_has_speedring() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || speedring_ != nullptr);
  return value;
}
inline bool LocalGridPrefs::has_speedring() const {
  return _internal_has_speedring();
}
inline void LocalGridPrefs::clear_speedring() {
  if (speedring_ != nullptr) speedring_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::simData::LocalGridPrefs_SpeedRing& LocalGridPrefs::_internal_speedring() const {
  const ::simData::LocalGridPrefs_SpeedRing* p = speedring_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::LocalGridPrefs_SpeedRing&>(
      ::simData::_LocalGridPrefs_SpeedRing_default_instance_);
}
inline const ::simData::LocalGridPrefs_SpeedRing& LocalGridPrefs::speedring() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.speedRing)
  return _internal_speedring();
}
inline void LocalGridPrefs::unsafe_arena_set_allocated_speedring(
    ::simData::LocalGridPrefs_SpeedRing* speedring) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speedring_);
  }
  speedring_ = speedring;
  if (speedring) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LocalGridPrefs.speedRing)
}
inline ::simData::LocalGridPrefs_SpeedRing* LocalGridPrefs::release_speedring() {
  _has_bits_[0] &= ~0x00000002u;
  ::simData::LocalGridPrefs_SpeedRing* temp = speedring_;
  speedring_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::LocalGridPrefs_SpeedRing* LocalGridPrefs::unsafe_arena_release_speedring() {
  // @@protoc_insertion_point(field_release:simData.LocalGridPrefs.speedRing)
  _has_bits_[0] &= ~0x00000002u;
  ::simData::LocalGridPrefs_SpeedRing* temp = speedring_;
  speedring_ = nullptr;
  return temp;
}
inline ::simData::LocalGridPrefs_SpeedRing* LocalGridPrefs::_internal_mutable_speedring() {
  _has_bits_[0] |= 0x00000002u;
  if (speedring_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::LocalGridPrefs_SpeedRing>(GetArena());
    speedring_ = p;
  }
  return speedring_;
}
inline ::simData::LocalGridPrefs_SpeedRing* LocalGridPrefs::mutable_speedring() {
  // @@protoc_insertion_point(field_mutable:simData.LocalGridPrefs.speedRing)
  return _internal_mutable_speedring();
}
inline void LocalGridPrefs::set_allocated_speedring(::simData::LocalGridPrefs_SpeedRing* speedring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete speedring_;
  }
  if (speedring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(speedring);
    if (message_arena != submessage_arena) {
      speedring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speedring, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  speedring_ = speedring;
  // @@protoc_insertion_point(field_set_allocated:simData.LocalGridPrefs.speedRing)
}

// optional .simData.LocalGridPrefs.GridSettings gridSettings = 12;
inline bool LocalGridPrefs::_internal_has_gridsettings() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || gridsettings_ != nullptr);
  return value;
}
inline bool LocalGridPrefs::has_gridsettings() const {
  return _internal_has_gridsettings();
}
inline void LocalGridPrefs::clear_gridsettings() {
  if (gridsettings_ != nullptr) gridsettings_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::simData::LocalGridPrefs_GridSettings& LocalGridPrefs::_internal_gridsettings() const {
  const ::simData::LocalGridPrefs_GridSettings* p = gridsettings_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::LocalGridPrefs_GridSettings&>(
      ::simData::_LocalGridPrefs_GridSettings_default_instance_);
}
inline const ::simData::LocalGridPrefs_GridSettings& LocalGridPrefs::gridsettings() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.gridSettings)
  return _internal_gridsettings();
}
inline void LocalGridPrefs::unsafe_arena_set_allocated_gridsettings(
    ::simData::LocalGridPrefs_GridSettings* gridsettings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gridsettings_);
  }
  gridsettings_ = gridsettings;
  if (gridsettings) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LocalGridPrefs.gridSettings)
}
inline ::simData::LocalGridPrefs_GridSettings* LocalGridPrefs::release_gridsettings() {
  _has_bits_[0] &= ~0x00000004u;
  ::simData::LocalGridPrefs_GridSettings* temp = gridsettings_;
  gridsettings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::LocalGridPrefs_GridSettings* LocalGridPrefs::unsafe_arena_release_gridsettings() {
  // @@protoc_insertion_point(field_release:simData.LocalGridPrefs.gridSettings)
  _has_bits_[0] &= ~0x00000004u;
  ::simData::LocalGridPrefs_GridSettings* temp = gridsettings_;
  gridsettings_ = nullptr;
  return temp;
}
inline ::simData::LocalGridPrefs_GridSettings* LocalGridPrefs::_internal_mutable_gridsettings() {
  _has_bits_[0] |= 0x00000004u;
  if (gridsettings_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::LocalGridPrefs_GridSettings>(GetArena());
    gridsettings_ = p;
  }
  return gridsettings_;
}
inline ::simData::LocalGridPrefs_GridSettings* LocalGridPrefs::mutable_gridsettings() {
  // @@protoc_insertion_point(field_mutable:simData.LocalGridPrefs.gridSettings)
  return _internal_mutable_gridsettings();
}
inline void LocalGridPrefs::set_allocated_gridsettings(::simData::LocalGridPrefs_GridSettings* gridsettings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gridsettings_;
  }
  if (gridsettings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gridsettings);
    if (message_arena != submessage_arena) {
      gridsettings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gridsettings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  gridsettings_ = gridsettings;
  // @@protoc_insertion_point(field_set_allocated:simData.LocalGridPrefs.gridSettings)
}

// optional .simData.Position gridPositionOffset = 13;
inline bool LocalGridPrefs::_internal_has_gridpositionoffset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || gridpositionoffset_ != nullptr);
  return value;
}
inline bool LocalGridPrefs::has_gridpositionoffset() const {
  return _internal_has_gridpositionoffset();
}
inline void LocalGridPrefs::clear_gridpositionoffset() {
  if (gridpositionoffset_ != nullptr) gridpositionoffset_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::simData::Position& LocalGridPrefs::_internal_gridpositionoffset() const {
  const ::simData::Position* p = gridpositionoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::Position&>(
      ::simData::_Position_default_instance_);
}
inline const ::simData::Position& LocalGridPrefs::gridpositionoffset() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.gridPositionOffset)
  return _internal_gridpositionoffset();
}
inline void LocalGridPrefs::unsafe_arena_set_allocated_gridpositionoffset(
    ::simData::Position* gridpositionoffset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gridpositionoffset_);
  }
  gridpositionoffset_ = gridpositionoffset;
  if (gridpositionoffset) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LocalGridPrefs.gridPositionOffset)
}
inline ::simData::Position* LocalGridPrefs::release_gridpositionoffset() {
  _has_bits_[0] &= ~0x00000008u;
  ::simData::Position* temp = gridpositionoffset_;
  gridpositionoffset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::Position* LocalGridPrefs::unsafe_arena_release_gridpositionoffset() {
  // @@protoc_insertion_point(field_release:simData.LocalGridPrefs.gridPositionOffset)
  _has_bits_[0] &= ~0x00000008u;
  ::simData::Position* temp = gridpositionoffset_;
  gridpositionoffset_ = nullptr;
  return temp;
}
inline ::simData::Position* LocalGridPrefs::_internal_mutable_gridpositionoffset() {
  _has_bits_[0] |= 0x00000008u;
  if (gridpositionoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::Position>(GetArena());
    gridpositionoffset_ = p;
  }
  return gridpositionoffset_;
}
inline ::simData::Position* LocalGridPrefs::mutable_gridpositionoffset() {
  // @@protoc_insertion_point(field_mutable:simData.LocalGridPrefs.gridPositionOffset)
  return _internal_mutable_gridpositionoffset();
}
inline void LocalGridPrefs::set_allocated_gridpositionoffset(::simData::Position* gridpositionoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gridpositionoffset_;
  }
  if (gridpositionoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gridpositionoffset);
    if (message_arena != submessage_arena) {
      gridpositionoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gridpositionoffset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gridpositionoffset_ = gridpositionoffset;
  // @@protoc_insertion_point(field_set_allocated:simData.LocalGridPrefs.gridPositionOffset)
}

// optional .simData.DistanceUnits positionOffsetUnits = 20 [default = UNITS_METERS];
inline bool LocalGridPrefs::_internal_has_positionoffsetunits() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_positionoffsetunits() const {
  return _internal_has_positionoffsetunits();
}
inline void LocalGridPrefs::clear_positionoffsetunits() {
  positionoffsetunits_ = 20;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::simData::DistanceUnits LocalGridPrefs::_internal_positionoffsetunits() const {
  return static_cast< ::simData::DistanceUnits >(positionoffsetunits_);
}
inline ::simData::DistanceUnits LocalGridPrefs::positionoffsetunits() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.positionOffsetUnits)
  return _internal_positionoffsetunits();
}
inline void LocalGridPrefs::_internal_set_positionoffsetunits(::simData::DistanceUnits value) {
  assert(::simData::DistanceUnits_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  positionoffsetunits_ = value;
}
inline void LocalGridPrefs::set_positionoffsetunits(::simData::DistanceUnits value) {
  _internal_set_positionoffsetunits(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.positionOffsetUnits)
}

// optional .simData.BodyOrientation gridOrientationOffset = 14;
inline bool LocalGridPrefs::_internal_has_gridorientationoffset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || gridorientationoffset_ != nullptr);
  return value;
}
inline bool LocalGridPrefs::has_gridorientationoffset() const {
  return _internal_has_gridorientationoffset();
}
inline void LocalGridPrefs::clear_gridorientationoffset() {
  if (gridorientationoffset_ != nullptr) gridorientationoffset_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::simData::BodyOrientation& LocalGridPrefs::_internal_gridorientationoffset() const {
  const ::simData::BodyOrientation* p = gridorientationoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::BodyOrientation&>(
      ::simData::_BodyOrientation_default_instance_);
}
inline const ::simData::BodyOrientation& LocalGridPrefs::gridorientationoffset() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.gridOrientationOffset)
  return _internal_gridorientationoffset();
}
inline void LocalGridPrefs::unsafe_arena_set_allocated_gridorientationoffset(
    ::simData::BodyOrientation* gridorientationoffset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gridorientationoffset_);
  }
  gridorientationoffset_ = gridorientationoffset;
  if (gridorientationoffset) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LocalGridPrefs.gridOrientationOffset)
}
inline ::simData::BodyOrientation* LocalGridPrefs::release_gridorientationoffset() {
  _has_bits_[0] &= ~0x00000010u;
  ::simData::BodyOrientation* temp = gridorientationoffset_;
  gridorientationoffset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::BodyOrientation* LocalGridPrefs::unsafe_arena_release_gridorientationoffset() {
  // @@protoc_insertion_point(field_release:simData.LocalGridPrefs.gridOrientationOffset)
  _has_bits_[0] &= ~0x00000010u;
  ::simData::BodyOrientation* temp = gridorientationoffset_;
  gridorientationoffset_ = nullptr;
  return temp;
}
inline ::simData::BodyOrientation* LocalGridPrefs::_internal_mutable_gridorientationoffset() {
  _has_bits_[0] |= 0x00000010u;
  if (gridorientationoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::BodyOrientation>(GetArena());
    gridorientationoffset_ = p;
  }
  return gridorientationoffset_;
}
inline ::simData::BodyOrientation* LocalGridPrefs::mutable_gridorientationoffset() {
  // @@protoc_insertion_point(field_mutable:simData.LocalGridPrefs.gridOrientationOffset)
  return _internal_mutable_gridorientationoffset();
}
inline void LocalGridPrefs::set_allocated_gridorientationoffset(::simData::BodyOrientation* gridorientationoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gridorientationoffset_;
  }
  if (gridorientationoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gridorientationoffset);
    if (message_arena != submessage_arena) {
      gridorientationoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gridorientationoffset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  gridorientationoffset_ = gridorientationoffset;
  // @@protoc_insertion_point(field_set_allocated:simData.LocalGridPrefs.gridOrientationOffset)
}

// optional bool followYaw = 15 [default = true];
inline bool LocalGridPrefs::_internal_has_followyaw() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_followyaw() const {
  return _internal_has_followyaw();
}
inline void LocalGridPrefs::clear_followyaw() {
  followyaw_ = true;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool LocalGridPrefs::_internal_followyaw() const {
  return followyaw_;
}
inline bool LocalGridPrefs::followyaw() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.followYaw)
  return _internal_followyaw();
}
inline void LocalGridPrefs::_internal_set_followyaw(bool value) {
  _has_bits_[0] |= 0x00004000u;
  followyaw_ = value;
}
inline void LocalGridPrefs::set_followyaw(bool value) {
  _internal_set_followyaw(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.followYaw)
}

// optional bool followPitch = 16 [default = false];
inline bool LocalGridPrefs::_internal_has_followpitch() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_followpitch() const {
  return _internal_has_followpitch();
}
inline void LocalGridPrefs::clear_followpitch() {
  followpitch_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool LocalGridPrefs::_internal_followpitch() const {
  return followpitch_;
}
inline bool LocalGridPrefs::followpitch() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.followPitch)
  return _internal_followpitch();
}
inline void LocalGridPrefs::_internal_set_followpitch(bool value) {
  _has_bits_[0] |= 0x00000040u;
  followpitch_ = value;
}
inline void LocalGridPrefs::set_followpitch(bool value) {
  _internal_set_followpitch(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.followPitch)
}

// optional bool followRoll = 17 [default = false];
inline bool LocalGridPrefs::_internal_has_followroll() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_followroll() const {
  return _internal_has_followroll();
}
inline void LocalGridPrefs::clear_followroll() {
  followroll_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool LocalGridPrefs::_internal_followroll() const {
  return followroll_;
}
inline bool LocalGridPrefs::followroll() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.followRoll)
  return _internal_followroll();
}
inline void LocalGridPrefs::_internal_set_followroll(bool value) {
  _has_bits_[0] |= 0x00000080u;
  followroll_ = value;
}
inline void LocalGridPrefs::set_followroll(bool value) {
  _internal_set_followroll(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.followRoll)
}

// optional .simData.DistanceUnits sizeUnits = 18 [default = UNITS_NAUTICAL_MILES];
inline bool LocalGridPrefs::_internal_has_sizeunits() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool LocalGridPrefs::has_sizeunits() const {
  return _internal_has_sizeunits();
}
inline void LocalGridPrefs::clear_sizeunits() {
  sizeunits_ = 26;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::simData::DistanceUnits LocalGridPrefs::_internal_sizeunits() const {
  return static_cast< ::simData::DistanceUnits >(sizeunits_);
}
inline ::simData::DistanceUnits LocalGridPrefs::sizeunits() const {
  // @@protoc_insertion_point(field_get:simData.LocalGridPrefs.sizeUnits)
  return _internal_sizeunits();
}
inline void LocalGridPrefs::_internal_set_sizeunits(::simData::DistanceUnits value) {
  assert(::simData::DistanceUnits_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  sizeunits_ = value;
}
inline void LocalGridPrefs::set_sizeunits(::simData::DistanceUnits value) {
  _internal_set_sizeunits(value);
  // @@protoc_insertion_point(field_set:simData.LocalGridPrefs.sizeUnits)
}

// -------------------------------------------------------------------

// CommonPrefs

// optional bool dataDraw = 1 [default = true];
inline bool CommonPrefs::_internal_has_datadraw() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommonPrefs::has_datadraw() const {
  return _internal_has_datadraw();
}
inline void CommonPrefs::clear_datadraw() {
  datadraw_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CommonPrefs::_internal_datadraw() const {
  return datadraw_;
}
inline bool CommonPrefs::datadraw() const {
  // @@protoc_insertion_point(field_get:simData.CommonPrefs.dataDraw)
  return _internal_datadraw();
}
inline void CommonPrefs::_internal_set_datadraw(bool value) {
  _has_bits_[0] |= 0x00000080u;
  datadraw_ = value;
}
inline void CommonPrefs::set_datadraw(bool value) {
  _internal_set_datadraw(value);
  // @@protoc_insertion_point(field_set:simData.CommonPrefs.dataDraw)
}

// optional bool draw = 2 [default = true];
inline bool CommonPrefs::_internal_has_draw() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CommonPrefs::has_draw() const {
  return _internal_has_draw();
}
inline void CommonPrefs::clear_draw() {
  draw_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CommonPrefs::_internal_draw() const {
  return draw_;
}
inline bool CommonPrefs::draw() const {
  // @@protoc_insertion_point(field_get:simData.CommonPrefs.draw)
  return _internal_draw();
}
inline void CommonPrefs::_internal_set_draw(bool value) {
  _has_bits_[0] |= 0x00000100u;
  draw_ = value;
}
inline void CommonPrefs::set_draw(bool value) {
  _internal_set_draw(value);
  // @@protoc_insertion_point(field_set:simData.CommonPrefs.draw)
}

// optional string name = 3 [default = "entity"];
inline bool CommonPrefs::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommonPrefs::has_name() const {
  return _internal_has_name();
}
inline void CommonPrefs::clear_name() {
  name_.ClearToDefault(::simData::CommonPrefs::_i_give_permission_to_break_this_code_default_name_, GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommonPrefs::name() const {
  // @@protoc_insertion_point(field_get:simData.CommonPrefs.name)
  if (name_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_name_.get();
  return _internal_name();
}
inline void CommonPrefs::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:simData.CommonPrefs.name)
}
inline std::string* CommonPrefs::mutable_name() {
  // @@protoc_insertion_point(field_mutable:simData.CommonPrefs.name)
  return _internal_mutable_name();
}
inline const std::string& CommonPrefs::_internal_name() const {
  return name_.Get();
}
inline void CommonPrefs::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void CommonPrefs::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.CommonPrefs.name)
}
inline void CommonPrefs::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.CommonPrefs.name)
}
inline void CommonPrefs::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.CommonPrefs.name)
}
inline std::string* CommonPrefs::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::simData::CommonPrefs::_i_give_permission_to_break_this_code_default_name_, GetArena());
}
inline std::string* CommonPrefs::release_name() {
  // @@protoc_insertion_point(field_release:simData.CommonPrefs.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(nullptr, GetArena());
}
inline void CommonPrefs::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(nullptr, name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.CommonPrefs.name)
}

// optional bool useAlias = 4 [default = false];
inline bool CommonPrefs::_internal_has_usealias() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommonPrefs::has_usealias() const {
  return _internal_has_usealias();
}
inline void CommonPrefs::clear_usealias() {
  usealias_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CommonPrefs::_internal_usealias() const {
  return usealias_;
}
inline bool CommonPrefs::usealias() const {
  // @@protoc_insertion_point(field_get:simData.CommonPrefs.useAlias)
  return _internal_usealias();
}
inline void CommonPrefs::_internal_set_usealias(bool value) {
  _has_bits_[0] |= 0x00000010u;
  usealias_ = value;
}
inline void CommonPrefs::set_usealias(bool value) {
  _internal_set_usealias(value);
  // @@protoc_insertion_point(field_set:simData.CommonPrefs.useAlias)
}

// optional string alias = 5 [default = ""];
inline bool CommonPrefs::_internal_has_alias() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommonPrefs::has_alias() const {
  return _internal_has_alias();
}
inline void CommonPrefs::clear_alias() {
  alias_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommonPrefs::alias() const {
  // @@protoc_insertion_point(field_get:simData.CommonPrefs.alias)
  return _internal_alias();
}
inline void CommonPrefs::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:simData.CommonPrefs.alias)
}
inline std::string* CommonPrefs::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:simData.CommonPrefs.alias)
  return _internal_mutable_alias();
}
inline const std::string& CommonPrefs::_internal_alias() const {
  return alias_.Get();
}
inline void CommonPrefs::_internal_set_alias(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommonPrefs::set_alias(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  alias_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.CommonPrefs.alias)
}
inline void CommonPrefs::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.CommonPrefs.alias)
}
inline void CommonPrefs::set_alias(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.CommonPrefs.alias)
}
inline std::string* CommonPrefs::_internal_mutable_alias() {
  _has_bits_[0] |= 0x00000002u;
  return alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommonPrefs::release_alias() {
  // @@protoc_insertion_point(field_release:simData.CommonPrefs.alias)
  if (!_internal_has_alias()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return alias_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommonPrefs::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.CommonPrefs.alias)
}

// optional .simData.LabelPrefs labelPrefs = 6;
inline bool CommonPrefs::_internal_has_labelprefs() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || labelprefs_ != nullptr);
  return value;
}
inline bool CommonPrefs::has_labelprefs() const {
  return _internal_has_labelprefs();
}
inline void CommonPrefs::clear_labelprefs() {
  if (labelprefs_ != nullptr) labelprefs_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::simData::LabelPrefs& CommonPrefs::_internal_labelprefs() const {
  const ::simData::LabelPrefs* p = labelprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::LabelPrefs&>(
      ::simData::_LabelPrefs_default_instance_);
}
inline const ::simData::LabelPrefs& CommonPrefs::labelprefs() const {
  // @@protoc_insertion_point(field_get:simData.CommonPrefs.labelPrefs)
  return _internal_labelprefs();
}
inline void CommonPrefs::unsafe_arena_set_allocated_labelprefs(
    ::simData::LabelPrefs* labelprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(labelprefs_);
  }
  labelprefs_ = labelprefs;
  if (labelprefs) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.CommonPrefs.labelPrefs)
}
inline ::simData::LabelPrefs* CommonPrefs::release_labelprefs() {
  _has_bits_[0] &= ~0x00000004u;
  ::simData::LabelPrefs* temp = labelprefs_;
  labelprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::LabelPrefs* CommonPrefs::unsafe_arena_release_labelprefs() {
  // @@protoc_insertion_point(field_release:simData.CommonPrefs.labelPrefs)
  _has_bits_[0] &= ~0x00000004u;
  ::simData::LabelPrefs* temp = labelprefs_;
  labelprefs_ = nullptr;
  return temp;
}
inline ::simData::LabelPrefs* CommonPrefs::_internal_mutable_labelprefs() {
  _has_bits_[0] |= 0x00000004u;
  if (labelprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::LabelPrefs>(GetArena());
    labelprefs_ = p;
  }
  return labelprefs_;
}
inline ::simData::LabelPrefs* CommonPrefs::mutable_labelprefs() {
  // @@protoc_insertion_point(field_mutable:simData.CommonPrefs.labelPrefs)
  return _internal_mutable_labelprefs();
}
inline void CommonPrefs::set_allocated_labelprefs(::simData::LabelPrefs* labelprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete labelprefs_;
  }
  if (labelprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(labelprefs);
    if (message_arena != submessage_arena) {
      labelprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labelprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  labelprefs_ = labelprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.CommonPrefs.labelPrefs)
}

// optional fixed32 color = 7 [default = 4294902015];
inline bool CommonPrefs::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CommonPrefs::has_color() const {
  return _internal_has_color();
}
inline void CommonPrefs::clear_color() {
  color_ = 4294902015u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommonPrefs::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommonPrefs::color() const {
  // @@protoc_insertion_point(field_get:simData.CommonPrefs.color)
  return _internal_color();
}
inline void CommonPrefs::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  color_ = value;
}
inline void CommonPrefs::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:simData.CommonPrefs.color)
}

// optional bool useOverrideColor = 8 [default = false];
inline bool CommonPrefs::_internal_has_useoverridecolor() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommonPrefs::has_useoverridecolor() const {
  return _internal_has_useoverridecolor();
}
inline void CommonPrefs::clear_useoverridecolor() {
  useoverridecolor_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommonPrefs::_internal_useoverridecolor() const {
  return useoverridecolor_;
}
inline bool CommonPrefs::useoverridecolor() const {
  // @@protoc_insertion_point(field_get:simData.CommonPrefs.useOverrideColor)
  return _internal_useoverridecolor();
}
inline void CommonPrefs::_internal_set_useoverridecolor(bool value) {
  _has_bits_[0] |= 0x00000020u;
  useoverridecolor_ = value;
}
inline void CommonPrefs::set_useoverridecolor(bool value) {
  _internal_set_useoverridecolor(value);
  // @@protoc_insertion_point(field_set:simData.CommonPrefs.useOverrideColor)
}

// optional fixed32 overrideColor = 9 [default = 4278190335];
inline bool CommonPrefs::_internal_has_overridecolor() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CommonPrefs::has_overridecolor() const {
  return _internal_has_overridecolor();
}
inline void CommonPrefs::clear_overridecolor() {
  overridecolor_ = 4278190335u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommonPrefs::_internal_overridecolor() const {
  return overridecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommonPrefs::overridecolor() const {
  // @@protoc_insertion_point(field_get:simData.CommonPrefs.overrideColor)
  return _internal_overridecolor();
}
inline void CommonPrefs::_internal_set_overridecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  overridecolor_ = value;
}
inline void CommonPrefs::set_overridecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_overridecolor(value);
  // @@protoc_insertion_point(field_set:simData.CommonPrefs.overrideColor)
}

// optional double dataLimitTime = 10 [default = -1];
inline bool CommonPrefs::_internal_has_datalimittime() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CommonPrefs::has_datalimittime() const {
  return _internal_has_datalimittime();
}
inline void CommonPrefs::clear_datalimittime() {
  datalimittime_ = -1;
  _has_bits_[0] &= ~0x00000400u;
}
inline double CommonPrefs::_internal_datalimittime() const {
  return datalimittime_;
}
inline double CommonPrefs::datalimittime() const {
  // @@protoc_insertion_point(field_get:simData.CommonPrefs.dataLimitTime)
  return _internal_datalimittime();
}
inline void CommonPrefs::_internal_set_datalimittime(double value) {
  _has_bits_[0] |= 0x00000400u;
  datalimittime_ = value;
}
inline void CommonPrefs::set_datalimittime(double value) {
  _internal_set_datalimittime(value);
  // @@protoc_insertion_point(field_set:simData.CommonPrefs.dataLimitTime)
}

// optional uint32 dataLimitPoints = 11 [default = 1000];
inline bool CommonPrefs::_internal_has_datalimitpoints() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CommonPrefs::has_datalimitpoints() const {
  return _internal_has_datalimitpoints();
}
inline void CommonPrefs::clear_datalimitpoints() {
  datalimitpoints_ = 1000u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommonPrefs::_internal_datalimitpoints() const {
  return datalimitpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommonPrefs::datalimitpoints() const {
  // @@protoc_insertion_point(field_get:simData.CommonPrefs.dataLimitPoints)
  return _internal_datalimitpoints();
}
inline void CommonPrefs::_internal_set_datalimitpoints(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  datalimitpoints_ = value;
}
inline void CommonPrefs::set_datalimitpoints(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_datalimitpoints(value);
  // @@protoc_insertion_point(field_set:simData.CommonPrefs.dataLimitPoints)
}

// optional .simData.LocalGridPrefs localGrid = 12;
inline bool CommonPrefs::_internal_has_localgrid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || localgrid_ != nullptr);
  return value;
}
inline bool CommonPrefs::has_localgrid() const {
  return _internal_has_localgrid();
}
inline void CommonPrefs::clear_localgrid() {
  if (localgrid_ != nullptr) localgrid_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::simData::LocalGridPrefs& CommonPrefs::_internal_localgrid() const {
  const ::simData::LocalGridPrefs* p = localgrid_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::LocalGridPrefs&>(
      ::simData::_LocalGridPrefs_default_instance_);
}
inline const ::simData::LocalGridPrefs& CommonPrefs::localgrid() const {
  // @@protoc_insertion_point(field_get:simData.CommonPrefs.localGrid)
  return _internal_localgrid();
}
inline void CommonPrefs::unsafe_arena_set_allocated_localgrid(
    ::simData::LocalGridPrefs* localgrid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localgrid_);
  }
  localgrid_ = localgrid;
  if (localgrid) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.CommonPrefs.localGrid)
}
inline ::simData::LocalGridPrefs* CommonPrefs::release_localgrid() {
  _has_bits_[0] &= ~0x00000008u;
  ::simData::LocalGridPrefs* temp = localgrid_;
  localgrid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::LocalGridPrefs* CommonPrefs::unsafe_arena_release_localgrid() {
  // @@protoc_insertion_point(field_release:simData.CommonPrefs.localGrid)
  _has_bits_[0] &= ~0x00000008u;
  ::simData::LocalGridPrefs* temp = localgrid_;
  localgrid_ = nullptr;
  return temp;
}
inline ::simData::LocalGridPrefs* CommonPrefs::_internal_mutable_localgrid() {
  _has_bits_[0] |= 0x00000008u;
  if (localgrid_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::LocalGridPrefs>(GetArena());
    localgrid_ = p;
  }
  return localgrid_;
}
inline ::simData::LocalGridPrefs* CommonPrefs::mutable_localgrid() {
  // @@protoc_insertion_point(field_mutable:simData.CommonPrefs.localGrid)
  return _internal_mutable_localgrid();
}
inline void CommonPrefs::set_allocated_localgrid(::simData::LocalGridPrefs* localgrid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete localgrid_;
  }
  if (localgrid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(localgrid);
    if (message_arena != submessage_arena) {
      localgrid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localgrid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  localgrid_ = localgrid;
  // @@protoc_insertion_point(field_set_allocated:simData.CommonPrefs.localGrid)
}

// optional bool includeInLegend = 13 [default = false];
inline bool CommonPrefs::_internal_has_includeinlegend() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommonPrefs::has_includeinlegend() const {
  return _internal_has_includeinlegend();
}
inline void CommonPrefs::clear_includeinlegend() {
  includeinlegend_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CommonPrefs::_internal_includeinlegend() const {
  return includeinlegend_;
}
inline bool CommonPrefs::includeinlegend() const {
  // @@protoc_insertion_point(field_get:simData.CommonPrefs.includeInLegend)
  return _internal_includeinlegend();
}
inline void CommonPrefs::_internal_set_includeinlegend(bool value) {
  _has_bits_[0] |= 0x00000040u;
  includeinlegend_ = value;
}
inline void CommonPrefs::set_includeinlegend(bool value) {
  _internal_set_includeinlegend(value);
  // @@protoc_insertion_point(field_set:simData.CommonPrefs.includeInLegend)
}

// repeated uint64 acceptProjectorIds = 15;
inline int CommonPrefs::_internal_acceptprojectorids_size() const {
  return acceptprojectorids_.size();
}
inline int CommonPrefs::acceptprojectorids_size() const {
  return _internal_acceptprojectorids_size();
}
inline void CommonPrefs::clear_acceptprojectorids() {
  acceptprojectorids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommonPrefs::_internal_acceptprojectorids(int index) const {
  return acceptprojectorids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommonPrefs::acceptprojectorids(int index) const {
  // @@protoc_insertion_point(field_get:simData.CommonPrefs.acceptProjectorIds)
  return _internal_acceptprojectorids(index);
}
inline void CommonPrefs::set_acceptprojectorids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  acceptprojectorids_.Set(index, value);
  // @@protoc_insertion_point(field_set:simData.CommonPrefs.acceptProjectorIds)
}
inline void CommonPrefs::_internal_add_acceptprojectorids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  acceptprojectorids_.Add(value);
}
inline void CommonPrefs::add_acceptprojectorids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_acceptprojectorids(value);
  // @@protoc_insertion_point(field_add:simData.CommonPrefs.acceptProjectorIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CommonPrefs::_internal_acceptprojectorids() const {
  return acceptprojectorids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CommonPrefs::acceptprojectorids() const {
  // @@protoc_insertion_point(field_list:simData.CommonPrefs.acceptProjectorIds)
  return _internal_acceptprojectorids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CommonPrefs::_internal_mutable_acceptprojectorids() {
  return &acceptprojectorids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CommonPrefs::mutable_acceptprojectorids() {
  // @@protoc_insertion_point(field_mutable_list:simData.CommonPrefs.acceptProjectorIds)
  return _internal_mutable_acceptprojectorids();
}

// -------------------------------------------------------------------

// ScenarioProperties_Classification

// optional string label = 1 [default = ""];
inline bool ScenarioProperties_Classification::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioProperties_Classification::has_label() const {
  return _internal_has_label();
}
inline void ScenarioProperties_Classification::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScenarioProperties_Classification::label() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.Classification.label)
  return _internal_label();
}
inline void ScenarioProperties_Classification::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.Classification.label)
}
inline std::string* ScenarioProperties_Classification::mutable_label() {
  // @@protoc_insertion_point(field_mutable:simData.ScenarioProperties.Classification.label)
  return _internal_mutable_label();
}
inline const std::string& ScenarioProperties_Classification::_internal_label() const {
  return label_.Get();
}
inline void ScenarioProperties_Classification::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioProperties_Classification::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.ScenarioProperties.Classification.label)
}
inline void ScenarioProperties_Classification::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.ScenarioProperties.Classification.label)
}
inline void ScenarioProperties_Classification::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.ScenarioProperties.Classification.label)
}
inline std::string* ScenarioProperties_Classification::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioProperties_Classification::release_label() {
  // @@protoc_insertion_point(field_release:simData.ScenarioProperties.Classification.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScenarioProperties_Classification::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.ScenarioProperties.Classification.label)
}

// optional fixed32 fontColor = 2 [default = 16711935];
inline bool ScenarioProperties_Classification::_internal_has_fontcolor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioProperties_Classification::has_fontcolor() const {
  return _internal_has_fontcolor();
}
inline void ScenarioProperties_Classification::clear_fontcolor() {
  fontcolor_ = 16711935u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScenarioProperties_Classification::_internal_fontcolor() const {
  return fontcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScenarioProperties_Classification::fontcolor() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.Classification.fontColor)
  return _internal_fontcolor();
}
inline void ScenarioProperties_Classification::_internal_set_fontcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fontcolor_ = value;
}
inline void ScenarioProperties_Classification::set_fontcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fontcolor(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.Classification.fontColor)
}

// -------------------------------------------------------------------

// ScenarioProperties_SoundFile

// optional string filename = 1 [default = ""];
inline bool ScenarioProperties_SoundFile::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioProperties_SoundFile::has_filename() const {
  return _internal_has_filename();
}
inline void ScenarioProperties_SoundFile::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScenarioProperties_SoundFile::filename() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.SoundFile.filename)
  return _internal_filename();
}
inline void ScenarioProperties_SoundFile::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.SoundFile.filename)
}
inline std::string* ScenarioProperties_SoundFile::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:simData.ScenarioProperties.SoundFile.filename)
  return _internal_mutable_filename();
}
inline const std::string& ScenarioProperties_SoundFile::_internal_filename() const {
  return filename_.Get();
}
inline void ScenarioProperties_SoundFile::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioProperties_SoundFile::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.ScenarioProperties.SoundFile.filename)
}
inline void ScenarioProperties_SoundFile::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.ScenarioProperties.SoundFile.filename)
}
inline void ScenarioProperties_SoundFile::set_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.ScenarioProperties.SoundFile.filename)
}
inline std::string* ScenarioProperties_SoundFile::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioProperties_SoundFile::release_filename() {
  // @@protoc_insertion_point(field_release:simData.ScenarioProperties.SoundFile.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScenarioProperties_SoundFile::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.ScenarioProperties.SoundFile.filename)
}

// optional double startTime = 2 [default = 0];
inline bool ScenarioProperties_SoundFile::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioProperties_SoundFile::has_starttime() const {
  return _internal_has_starttime();
}
inline void ScenarioProperties_SoundFile::clear_starttime() {
  starttime_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ScenarioProperties_SoundFile::_internal_starttime() const {
  return starttime_;
}
inline double ScenarioProperties_SoundFile::starttime() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.SoundFile.startTime)
  return _internal_starttime();
}
inline void ScenarioProperties_SoundFile::_internal_set_starttime(double value) {
  _has_bits_[0] |= 0x00000002u;
  starttime_ = value;
}
inline void ScenarioProperties_SoundFile::set_starttime(double value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.SoundFile.startTime)
}

// optional double endTime = 3 [default = 0];
inline bool ScenarioProperties_SoundFile::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScenarioProperties_SoundFile::has_endtime() const {
  return _internal_has_endtime();
}
inline void ScenarioProperties_SoundFile::clear_endtime() {
  endtime_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double ScenarioProperties_SoundFile::_internal_endtime() const {
  return endtime_;
}
inline double ScenarioProperties_SoundFile::endtime() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.SoundFile.endTime)
  return _internal_endtime();
}
inline void ScenarioProperties_SoundFile::_internal_set_endtime(double value) {
  _has_bits_[0] |= 0x00000004u;
  endtime_ = value;
}
inline void ScenarioProperties_SoundFile::set_endtime(double value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.SoundFile.endTime)
}

// -------------------------------------------------------------------

// ScenarioProperties

// optional uint32 version = 1 [default = 20];
inline bool ScenarioProperties::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ScenarioProperties::has_version() const {
  return _internal_has_version();
}
inline void ScenarioProperties::clear_version() {
  version_ = 20u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScenarioProperties::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScenarioProperties::version() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.version)
  return _internal_version();
}
inline void ScenarioProperties::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  version_ = value;
}
inline void ScenarioProperties::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.version)
}

// optional .simData.CoordinateFrame coordinateFrame = 2;
inline bool ScenarioProperties::_internal_has_coordinateframe() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || coordinateframe_ != nullptr);
  return value;
}
inline bool ScenarioProperties::has_coordinateframe() const {
  return _internal_has_coordinateframe();
}
inline void ScenarioProperties::clear_coordinateframe() {
  if (coordinateframe_ != nullptr) coordinateframe_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::simData::CoordinateFrame& ScenarioProperties::_internal_coordinateframe() const {
  const ::simData::CoordinateFrame* p = coordinateframe_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::CoordinateFrame&>(
      ::simData::_CoordinateFrame_default_instance_);
}
inline const ::simData::CoordinateFrame& ScenarioProperties::coordinateframe() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.coordinateFrame)
  return _internal_coordinateframe();
}
inline void ScenarioProperties::unsafe_arena_set_allocated_coordinateframe(
    ::simData::CoordinateFrame* coordinateframe) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinateframe_);
  }
  coordinateframe_ = coordinateframe;
  if (coordinateframe) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.ScenarioProperties.coordinateFrame)
}
inline ::simData::CoordinateFrame* ScenarioProperties::release_coordinateframe() {
  _has_bits_[0] &= ~0x00000020u;
  ::simData::CoordinateFrame* temp = coordinateframe_;
  coordinateframe_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::CoordinateFrame* ScenarioProperties::unsafe_arena_release_coordinateframe() {
  // @@protoc_insertion_point(field_release:simData.ScenarioProperties.coordinateFrame)
  _has_bits_[0] &= ~0x00000020u;
  ::simData::CoordinateFrame* temp = coordinateframe_;
  coordinateframe_ = nullptr;
  return temp;
}
inline ::simData::CoordinateFrame* ScenarioProperties::_internal_mutable_coordinateframe() {
  _has_bits_[0] |= 0x00000020u;
  if (coordinateframe_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::CoordinateFrame>(GetArena());
    coordinateframe_ = p;
  }
  return coordinateframe_;
}
inline ::simData::CoordinateFrame* ScenarioProperties::mutable_coordinateframe() {
  // @@protoc_insertion_point(field_mutable:simData.ScenarioProperties.coordinateFrame)
  return _internal_mutable_coordinateframe();
}
inline void ScenarioProperties::set_allocated_coordinateframe(::simData::CoordinateFrame* coordinateframe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coordinateframe_;
  }
  if (coordinateframe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coordinateframe);
    if (message_arena != submessage_arena) {
      coordinateframe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinateframe, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  coordinateframe_ = coordinateframe;
  // @@protoc_insertion_point(field_set_allocated:simData.ScenarioProperties.coordinateFrame)
}

// optional uint32 referenceYear = 3 [default = 1970];
inline bool ScenarioProperties::_internal_has_referenceyear() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ScenarioProperties::has_referenceyear() const {
  return _internal_has_referenceyear();
}
inline void ScenarioProperties::clear_referenceyear() {
  referenceyear_ = 1970u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScenarioProperties::_internal_referenceyear() const {
  return referenceyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScenarioProperties::referenceyear() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.referenceYear)
  return _internal_referenceyear();
}
inline void ScenarioProperties::_internal_set_referenceyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  referenceyear_ = value;
}
inline void ScenarioProperties::set_referenceyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_referenceyear(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.referenceYear)
}

// optional .simData.ScenarioProperties.Classification classification = 4;
inline bool ScenarioProperties::_internal_has_classification() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || classification_ != nullptr);
  return value;
}
inline bool ScenarioProperties::has_classification() const {
  return _internal_has_classification();
}
inline void ScenarioProperties::clear_classification() {
  if (classification_ != nullptr) classification_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::simData::ScenarioProperties_Classification& ScenarioProperties::_internal_classification() const {
  const ::simData::ScenarioProperties_Classification* p = classification_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::ScenarioProperties_Classification&>(
      ::simData::_ScenarioProperties_Classification_default_instance_);
}
inline const ::simData::ScenarioProperties_Classification& ScenarioProperties::classification() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.classification)
  return _internal_classification();
}
inline void ScenarioProperties::unsafe_arena_set_allocated_classification(
    ::simData::ScenarioProperties_Classification* classification) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(classification_);
  }
  classification_ = classification;
  if (classification) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.ScenarioProperties.classification)
}
inline ::simData::ScenarioProperties_Classification* ScenarioProperties::release_classification() {
  _has_bits_[0] &= ~0x00000040u;
  ::simData::ScenarioProperties_Classification* temp = classification_;
  classification_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::ScenarioProperties_Classification* ScenarioProperties::unsafe_arena_release_classification() {
  // @@protoc_insertion_point(field_release:simData.ScenarioProperties.classification)
  _has_bits_[0] &= ~0x00000040u;
  ::simData::ScenarioProperties_Classification* temp = classification_;
  classification_ = nullptr;
  return temp;
}
inline ::simData::ScenarioProperties_Classification* ScenarioProperties::_internal_mutable_classification() {
  _has_bits_[0] |= 0x00000040u;
  if (classification_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::ScenarioProperties_Classification>(GetArena());
    classification_ = p;
  }
  return classification_;
}
inline ::simData::ScenarioProperties_Classification* ScenarioProperties::mutable_classification() {
  // @@protoc_insertion_point(field_mutable:simData.ScenarioProperties.classification)
  return _internal_mutable_classification();
}
inline void ScenarioProperties::set_allocated_classification(::simData::ScenarioProperties_Classification* classification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete classification_;
  }
  if (classification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(classification);
    if (message_arena != submessage_arena) {
      classification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  classification_ = classification;
  // @@protoc_insertion_point(field_set_allocated:simData.ScenarioProperties.classification)
}

// optional bool degreeAngles = 5 [default = true];
inline bool ScenarioProperties::_internal_has_degreeangles() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ScenarioProperties::has_degreeangles() const {
  return _internal_has_degreeangles();
}
inline void ScenarioProperties::clear_degreeangles() {
  degreeangles_ = true;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ScenarioProperties::_internal_degreeangles() const {
  return degreeangles_;
}
inline bool ScenarioProperties::degreeangles() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.degreeAngles)
  return _internal_degreeangles();
}
inline void ScenarioProperties::_internal_set_degreeangles(bool value) {
  _has_bits_[0] |= 0x00001000u;
  degreeangles_ = value;
}
inline void ScenarioProperties::set_degreeangles(bool value) {
  _internal_set_degreeangles(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.degreeAngles)
}

// optional string description = 6 [default = ""];
inline bool ScenarioProperties::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioProperties::has_description() const {
  return _internal_has_description();
}
inline void ScenarioProperties::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScenarioProperties::description() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.description)
  return _internal_description();
}
inline void ScenarioProperties::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.description)
}
inline std::string* ScenarioProperties::mutable_description() {
  // @@protoc_insertion_point(field_mutable:simData.ScenarioProperties.description)
  return _internal_mutable_description();
}
inline const std::string& ScenarioProperties::_internal_description() const {
  return description_.Get();
}
inline void ScenarioProperties::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioProperties::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.ScenarioProperties.description)
}
inline void ScenarioProperties::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.ScenarioProperties.description)
}
inline void ScenarioProperties::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.ScenarioProperties.description)
}
inline std::string* ScenarioProperties::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioProperties::release_description() {
  // @@protoc_insertion_point(field_release:simData.ScenarioProperties.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScenarioProperties::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.ScenarioProperties.description)
}

// optional string source = 19 [default = ""];
inline bool ScenarioProperties::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScenarioProperties::has_source() const {
  return _internal_has_source();
}
inline void ScenarioProperties::clear_source() {
  source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ScenarioProperties::source() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.source)
  return _internal_source();
}
inline void ScenarioProperties::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.source)
}
inline std::string* ScenarioProperties::mutable_source() {
  // @@protoc_insertion_point(field_mutable:simData.ScenarioProperties.source)
  return _internal_mutable_source();
}
inline const std::string& ScenarioProperties::_internal_source() const {
  return source_.Get();
}
inline void ScenarioProperties::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioProperties::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.ScenarioProperties.source)
}
inline void ScenarioProperties::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.ScenarioProperties.source)
}
inline void ScenarioProperties::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.ScenarioProperties.source)
}
inline std::string* ScenarioProperties::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000010u;
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioProperties::release_source() {
  // @@protoc_insertion_point(field_release:simData.ScenarioProperties.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScenarioProperties::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.ScenarioProperties.source)
}

// optional double windAngle = 7 [default = 0];
inline bool ScenarioProperties::_internal_has_windangle() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ScenarioProperties::has_windangle() const {
  return _internal_has_windangle();
}
inline void ScenarioProperties::clear_windangle() {
  windangle_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double ScenarioProperties::_internal_windangle() const {
  return windangle_;
}
inline double ScenarioProperties::windangle() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.windAngle)
  return _internal_windangle();
}
inline void ScenarioProperties::_internal_set_windangle(double value) {
  _has_bits_[0] |= 0x00000100u;
  windangle_ = value;
}
inline void ScenarioProperties::set_windangle(double value) {
  _internal_set_windangle(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.windAngle)
}

// optional double windSpeed = 8 [default = 0];
inline bool ScenarioProperties::_internal_has_windspeed() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ScenarioProperties::has_windspeed() const {
  return _internal_has_windspeed();
}
inline void ScenarioProperties::clear_windspeed() {
  windspeed_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double ScenarioProperties::_internal_windspeed() const {
  return windspeed_;
}
inline double ScenarioProperties::windspeed() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.windSpeed)
  return _internal_windspeed();
}
inline void ScenarioProperties::_internal_set_windspeed(double value) {
  _has_bits_[0] |= 0x00000200u;
  windspeed_ = value;
}
inline void ScenarioProperties::set_windspeed(double value) {
  _internal_set_windspeed(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.windSpeed)
}

// optional string viewFile = 9 [default = ""];
inline bool ScenarioProperties::_internal_has_viewfile() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioProperties::has_viewfile() const {
  return _internal_has_viewfile();
}
inline void ScenarioProperties::clear_viewfile() {
  viewfile_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ScenarioProperties::viewfile() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.viewFile)
  return _internal_viewfile();
}
inline void ScenarioProperties::set_viewfile(const std::string& value) {
  _internal_set_viewfile(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.viewFile)
}
inline std::string* ScenarioProperties::mutable_viewfile() {
  // @@protoc_insertion_point(field_mutable:simData.ScenarioProperties.viewFile)
  return _internal_mutable_viewfile();
}
inline const std::string& ScenarioProperties::_internal_viewfile() const {
  return viewfile_.Get();
}
inline void ScenarioProperties::_internal_set_viewfile(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  viewfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioProperties::set_viewfile(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  viewfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.ScenarioProperties.viewFile)
}
inline void ScenarioProperties::set_viewfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  viewfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.ScenarioProperties.viewFile)
}
inline void ScenarioProperties::set_viewfile(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  viewfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.ScenarioProperties.viewFile)
}
inline std::string* ScenarioProperties::_internal_mutable_viewfile() {
  _has_bits_[0] |= 0x00000002u;
  return viewfile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioProperties::release_viewfile() {
  // @@protoc_insertion_point(field_release:simData.ScenarioProperties.viewFile)
  if (!_internal_has_viewfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return viewfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScenarioProperties::set_allocated_viewfile(std::string* viewfile) {
  if (viewfile != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  viewfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), viewfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.ScenarioProperties.viewFile)
}

// optional string ruleFile = 10 [default = ""];
inline bool ScenarioProperties::_internal_has_rulefile() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScenarioProperties::has_rulefile() const {
  return _internal_has_rulefile();
}
inline void ScenarioProperties::clear_rulefile() {
  rulefile_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ScenarioProperties::rulefile() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.ruleFile)
  return _internal_rulefile();
}
inline void ScenarioProperties::set_rulefile(const std::string& value) {
  _internal_set_rulefile(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.ruleFile)
}
inline std::string* ScenarioProperties::mutable_rulefile() {
  // @@protoc_insertion_point(field_mutable:simData.ScenarioProperties.ruleFile)
  return _internal_mutable_rulefile();
}
inline const std::string& ScenarioProperties::_internal_rulefile() const {
  return rulefile_.Get();
}
inline void ScenarioProperties::_internal_set_rulefile(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  rulefile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioProperties::set_rulefile(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  rulefile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.ScenarioProperties.ruleFile)
}
inline void ScenarioProperties::set_rulefile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  rulefile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.ScenarioProperties.ruleFile)
}
inline void ScenarioProperties::set_rulefile(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  rulefile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.ScenarioProperties.ruleFile)
}
inline std::string* ScenarioProperties::_internal_mutable_rulefile() {
  _has_bits_[0] |= 0x00000004u;
  return rulefile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioProperties::release_rulefile() {
  // @@protoc_insertion_point(field_release:simData.ScenarioProperties.ruleFile)
  if (!_internal_has_rulefile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return rulefile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScenarioProperties::set_allocated_rulefile(std::string* rulefile) {
  if (rulefile != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rulefile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rulefile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.ScenarioProperties.ruleFile)
}

// optional string terrainFile = 11 [default = ""];
inline bool ScenarioProperties::_internal_has_terrainfile() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScenarioProperties::has_terrainfile() const {
  return _internal_has_terrainfile();
}
inline void ScenarioProperties::clear_terrainfile() {
  terrainfile_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ScenarioProperties::terrainfile() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.terrainFile)
  return _internal_terrainfile();
}
inline void ScenarioProperties::set_terrainfile(const std::string& value) {
  _internal_set_terrainfile(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.terrainFile)
}
inline std::string* ScenarioProperties::mutable_terrainfile() {
  // @@protoc_insertion_point(field_mutable:simData.ScenarioProperties.terrainFile)
  return _internal_mutable_terrainfile();
}
inline const std::string& ScenarioProperties::_internal_terrainfile() const {
  return terrainfile_.Get();
}
inline void ScenarioProperties::_internal_set_terrainfile(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  terrainfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioProperties::set_terrainfile(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  terrainfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.ScenarioProperties.terrainFile)
}
inline void ScenarioProperties::set_terrainfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  terrainfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.ScenarioProperties.terrainFile)
}
inline void ScenarioProperties::set_terrainfile(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  terrainfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.ScenarioProperties.terrainFile)
}
inline std::string* ScenarioProperties::_internal_mutable_terrainfile() {
  _has_bits_[0] |= 0x00000008u;
  return terrainfile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioProperties::release_terrainfile() {
  // @@protoc_insertion_point(field_release:simData.ScenarioProperties.terrainFile)
  if (!_internal_has_terrainfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return terrainfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScenarioProperties::set_allocated_terrainfile(std::string* terrainfile) {
  if (terrainfile != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  terrainfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terrainfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.ScenarioProperties.terrainFile)
}

// optional .simData.ScenarioProperties.SoundFile soundFile = 12;
inline bool ScenarioProperties::_internal_has_soundfile() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || soundfile_ != nullptr);
  return value;
}
inline bool ScenarioProperties::has_soundfile() const {
  return _internal_has_soundfile();
}
inline void ScenarioProperties::clear_soundfile() {
  if (soundfile_ != nullptr) soundfile_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::simData::ScenarioProperties_SoundFile& ScenarioProperties::_internal_soundfile() const {
  const ::simData::ScenarioProperties_SoundFile* p = soundfile_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::ScenarioProperties_SoundFile&>(
      ::simData::_ScenarioProperties_SoundFile_default_instance_);
}
inline const ::simData::ScenarioProperties_SoundFile& ScenarioProperties::soundfile() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.soundFile)
  return _internal_soundfile();
}
inline void ScenarioProperties::unsafe_arena_set_allocated_soundfile(
    ::simData::ScenarioProperties_SoundFile* soundfile) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soundfile_);
  }
  soundfile_ = soundfile;
  if (soundfile) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.ScenarioProperties.soundFile)
}
inline ::simData::ScenarioProperties_SoundFile* ScenarioProperties::release_soundfile() {
  _has_bits_[0] &= ~0x00000080u;
  ::simData::ScenarioProperties_SoundFile* temp = soundfile_;
  soundfile_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::ScenarioProperties_SoundFile* ScenarioProperties::unsafe_arena_release_soundfile() {
  // @@protoc_insertion_point(field_release:simData.ScenarioProperties.soundFile)
  _has_bits_[0] &= ~0x00000080u;
  ::simData::ScenarioProperties_SoundFile* temp = soundfile_;
  soundfile_ = nullptr;
  return temp;
}
inline ::simData::ScenarioProperties_SoundFile* ScenarioProperties::_internal_mutable_soundfile() {
  _has_bits_[0] |= 0x00000080u;
  if (soundfile_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::ScenarioProperties_SoundFile>(GetArena());
    soundfile_ = p;
  }
  return soundfile_;
}
inline ::simData::ScenarioProperties_SoundFile* ScenarioProperties::mutable_soundfile() {
  // @@protoc_insertion_point(field_mutable:simData.ScenarioProperties.soundFile)
  return _internal_mutable_soundfile();
}
inline void ScenarioProperties::set_allocated_soundfile(::simData::ScenarioProperties_SoundFile* soundfile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete soundfile_;
  }
  if (soundfile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(soundfile);
    if (message_arena != submessage_arena) {
      soundfile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soundfile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  soundfile_ = soundfile;
  // @@protoc_insertion_point(field_set_allocated:simData.ScenarioProperties.soundFile)
}

// repeated string mediaFile = 13;
inline int ScenarioProperties::_internal_mediafile_size() const {
  return mediafile_.size();
}
inline int ScenarioProperties::mediafile_size() const {
  return _internal_mediafile_size();
}
inline void ScenarioProperties::clear_mediafile() {
  mediafile_.Clear();
}
inline std::string* ScenarioProperties::add_mediafile() {
  // @@protoc_insertion_point(field_add_mutable:simData.ScenarioProperties.mediaFile)
  return _internal_add_mediafile();
}
inline const std::string& ScenarioProperties::_internal_mediafile(int index) const {
  return mediafile_.Get(index);
}
inline const std::string& ScenarioProperties::mediafile(int index) const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.mediaFile)
  return _internal_mediafile(index);
}
inline std::string* ScenarioProperties::mutable_mediafile(int index) {
  // @@protoc_insertion_point(field_mutable:simData.ScenarioProperties.mediaFile)
  return mediafile_.Mutable(index);
}
inline void ScenarioProperties::set_mediafile(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.mediaFile)
  mediafile_.Mutable(index)->assign(value);
}
inline void ScenarioProperties::set_mediafile(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.mediaFile)
  mediafile_.Mutable(index)->assign(std::move(value));
}
inline void ScenarioProperties::set_mediafile(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mediafile_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:simData.ScenarioProperties.mediaFile)
}
inline void ScenarioProperties::set_mediafile(int index, const char* value, size_t size) {
  mediafile_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:simData.ScenarioProperties.mediaFile)
}
inline std::string* ScenarioProperties::_internal_add_mediafile() {
  return mediafile_.Add();
}
inline void ScenarioProperties::add_mediafile(const std::string& value) {
  mediafile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:simData.ScenarioProperties.mediaFile)
}
inline void ScenarioProperties::add_mediafile(std::string&& value) {
  mediafile_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:simData.ScenarioProperties.mediaFile)
}
inline void ScenarioProperties::add_mediafile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mediafile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:simData.ScenarioProperties.mediaFile)
}
inline void ScenarioProperties::add_mediafile(const char* value, size_t size) {
  mediafile_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:simData.ScenarioProperties.mediaFile)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ScenarioProperties::mediafile() const {
  // @@protoc_insertion_point(field_list:simData.ScenarioProperties.mediaFile)
  return mediafile_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ScenarioProperties::mutable_mediafile() {
  // @@protoc_insertion_point(field_mutable_list:simData.ScenarioProperties.mediaFile)
  return &mediafile_;
}

// repeated string dedFile = 14;
inline int ScenarioProperties::_internal_dedfile_size() const {
  return dedfile_.size();
}
inline int ScenarioProperties::dedfile_size() const {
  return _internal_dedfile_size();
}
inline void ScenarioProperties::clear_dedfile() {
  dedfile_.Clear();
}
inline std::string* ScenarioProperties::add_dedfile() {
  // @@protoc_insertion_point(field_add_mutable:simData.ScenarioProperties.dedFile)
  return _internal_add_dedfile();
}
inline const std::string& ScenarioProperties::_internal_dedfile(int index) const {
  return dedfile_.Get(index);
}
inline const std::string& ScenarioProperties::dedfile(int index) const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.dedFile)
  return _internal_dedfile(index);
}
inline std::string* ScenarioProperties::mutable_dedfile(int index) {
  // @@protoc_insertion_point(field_mutable:simData.ScenarioProperties.dedFile)
  return dedfile_.Mutable(index);
}
inline void ScenarioProperties::set_dedfile(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.dedFile)
  dedfile_.Mutable(index)->assign(value);
}
inline void ScenarioProperties::set_dedfile(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.dedFile)
  dedfile_.Mutable(index)->assign(std::move(value));
}
inline void ScenarioProperties::set_dedfile(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dedfile_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:simData.ScenarioProperties.dedFile)
}
inline void ScenarioProperties::set_dedfile(int index, const char* value, size_t size) {
  dedfile_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:simData.ScenarioProperties.dedFile)
}
inline std::string* ScenarioProperties::_internal_add_dedfile() {
  return dedfile_.Add();
}
inline void ScenarioProperties::add_dedfile(const std::string& value) {
  dedfile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:simData.ScenarioProperties.dedFile)
}
inline void ScenarioProperties::add_dedfile(std::string&& value) {
  dedfile_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:simData.ScenarioProperties.dedFile)
}
inline void ScenarioProperties::add_dedfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dedfile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:simData.ScenarioProperties.dedFile)
}
inline void ScenarioProperties::add_dedfile(const char* value, size_t size) {
  dedfile_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:simData.ScenarioProperties.dedFile)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ScenarioProperties::dedfile() const {
  // @@protoc_insertion_point(field_list:simData.ScenarioProperties.dedFile)
  return dedfile_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ScenarioProperties::mutable_dedfile() {
  // @@protoc_insertion_point(field_mutable_list:simData.ScenarioProperties.dedFile)
  return &dedfile_;
}

// repeated string wvsFile = 15;
inline int ScenarioProperties::_internal_wvsfile_size() const {
  return wvsfile_.size();
}
inline int ScenarioProperties::wvsfile_size() const {
  return _internal_wvsfile_size();
}
inline void ScenarioProperties::clear_wvsfile() {
  wvsfile_.Clear();
}
inline std::string* ScenarioProperties::add_wvsfile() {
  // @@protoc_insertion_point(field_add_mutable:simData.ScenarioProperties.wvsFile)
  return _internal_add_wvsfile();
}
inline const std::string& ScenarioProperties::_internal_wvsfile(int index) const {
  return wvsfile_.Get(index);
}
inline const std::string& ScenarioProperties::wvsfile(int index) const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.wvsFile)
  return _internal_wvsfile(index);
}
inline std::string* ScenarioProperties::mutable_wvsfile(int index) {
  // @@protoc_insertion_point(field_mutable:simData.ScenarioProperties.wvsFile)
  return wvsfile_.Mutable(index);
}
inline void ScenarioProperties::set_wvsfile(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.wvsFile)
  wvsfile_.Mutable(index)->assign(value);
}
inline void ScenarioProperties::set_wvsfile(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.wvsFile)
  wvsfile_.Mutable(index)->assign(std::move(value));
}
inline void ScenarioProperties::set_wvsfile(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  wvsfile_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:simData.ScenarioProperties.wvsFile)
}
inline void ScenarioProperties::set_wvsfile(int index, const char* value, size_t size) {
  wvsfile_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:simData.ScenarioProperties.wvsFile)
}
inline std::string* ScenarioProperties::_internal_add_wvsfile() {
  return wvsfile_.Add();
}
inline void ScenarioProperties::add_wvsfile(const std::string& value) {
  wvsfile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:simData.ScenarioProperties.wvsFile)
}
inline void ScenarioProperties::add_wvsfile(std::string&& value) {
  wvsfile_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:simData.ScenarioProperties.wvsFile)
}
inline void ScenarioProperties::add_wvsfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  wvsfile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:simData.ScenarioProperties.wvsFile)
}
inline void ScenarioProperties::add_wvsfile(const char* value, size_t size) {
  wvsfile_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:simData.ScenarioProperties.wvsFile)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ScenarioProperties::wvsfile() const {
  // @@protoc_insertion_point(field_list:simData.ScenarioProperties.wvsFile)
  return wvsfile_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ScenarioProperties::mutable_wvsfile() {
  // @@protoc_insertion_point(field_mutable_list:simData.ScenarioProperties.wvsFile)
  return &wvsfile_;
}

// repeated string gogFile = 16;
inline int ScenarioProperties::_internal_gogfile_size() const {
  return gogfile_.size();
}
inline int ScenarioProperties::gogfile_size() const {
  return _internal_gogfile_size();
}
inline void ScenarioProperties::clear_gogfile() {
  gogfile_.Clear();
}
inline std::string* ScenarioProperties::add_gogfile() {
  // @@protoc_insertion_point(field_add_mutable:simData.ScenarioProperties.gogFile)
  return _internal_add_gogfile();
}
inline const std::string& ScenarioProperties::_internal_gogfile(int index) const {
  return gogfile_.Get(index);
}
inline const std::string& ScenarioProperties::gogfile(int index) const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.gogFile)
  return _internal_gogfile(index);
}
inline std::string* ScenarioProperties::mutable_gogfile(int index) {
  // @@protoc_insertion_point(field_mutable:simData.ScenarioProperties.gogFile)
  return gogfile_.Mutable(index);
}
inline void ScenarioProperties::set_gogfile(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.gogFile)
  gogfile_.Mutable(index)->assign(value);
}
inline void ScenarioProperties::set_gogfile(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.gogFile)
  gogfile_.Mutable(index)->assign(std::move(value));
}
inline void ScenarioProperties::set_gogfile(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  gogfile_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:simData.ScenarioProperties.gogFile)
}
inline void ScenarioProperties::set_gogfile(int index, const char* value, size_t size) {
  gogfile_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:simData.ScenarioProperties.gogFile)
}
inline std::string* ScenarioProperties::_internal_add_gogfile() {
  return gogfile_.Add();
}
inline void ScenarioProperties::add_gogfile(const std::string& value) {
  gogfile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:simData.ScenarioProperties.gogFile)
}
inline void ScenarioProperties::add_gogfile(std::string&& value) {
  gogfile_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:simData.ScenarioProperties.gogFile)
}
inline void ScenarioProperties::add_gogfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  gogfile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:simData.ScenarioProperties.gogFile)
}
inline void ScenarioProperties::add_gogfile(const char* value, size_t size) {
  gogfile_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:simData.ScenarioProperties.gogFile)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ScenarioProperties::gogfile() const {
  // @@protoc_insertion_point(field_list:simData.ScenarioProperties.gogFile)
  return gogfile_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ScenarioProperties::mutable_gogfile() {
  // @@protoc_insertion_point(field_mutable_list:simData.ScenarioProperties.gogFile)
  return &gogfile_;
}

// optional double dataLimitTime = 17 [default = 600];
inline bool ScenarioProperties::_internal_has_datalimittime() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ScenarioProperties::has_datalimittime() const {
  return _internal_has_datalimittime();
}
inline void ScenarioProperties::clear_datalimittime() {
  datalimittime_ = 600;
  _has_bits_[0] &= ~0x00008000u;
}
inline double ScenarioProperties::_internal_datalimittime() const {
  return datalimittime_;
}
inline double ScenarioProperties::datalimittime() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.dataLimitTime)
  return _internal_datalimittime();
}
inline void ScenarioProperties::_internal_set_datalimittime(double value) {
  _has_bits_[0] |= 0x00008000u;
  datalimittime_ = value;
}
inline void ScenarioProperties::set_datalimittime(double value) {
  _internal_set_datalimittime(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.dataLimitTime)
}

// optional uint32 dataLimitPoints = 18 [default = 1000];
inline bool ScenarioProperties::_internal_has_datalimitpoints() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ScenarioProperties::has_datalimitpoints() const {
  return _internal_has_datalimitpoints();
}
inline void ScenarioProperties::clear_datalimitpoints() {
  datalimitpoints_ = 1000u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScenarioProperties::_internal_datalimitpoints() const {
  return datalimitpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScenarioProperties::datalimitpoints() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.dataLimitPoints)
  return _internal_datalimitpoints();
}
inline void ScenarioProperties::_internal_set_datalimitpoints(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  datalimitpoints_ = value;
}
inline void ScenarioProperties::set_datalimitpoints(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_datalimitpoints(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.dataLimitPoints)
}

// optional bool ignoreDuplicateGenericData = 20 [default = true];
inline bool ScenarioProperties::_internal_has_ignoreduplicategenericdata() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ScenarioProperties::has_ignoreduplicategenericdata() const {
  return _internal_has_ignoreduplicategenericdata();
}
inline void ScenarioProperties::clear_ignoreduplicategenericdata() {
  ignoreduplicategenericdata_ = true;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ScenarioProperties::_internal_ignoreduplicategenericdata() const {
  return ignoreduplicategenericdata_;
}
inline bool ScenarioProperties::ignoreduplicategenericdata() const {
  // @@protoc_insertion_point(field_get:simData.ScenarioProperties.ignoreDuplicateGenericData)
  return _internal_ignoreduplicategenericdata();
}
inline void ScenarioProperties::_internal_set_ignoreduplicategenericdata(bool value) {
  _has_bits_[0] |= 0x00002000u;
  ignoreduplicategenericdata_ = value;
}
inline void ScenarioProperties::set_ignoreduplicategenericdata(bool value) {
  _internal_set_ignoreduplicategenericdata(value);
  // @@protoc_insertion_point(field_set:simData.ScenarioProperties.ignoreDuplicateGenericData)
}

// -------------------------------------------------------------------

// PlatformProperties

// optional uint64 id = 1;
inline bool PlatformProperties::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlatformProperties::has_id() const {
  return _internal_has_id();
}
inline void PlatformProperties::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlatformProperties::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlatformProperties::id() const {
  // @@protoc_insertion_point(field_get:simData.PlatformProperties.id)
  return _internal_id();
}
inline void PlatformProperties::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void PlatformProperties::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:simData.PlatformProperties.id)
}

// optional uint64 originalId = 2;
inline bool PlatformProperties::_internal_has_originalid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlatformProperties::has_originalid() const {
  return _internal_has_originalid();
}
inline void PlatformProperties::clear_originalid() {
  originalid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlatformProperties::_internal_originalid() const {
  return originalid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlatformProperties::originalid() const {
  // @@protoc_insertion_point(field_get:simData.PlatformProperties.originalId)
  return _internal_originalid();
}
inline void PlatformProperties::_internal_set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  originalid_ = value;
}
inline void PlatformProperties::set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_originalid(value);
  // @@protoc_insertion_point(field_set:simData.PlatformProperties.originalId)
}

// optional string source = 3;
inline bool PlatformProperties::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlatformProperties::has_source() const {
  return _internal_has_source();
}
inline void PlatformProperties::clear_source() {
  source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlatformProperties::source() const {
  // @@protoc_insertion_point(field_get:simData.PlatformProperties.source)
  return _internal_source();
}
inline void PlatformProperties::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:simData.PlatformProperties.source)
}
inline std::string* PlatformProperties::mutable_source() {
  // @@protoc_insertion_point(field_mutable:simData.PlatformProperties.source)
  return _internal_mutable_source();
}
inline const std::string& PlatformProperties::_internal_source() const {
  return source_.Get();
}
inline void PlatformProperties::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlatformProperties::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.PlatformProperties.source)
}
inline void PlatformProperties::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.PlatformProperties.source)
}
inline void PlatformProperties::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.PlatformProperties.source)
}
inline std::string* PlatformProperties::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlatformProperties::release_source() {
  // @@protoc_insertion_point(field_release:simData.PlatformProperties.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlatformProperties::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.PlatformProperties.source)
}

// optional .simData.CoordinateFrame coordinateFrame = 6;
inline bool PlatformProperties::_internal_has_coordinateframe() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || coordinateframe_ != nullptr);
  return value;
}
inline bool PlatformProperties::has_coordinateframe() const {
  return _internal_has_coordinateframe();
}
inline void PlatformProperties::clear_coordinateframe() {
  if (coordinateframe_ != nullptr) coordinateframe_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::simData::CoordinateFrame& PlatformProperties::_internal_coordinateframe() const {
  const ::simData::CoordinateFrame* p = coordinateframe_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::CoordinateFrame&>(
      ::simData::_CoordinateFrame_default_instance_);
}
inline const ::simData::CoordinateFrame& PlatformProperties::coordinateframe() const {
  // @@protoc_insertion_point(field_get:simData.PlatformProperties.coordinateFrame)
  return _internal_coordinateframe();
}
inline void PlatformProperties::unsafe_arena_set_allocated_coordinateframe(
    ::simData::CoordinateFrame* coordinateframe) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinateframe_);
  }
  coordinateframe_ = coordinateframe;
  if (coordinateframe) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.PlatformProperties.coordinateFrame)
}
inline ::simData::CoordinateFrame* PlatformProperties::release_coordinateframe() {
  _has_bits_[0] &= ~0x00000002u;
  ::simData::CoordinateFrame* temp = coordinateframe_;
  coordinateframe_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::CoordinateFrame* PlatformProperties::unsafe_arena_release_coordinateframe() {
  // @@protoc_insertion_point(field_release:simData.PlatformProperties.coordinateFrame)
  _has_bits_[0] &= ~0x00000002u;
  ::simData::CoordinateFrame* temp = coordinateframe_;
  coordinateframe_ = nullptr;
  return temp;
}
inline ::simData::CoordinateFrame* PlatformProperties::_internal_mutable_coordinateframe() {
  _has_bits_[0] |= 0x00000002u;
  if (coordinateframe_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::CoordinateFrame>(GetArena());
    coordinateframe_ = p;
  }
  return coordinateframe_;
}
inline ::simData::CoordinateFrame* PlatformProperties::mutable_coordinateframe() {
  // @@protoc_insertion_point(field_mutable:simData.PlatformProperties.coordinateFrame)
  return _internal_mutable_coordinateframe();
}
inline void PlatformProperties::set_allocated_coordinateframe(::simData::CoordinateFrame* coordinateframe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coordinateframe_;
  }
  if (coordinateframe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coordinateframe);
    if (message_arena != submessage_arena) {
      coordinateframe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinateframe, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  coordinateframe_ = coordinateframe;
  // @@protoc_insertion_point(field_set_allocated:simData.PlatformProperties.coordinateFrame)
}

// -------------------------------------------------------------------

// PlatformPrefs

// optional .simData.CommonPrefs commonPrefs = 1;
inline bool PlatformPrefs::_internal_has_commonprefs() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || commonprefs_ != nullptr);
  return value;
}
inline bool PlatformPrefs::has_commonprefs() const {
  return _internal_has_commonprefs();
}
inline void PlatformPrefs::clear_commonprefs() {
  if (commonprefs_ != nullptr) commonprefs_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::simData::CommonPrefs& PlatformPrefs::_internal_commonprefs() const {
  const ::simData::CommonPrefs* p = commonprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::CommonPrefs&>(
      ::simData::_CommonPrefs_default_instance_);
}
inline const ::simData::CommonPrefs& PlatformPrefs::commonprefs() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.commonPrefs)
  return _internal_commonprefs();
}
inline void PlatformPrefs::unsafe_arena_set_allocated_commonprefs(
    ::simData::CommonPrefs* commonprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commonprefs_);
  }
  commonprefs_ = commonprefs;
  if (commonprefs) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.PlatformPrefs.commonPrefs)
}
inline ::simData::CommonPrefs* PlatformPrefs::release_commonprefs() {
  _has_bits_[0] &= ~0x00000004u;
  ::simData::CommonPrefs* temp = commonprefs_;
  commonprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::CommonPrefs* PlatformPrefs::unsafe_arena_release_commonprefs() {
  // @@protoc_insertion_point(field_release:simData.PlatformPrefs.commonPrefs)
  _has_bits_[0] &= ~0x00000004u;
  ::simData::CommonPrefs* temp = commonprefs_;
  commonprefs_ = nullptr;
  return temp;
}
inline ::simData::CommonPrefs* PlatformPrefs::_internal_mutable_commonprefs() {
  _has_bits_[0] |= 0x00000004u;
  if (commonprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::CommonPrefs>(GetArena());
    commonprefs_ = p;
  }
  return commonprefs_;
}
inline ::simData::CommonPrefs* PlatformPrefs::mutable_commonprefs() {
  // @@protoc_insertion_point(field_mutable:simData.PlatformPrefs.commonPrefs)
  return _internal_mutable_commonprefs();
}
inline void PlatformPrefs::set_allocated_commonprefs(::simData::CommonPrefs* commonprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete commonprefs_;
  }
  if (commonprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(commonprefs);
    if (message_arena != submessage_arena) {
      commonprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commonprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  commonprefs_ = commonprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.PlatformPrefs.commonPrefs)
}

// optional string icon = 2;
inline bool PlatformPrefs::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlatformPrefs::has_icon() const {
  return _internal_has_icon();
}
inline void PlatformPrefs::clear_icon() {
  icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlatformPrefs::icon() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.icon)
  return _internal_icon();
}
inline void PlatformPrefs::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.icon)
}
inline std::string* PlatformPrefs::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:simData.PlatformPrefs.icon)
  return _internal_mutable_icon();
}
inline const std::string& PlatformPrefs::_internal_icon() const {
  return icon_.Get();
}
inline void PlatformPrefs::_internal_set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlatformPrefs::set_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.PlatformPrefs.icon)
}
inline void PlatformPrefs::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.PlatformPrefs.icon)
}
inline void PlatformPrefs::set_icon(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.PlatformPrefs.icon)
}
inline std::string* PlatformPrefs::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000001u;
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlatformPrefs::release_icon() {
  // @@protoc_insertion_point(field_release:simData.PlatformPrefs.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return icon_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlatformPrefs::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.PlatformPrefs.icon)
}

// optional .simData.ModelDrawMode drawMode = 3 [default = MDM_SOLID];
inline bool PlatformPrefs::_internal_has_drawmode() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PlatformPrefs::has_drawmode() const {
  return _internal_has_drawmode();
}
inline void PlatformPrefs::clear_drawmode() {
  drawmode_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::simData::ModelDrawMode PlatformPrefs::_internal_drawmode() const {
  return static_cast< ::simData::ModelDrawMode >(drawmode_);
}
inline ::simData::ModelDrawMode PlatformPrefs::drawmode() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.drawMode)
  return _internal_drawmode();
}
inline void PlatformPrefs::_internal_set_drawmode(::simData::ModelDrawMode value) {
  assert(::simData::ModelDrawMode_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  drawmode_ = value;
}
inline void PlatformPrefs::set_drawmode(::simData::ModelDrawMode value) {
  _internal_set_drawmode(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.drawMode)
}

// optional .simData.IconRotation rotateIcons = 4 [default = IR_2D_YAW];
inline bool PlatformPrefs::_internal_has_rotateicons() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_rotateicons() const {
  return _internal_has_rotateicons();
}
inline void PlatformPrefs::clear_rotateicons() {
  rotateicons_ = 1;
  _has_bits_[1] &= ~0x00020000u;
}
inline ::simData::IconRotation PlatformPrefs::_internal_rotateicons() const {
  return static_cast< ::simData::IconRotation >(rotateicons_);
}
inline ::simData::IconRotation PlatformPrefs::rotateicons() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.rotateIcons)
  return _internal_rotateicons();
}
inline void PlatformPrefs::_internal_set_rotateicons(::simData::IconRotation value) {
  assert(::simData::IconRotation_IsValid(value));
  _has_bits_[1] |= 0x00020000u;
  rotateicons_ = value;
}
inline void PlatformPrefs::set_rotateicons(::simData::IconRotation value) {
  _internal_set_rotateicons(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.rotateIcons)
}

// optional bool noDepthIcons = 5 [default = true];
inline bool PlatformPrefs::_internal_has_nodepthicons() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_nodepthicons() const {
  return _internal_has_nodepthicons();
}
inline void PlatformPrefs::clear_nodepthicons() {
  nodepthicons_ = true;
  _has_bits_[1] &= ~0x00040000u;
}
inline bool PlatformPrefs::_internal_nodepthicons() const {
  return nodepthicons_;
}
inline bool PlatformPrefs::nodepthicons() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.noDepthIcons)
  return _internal_nodepthicons();
}
inline void PlatformPrefs::_internal_set_nodepthicons(bool value) {
  _has_bits_[1] |= 0x00040000u;
  nodepthicons_ = value;
}
inline void PlatformPrefs::set_nodepthicons(bool value) {
  _internal_set_nodepthicons(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.noDepthIcons)
}

// optional .simData.TextAlignment iconAlignment = 63 [default = ALIGN_CENTER_CENTER];
inline bool PlatformPrefs::_internal_has_iconalignment() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool PlatformPrefs::has_iconalignment() const {
  return _internal_has_iconalignment();
}
inline void PlatformPrefs::clear_iconalignment() {
  iconalignment_ = 4;
  _has_bits_[2] &= ~0x00000008u;
}
inline ::simData::TextAlignment PlatformPrefs::_internal_iconalignment() const {
  return static_cast< ::simData::TextAlignment >(iconalignment_);
}
inline ::simData::TextAlignment PlatformPrefs::iconalignment() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.iconAlignment)
  return _internal_iconalignment();
}
inline void PlatformPrefs::_internal_set_iconalignment(::simData::TextAlignment value) {
  assert(::simData::TextAlignment_IsValid(value));
  _has_bits_[2] |= 0x00000008u;
  iconalignment_ = value;
}
inline void PlatformPrefs::set_iconalignment(::simData::TextAlignment value) {
  _internal_set_iconalignment(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.iconAlignment)
}

// optional .simData.TrackPrefs trackPrefs = 6;
inline bool PlatformPrefs::_internal_has_trackprefs() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || trackprefs_ != nullptr);
  return value;
}
inline bool PlatformPrefs::has_trackprefs() const {
  return _internal_has_trackprefs();
}
inline void PlatformPrefs::clear_trackprefs() {
  if (trackprefs_ != nullptr) trackprefs_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::simData::TrackPrefs& PlatformPrefs::_internal_trackprefs() const {
  const ::simData::TrackPrefs* p = trackprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::TrackPrefs&>(
      ::simData::_TrackPrefs_default_instance_);
}
inline const ::simData::TrackPrefs& PlatformPrefs::trackprefs() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.trackPrefs)
  return _internal_trackprefs();
}
inline void PlatformPrefs::unsafe_arena_set_allocated_trackprefs(
    ::simData::TrackPrefs* trackprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trackprefs_);
  }
  trackprefs_ = trackprefs;
  if (trackprefs) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.PlatformPrefs.trackPrefs)
}
inline ::simData::TrackPrefs* PlatformPrefs::release_trackprefs() {
  _has_bits_[0] &= ~0x00000008u;
  ::simData::TrackPrefs* temp = trackprefs_;
  trackprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::TrackPrefs* PlatformPrefs::unsafe_arena_release_trackprefs() {
  // @@protoc_insertion_point(field_release:simData.PlatformPrefs.trackPrefs)
  _has_bits_[0] &= ~0x00000008u;
  ::simData::TrackPrefs* temp = trackprefs_;
  trackprefs_ = nullptr;
  return temp;
}
inline ::simData::TrackPrefs* PlatformPrefs::_internal_mutable_trackprefs() {
  _has_bits_[0] |= 0x00000008u;
  if (trackprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::TrackPrefs>(GetArena());
    trackprefs_ = p;
  }
  return trackprefs_;
}
inline ::simData::TrackPrefs* PlatformPrefs::mutable_trackprefs() {
  // @@protoc_insertion_point(field_mutable:simData.PlatformPrefs.trackPrefs)
  return _internal_mutable_trackprefs();
}
inline void PlatformPrefs::set_allocated_trackprefs(::simData::TrackPrefs* trackprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trackprefs_;
  }
  if (trackprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trackprefs);
    if (message_arena != submessage_arena) {
      trackprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trackprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  trackprefs_ = trackprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.PlatformPrefs.trackPrefs)
}

// optional bool useClampAlt = 7 [default = false];
inline bool PlatformPrefs::_internal_has_useclampalt() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PlatformPrefs::has_useclampalt() const {
  return _internal_has_useclampalt();
}
inline void PlatformPrefs::clear_useclampalt() {
  useclampalt_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool PlatformPrefs::_internal_useclampalt() const {
  return useclampalt_;
}
inline bool PlatformPrefs::useclampalt() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.useClampAlt)
  return _internal_useclampalt();
}
inline void PlatformPrefs::_internal_set_useclampalt(bool value) {
  _has_bits_[0] |= 0x00000100u;
  useclampalt_ = value;
}
inline void PlatformPrefs::set_useclampalt(bool value) {
  _internal_set_useclampalt(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.useClampAlt)
}

// optional double clampValAltMin = 8 [default = -100000];
inline bool PlatformPrefs::_internal_has_clampvalaltmin() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_clampvalaltmin() const {
  return _internal_has_clampvalaltmin();
}
inline void PlatformPrefs::clear_clampvalaltmin() {
  clampvalaltmin_ = -100000;
  _has_bits_[1] &= ~0x00008000u;
}
inline double PlatformPrefs::_internal_clampvalaltmin() const {
  return clampvalaltmin_;
}
inline double PlatformPrefs::clampvalaltmin() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.clampValAltMin)
  return _internal_clampvalaltmin();
}
inline void PlatformPrefs::_internal_set_clampvalaltmin(double value) {
  _has_bits_[1] |= 0x00008000u;
  clampvalaltmin_ = value;
}
inline void PlatformPrefs::set_clampvalaltmin(double value) {
  _internal_set_clampvalaltmin(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.clampValAltMin)
}

// optional double clampValAltMax = 9 [default = 1000000000];
inline bool PlatformPrefs::_internal_has_clampvalaltmax() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_clampvalaltmax() const {
  return _internal_has_clampvalaltmax();
}
inline void PlatformPrefs::clear_clampvalaltmax() {
  clampvalaltmax_ = 1000000000;
  _has_bits_[1] &= ~0x00010000u;
}
inline double PlatformPrefs::_internal_clampvalaltmax() const {
  return clampvalaltmax_;
}
inline double PlatformPrefs::clampvalaltmax() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.clampValAltMax)
  return _internal_clampvalaltmax();
}
inline void PlatformPrefs::_internal_set_clampvalaltmax(double value) {
  _has_bits_[1] |= 0x00010000u;
  clampvalaltmax_ = value;
}
inline void PlatformPrefs::set_clampvalaltmax(double value) {
  _internal_set_clampvalaltmax(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.clampValAltMax)
}

// optional bool useClampYaw = 10 [default = false];
inline bool PlatformPrefs::_internal_has_useclampyaw() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PlatformPrefs::has_useclampyaw() const {
  return _internal_has_useclampyaw();
}
inline void PlatformPrefs::clear_useclampyaw() {
  useclampyaw_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool PlatformPrefs::_internal_useclampyaw() const {
  return useclampyaw_;
}
inline bool PlatformPrefs::useclampyaw() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.useClampYaw)
  return _internal_useclampyaw();
}
inline void PlatformPrefs::_internal_set_useclampyaw(bool value) {
  _has_bits_[0] |= 0x00000200u;
  useclampyaw_ = value;
}
inline void PlatformPrefs::set_useclampyaw(bool value) {
  _internal_set_useclampyaw(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.useClampYaw)
}

// optional double clampValYaw = 11 [default = 0];
inline bool PlatformPrefs::_internal_has_clampvalyaw() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_clampvalyaw() const {
  return _internal_has_clampvalyaw();
}
inline void PlatformPrefs::clear_clampvalyaw() {
  clampvalyaw_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double PlatformPrefs::_internal_clampvalyaw() const {
  return clampvalyaw_;
}
inline double PlatformPrefs::clampvalyaw() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.clampValYaw)
  return _internal_clampvalyaw();
}
inline void PlatformPrefs::_internal_set_clampvalyaw(double value) {
  _has_bits_[0] |= 0x00001000u;
  clampvalyaw_ = value;
}
inline void PlatformPrefs::set_clampvalyaw(double value) {
  _internal_set_clampvalyaw(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.clampValYaw)
}

// optional bool useClampPitch = 12 [default = false];
inline bool PlatformPrefs::_internal_has_useclamppitch() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PlatformPrefs::has_useclamppitch() const {
  return _internal_has_useclamppitch();
}
inline void PlatformPrefs::clear_useclamppitch() {
  useclamppitch_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool PlatformPrefs::_internal_useclamppitch() const {
  return useclamppitch_;
}
inline bool PlatformPrefs::useclamppitch() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.useClampPitch)
  return _internal_useclamppitch();
}
inline void PlatformPrefs::_internal_set_useclamppitch(bool value) {
  _has_bits_[0] |= 0x00000400u;
  useclamppitch_ = value;
}
inline void PlatformPrefs::set_useclamppitch(bool value) {
  _internal_set_useclamppitch(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.useClampPitch)
}

// optional double clampValPitch = 13 [default = 0];
inline bool PlatformPrefs::_internal_has_clampvalpitch() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_clampvalpitch() const {
  return _internal_has_clampvalpitch();
}
inline void PlatformPrefs::clear_clampvalpitch() {
  clampvalpitch_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double PlatformPrefs::_internal_clampvalpitch() const {
  return clampvalpitch_;
}
inline double PlatformPrefs::clampvalpitch() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.clampValPitch)
  return _internal_clampvalpitch();
}
inline void PlatformPrefs::_internal_set_clampvalpitch(double value) {
  _has_bits_[0] |= 0x00002000u;
  clampvalpitch_ = value;
}
inline void PlatformPrefs::set_clampvalpitch(double value) {
  _internal_set_clampvalpitch(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.clampValPitch)
}

// optional bool useClampRoll = 14 [default = false];
inline bool PlatformPrefs::_internal_has_useclamproll() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PlatformPrefs::has_useclamproll() const {
  return _internal_has_useclamproll();
}
inline void PlatformPrefs::clear_useclamproll() {
  useclamproll_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool PlatformPrefs::_internal_useclamproll() const {
  return useclamproll_;
}
inline bool PlatformPrefs::useclamproll() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.useClampRoll)
  return _internal_useclamproll();
}
inline void PlatformPrefs::_internal_set_useclamproll(bool value) {
  _has_bits_[0] |= 0x00000800u;
  useclamproll_ = value;
}
inline void PlatformPrefs::set_useclamproll(bool value) {
  _internal_set_useclamproll(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.useClampRoll)
}

// optional double clampValRoll = 15 [default = 0];
inline bool PlatformPrefs::_internal_has_clampvalroll() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_clampvalroll() const {
  return _internal_has_clampvalroll();
}
inline void PlatformPrefs::clear_clampvalroll() {
  clampvalroll_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double PlatformPrefs::_internal_clampvalroll() const {
  return clampvalroll_;
}
inline double PlatformPrefs::clampvalroll() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.clampValRoll)
  return _internal_clampvalroll();
}
inline void PlatformPrefs::_internal_set_clampvalroll(double value) {
  _has_bits_[0] |= 0x00004000u;
  clampvalroll_ = value;
}
inline void PlatformPrefs::set_clampvalroll(double value) {
  _internal_set_clampvalroll(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.clampValRoll)
}

// optional bool clampOrientationAtLowVelocity = 60 [default = false];
inline bool PlatformPrefs::_internal_has_clamporientationatlowvelocity() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool PlatformPrefs::has_clamporientationatlowvelocity() const {
  return _internal_has_clamporientationatlowvelocity();
}
inline void PlatformPrefs::clear_clamporientationatlowvelocity() {
  clamporientationatlowvelocity_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool PlatformPrefs::_internal_clamporientationatlowvelocity() const {
  return clamporientationatlowvelocity_;
}
inline bool PlatformPrefs::clamporientationatlowvelocity() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.clampOrientationAtLowVelocity)
  return _internal_clamporientationatlowvelocity();
}
inline void PlatformPrefs::_internal_set_clamporientationatlowvelocity(bool value) {
  _has_bits_[1] |= 0x00000004u;
  clamporientationatlowvelocity_ = value;
}
inline void PlatformPrefs::set_clamporientationatlowvelocity(bool value) {
  _internal_set_clamporientationatlowvelocity(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.clampOrientationAtLowVelocity)
}

// optional bool surfaceClamping = 61 [default = false];
inline bool PlatformPrefs::_internal_has_surfaceclamping() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool PlatformPrefs::has_surfaceclamping() const {
  return _internal_has_surfaceclamping();
}
inline void PlatformPrefs::clear_surfaceclamping() {
  surfaceclamping_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool PlatformPrefs::_internal_surfaceclamping() const {
  return surfaceclamping_;
}
inline bool PlatformPrefs::surfaceclamping() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.surfaceClamping)
  return _internal_surfaceclamping();
}
inline void PlatformPrefs::_internal_set_surfaceclamping(bool value) {
  _has_bits_[1] |= 0x00000008u;
  surfaceclamping_ = value;
}
inline void PlatformPrefs::set_surfaceclamping(bool value) {
  _internal_set_surfaceclamping(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.surfaceClamping)
}

// optional bool aboveSurfaceClamping = 69 [default = false];
inline bool PlatformPrefs::_internal_has_abovesurfaceclamping() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool PlatformPrefs::has_abovesurfaceclamping() const {
  return _internal_has_abovesurfaceclamping();
}
inline void PlatformPrefs::clear_abovesurfaceclamping() {
  abovesurfaceclamping_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool PlatformPrefs::_internal_abovesurfaceclamping() const {
  return abovesurfaceclamping_;
}
inline bool PlatformPrefs::abovesurfaceclamping() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.aboveSurfaceClamping)
  return _internal_abovesurfaceclamping();
}
inline void PlatformPrefs::_internal_set_abovesurfaceclamping(bool value) {
  _has_bits_[1] |= 0x00000010u;
  abovesurfaceclamping_ = value;
}
inline void PlatformPrefs::set_abovesurfaceclamping(bool value) {
  _internal_set_abovesurfaceclamping(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.aboveSurfaceClamping)
}

// optional bool lighted = 16 [default = true];
inline bool PlatformPrefs::_internal_has_lighted() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_lighted() const {
  return _internal_has_lighted();
}
inline void PlatformPrefs::clear_lighted() {
  lighted_ = true;
  _has_bits_[1] &= ~0x00080000u;
}
inline bool PlatformPrefs::_internal_lighted() const {
  return lighted_;
}
inline bool PlatformPrefs::lighted() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.lighted)
  return _internal_lighted();
}
inline void PlatformPrefs::_internal_set_lighted(bool value) {
  _has_bits_[1] |= 0x00080000u;
  lighted_ = value;
}
inline void PlatformPrefs::set_lighted(bool value) {
  _internal_set_lighted(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.lighted)
}

// optional bool drawBox = 17 [default = false];
inline bool PlatformPrefs::_internal_has_drawbox() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool PlatformPrefs::has_drawbox() const {
  return _internal_has_drawbox();
}
inline void PlatformPrefs::clear_drawbox() {
  drawbox_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool PlatformPrefs::_internal_drawbox() const {
  return drawbox_;
}
inline bool PlatformPrefs::drawbox() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.drawBox)
  return _internal_drawbox();
}
inline void PlatformPrefs::_internal_set_drawbox(bool value) {
  _has_bits_[1] |= 0x00000020u;
  drawbox_ = value;
}
inline void PlatformPrefs::set_drawbox(bool value) {
  _internal_set_drawbox(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.drawBox)
}

// optional bool drawBodyAxis = 18 [default = false];
inline bool PlatformPrefs::_internal_has_drawbodyaxis() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_drawbodyaxis() const {
  return _internal_has_drawbodyaxis();
}
inline void PlatformPrefs::clear_drawbodyaxis() {
  drawbodyaxis_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool PlatformPrefs::_internal_drawbodyaxis() const {
  return drawbodyaxis_;
}
inline bool PlatformPrefs::drawbodyaxis() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.drawBodyAxis)
  return _internal_drawbodyaxis();
}
inline void PlatformPrefs::_internal_set_drawbodyaxis(bool value) {
  _has_bits_[0] |= 0x00008000u;
  drawbodyaxis_ = value;
}
inline void PlatformPrefs::set_drawbodyaxis(bool value) {
  _internal_set_drawbodyaxis(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.drawBodyAxis)
}

// optional bool drawInertialAxis = 19 [default = false];
inline bool PlatformPrefs::_internal_has_drawinertialaxis() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_drawinertialaxis() const {
  return _internal_has_drawinertialaxis();
}
inline void PlatformPrefs::clear_drawinertialaxis() {
  drawinertialaxis_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool PlatformPrefs::_internal_drawinertialaxis() const {
  return drawinertialaxis_;
}
inline bool PlatformPrefs::drawinertialaxis() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.drawInertialAxis)
  return _internal_drawinertialaxis();
}
inline void PlatformPrefs::_internal_set_drawinertialaxis(bool value) {
  _has_bits_[0] |= 0x00010000u;
  drawinertialaxis_ = value;
}
inline void PlatformPrefs::set_drawinertialaxis(bool value) {
  _internal_set_drawinertialaxis(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.drawInertialAxis)
}

// optional bool drawSunVec = 20 [default = false];
inline bool PlatformPrefs::_internal_has_drawsunvec() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_drawsunvec() const {
  return _internal_has_drawsunvec();
}
inline void PlatformPrefs::clear_drawsunvec() {
  drawsunvec_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool PlatformPrefs::_internal_drawsunvec() const {
  return drawsunvec_;
}
inline bool PlatformPrefs::drawsunvec() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.drawSunVec)
  return _internal_drawsunvec();
}
inline void PlatformPrefs::_internal_set_drawsunvec(bool value) {
  _has_bits_[0] |= 0x00020000u;
  drawsunvec_ = value;
}
inline void PlatformPrefs::set_drawsunvec(bool value) {
  _internal_set_drawsunvec(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.drawSunVec)
}

// optional bool drawMoonVec = 21 [default = false];
inline bool PlatformPrefs::_internal_has_drawmoonvec() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_drawmoonvec() const {
  return _internal_has_drawmoonvec();
}
inline void PlatformPrefs::clear_drawmoonvec() {
  drawmoonvec_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool PlatformPrefs::_internal_drawmoonvec() const {
  return drawmoonvec_;
}
inline bool PlatformPrefs::drawmoonvec() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.drawMoonVec)
  return _internal_drawmoonvec();
}
inline void PlatformPrefs::_internal_set_drawmoonvec(bool value) {
  _has_bits_[0] |= 0x00040000u;
  drawmoonvec_ = value;
}
inline void PlatformPrefs::set_drawmoonvec(bool value) {
  _internal_set_drawmoonvec(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.drawMoonVec)
}

// optional double axisScale = 22 [default = 1];
inline bool PlatformPrefs::_internal_has_axisscale() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_axisscale() const {
  return _internal_has_axisscale();
}
inline void PlatformPrefs::clear_axisscale() {
  axisscale_ = 1;
  _has_bits_[1] &= ~0x00400000u;
}
inline double PlatformPrefs::_internal_axisscale() const {
  return axisscale_;
}
inline double PlatformPrefs::axisscale() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.axisScale)
  return _internal_axisscale();
}
inline void PlatformPrefs::_internal_set_axisscale(double value) {
  _has_bits_[1] |= 0x00400000u;
  axisscale_ = value;
}
inline void PlatformPrefs::set_axisscale(double value) {
  _internal_set_axisscale(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.axisScale)
}

// optional bool wireFrame = 23 [default = false];
inline bool PlatformPrefs::_internal_has_wireframe() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_wireframe() const {
  return _internal_has_wireframe();
}
inline void PlatformPrefs::clear_wireframe() {
  wireframe_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool PlatformPrefs::_internal_wireframe() const {
  return wireframe_;
}
inline bool PlatformPrefs::wireframe() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.wireFrame)
  return _internal_wireframe();
}
inline void PlatformPrefs::_internal_set_wireframe(bool value) {
  _has_bits_[0] |= 0x00080000u;
  wireframe_ = value;
}
inline void PlatformPrefs::set_wireframe(bool value) {
  _internal_set_wireframe(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.wireFrame)
}

// optional bool drawOpticLos = 24 [default = false];
inline bool PlatformPrefs::_internal_has_drawopticlos() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_drawopticlos() const {
  return _internal_has_drawopticlos();
}
inline void PlatformPrefs::clear_drawopticlos() {
  drawopticlos_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool PlatformPrefs::_internal_drawopticlos() const {
  return drawopticlos_;
}
inline bool PlatformPrefs::drawopticlos() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.drawOpticLos)
  return _internal_drawopticlos();
}
inline void PlatformPrefs::_internal_set_drawopticlos(bool value) {
  _has_bits_[0] |= 0x00100000u;
  drawopticlos_ = value;
}
inline void PlatformPrefs::set_drawopticlos(bool value) {
  _internal_set_drawopticlos(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.drawOpticLos)
}

// optional bool drawRfLos = 25 [default = false];
inline bool PlatformPrefs::_internal_has_drawrflos() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_drawrflos() const {
  return _internal_has_drawrflos();
}
inline void PlatformPrefs::clear_drawrflos() {
  drawrflos_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool PlatformPrefs::_internal_drawrflos() const {
  return drawrflos_;
}
inline bool PlatformPrefs::drawrflos() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.drawRfLos)
  return _internal_drawrflos();
}
inline void PlatformPrefs::_internal_set_drawrflos(bool value) {
  _has_bits_[0] |= 0x00200000u;
  drawrflos_ = value;
}
inline void PlatformPrefs::set_drawrflos(bool value) {
  _internal_set_drawrflos(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.drawRfLos)
}

// optional string rcsFile = 26 [default = ""];
inline bool PlatformPrefs::_internal_has_rcsfile() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlatformPrefs::has_rcsfile() const {
  return _internal_has_rcsfile();
}
inline void PlatformPrefs::clear_rcsfile() {
  rcsfile_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlatformPrefs::rcsfile() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.rcsFile)
  return _internal_rcsfile();
}
inline void PlatformPrefs::set_rcsfile(const std::string& value) {
  _internal_set_rcsfile(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.rcsFile)
}
inline std::string* PlatformPrefs::mutable_rcsfile() {
  // @@protoc_insertion_point(field_mutable:simData.PlatformPrefs.rcsFile)
  return _internal_mutable_rcsfile();
}
inline const std::string& PlatformPrefs::_internal_rcsfile() const {
  return rcsfile_.Get();
}
inline void PlatformPrefs::_internal_set_rcsfile(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  rcsfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlatformPrefs::set_rcsfile(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  rcsfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.PlatformPrefs.rcsFile)
}
inline void PlatformPrefs::set_rcsfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  rcsfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.PlatformPrefs.rcsFile)
}
inline void PlatformPrefs::set_rcsfile(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  rcsfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.PlatformPrefs.rcsFile)
}
inline std::string* PlatformPrefs::_internal_mutable_rcsfile() {
  _has_bits_[0] |= 0x00000002u;
  return rcsfile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlatformPrefs::release_rcsfile() {
  // @@protoc_insertion_point(field_release:simData.PlatformPrefs.rcsFile)
  if (!_internal_has_rcsfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return rcsfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlatformPrefs::set_allocated_rcsfile(std::string* rcsfile) {
  if (rcsfile != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rcsfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rcsfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.PlatformPrefs.rcsFile)
}

// optional bool drawRcs = 27 [default = false];
inline bool PlatformPrefs::_internal_has_drawrcs() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_drawrcs() const {
  return _internal_has_drawrcs();
}
inline void PlatformPrefs::clear_drawrcs() {
  drawrcs_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool PlatformPrefs::_internal_drawrcs() const {
  return drawrcs_;
}
inline bool PlatformPrefs::drawrcs() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.drawRcs)
  return _internal_drawrcs();
}
inline void PlatformPrefs::_internal_set_drawrcs(bool value) {
  _has_bits_[0] |= 0x00400000u;
  drawrcs_ = value;
}
inline void PlatformPrefs::set_drawrcs(bool value) {
  _internal_set_drawrcs(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.drawRcs)
}

// optional bool draw3dRcs = 28 [default = false];
inline bool PlatformPrefs::_internal_has_draw3drcs() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_draw3drcs() const {
  return _internal_has_draw3drcs();
}
inline void PlatformPrefs::clear_draw3drcs() {
  draw3drcs_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool PlatformPrefs::_internal_draw3drcs() const {
  return draw3drcs_;
}
inline bool PlatformPrefs::draw3drcs() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.draw3dRcs)
  return _internal_draw3drcs();
}
inline void PlatformPrefs::_internal_set_draw3drcs(bool value) {
  _has_bits_[0] |= 0x02000000u;
  draw3drcs_ = value;
}
inline void PlatformPrefs::set_draw3drcs(bool value) {
  _internal_set_draw3drcs(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.draw3dRcs)
}

// optional fixed32 rcsColor = 29 [default = 4294967168];
inline bool PlatformPrefs::_internal_has_rcscolor() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_rcscolor() const {
  return _internal_has_rcscolor();
}
inline void PlatformPrefs::clear_rcscolor() {
  rcscolor_ = 4294967168u;
  _has_bits_[1] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlatformPrefs::_internal_rcscolor() const {
  return rcscolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlatformPrefs::rcscolor() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.rcsColor)
  return _internal_rcscolor();
}
inline void PlatformPrefs::_internal_set_rcscolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00800000u;
  rcscolor_ = value;
}
inline void PlatformPrefs::set_rcscolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rcscolor(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.rcsColor)
}

// optional bool rcsColorScale = 30 [default = false];
inline bool PlatformPrefs::_internal_has_rcscolorscale() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_rcscolorscale() const {
  return _internal_has_rcscolorscale();
}
inline void PlatformPrefs::clear_rcscolorscale() {
  rcscolorscale_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool PlatformPrefs::_internal_rcscolorscale() const {
  return rcscolorscale_;
}
inline bool PlatformPrefs::rcscolorscale() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.rcsColorScale)
  return _internal_rcscolorscale();
}
inline void PlatformPrefs::_internal_set_rcscolorscale(bool value) {
  _has_bits_[0] |= 0x04000000u;
  rcscolorscale_ = value;
}
inline void PlatformPrefs::set_rcscolorscale(bool value) {
  _internal_set_rcscolorscale(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.rcsColorScale)
}

// optional .simData.Polarity rcsPolarity = 31 [default = POL_UNKNOWN];
inline bool PlatformPrefs::_internal_has_rcspolarity() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_rcspolarity() const {
  return _internal_has_rcspolarity();
}
inline void PlatformPrefs::clear_rcspolarity() {
  rcspolarity_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::simData::Polarity PlatformPrefs::_internal_rcspolarity() const {
  return static_cast< ::simData::Polarity >(rcspolarity_);
}
inline ::simData::Polarity PlatformPrefs::rcspolarity() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.rcsPolarity)
  return _internal_rcspolarity();
}
inline void PlatformPrefs::_internal_set_rcspolarity(::simData::Polarity value) {
  assert(::simData::Polarity_IsValid(value));
  _has_bits_[0] |= 0x01000000u;
  rcspolarity_ = value;
}
inline void PlatformPrefs::set_rcspolarity(::simData::Polarity value) {
  _internal_set_rcspolarity(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.rcsPolarity)
}

// optional double rcsElevation = 32 [default = 0];
inline bool PlatformPrefs::_internal_has_rcselevation() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_rcselevation() const {
  return _internal_has_rcselevation();
}
inline void PlatformPrefs::clear_rcselevation() {
  rcselevation_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double PlatformPrefs::_internal_rcselevation() const {
  return rcselevation_;
}
inline double PlatformPrefs::rcselevation() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.rcsElevation)
  return _internal_rcselevation();
}
inline void PlatformPrefs::_internal_set_rcselevation(double value) {
  _has_bits_[0] |= 0x00800000u;
  rcselevation_ = value;
}
inline void PlatformPrefs::set_rcselevation(double value) {
  _internal_set_rcselevation(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.rcsElevation)
}

// optional double rcsFrequency = 33 [default = 7000];
inline bool PlatformPrefs::_internal_has_rcsfrequency() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_rcsfrequency() const {
  return _internal_has_rcsfrequency();
}
inline void PlatformPrefs::clear_rcsfrequency() {
  rcsfrequency_ = 7000;
  _has_bits_[1] &= ~0x02000000u;
}
inline double PlatformPrefs::_internal_rcsfrequency() const {
  return rcsfrequency_;
}
inline double PlatformPrefs::rcsfrequency() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.rcsFrequency)
  return _internal_rcsfrequency();
}
inline void PlatformPrefs::_internal_set_rcsfrequency(double value) {
  _has_bits_[1] |= 0x02000000u;
  rcsfrequency_ = value;
}
inline void PlatformPrefs::set_rcsfrequency(double value) {
  _internal_set_rcsfrequency(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.rcsFrequency)
}

// optional double rcsDetail = 34 [default = 1];
inline bool PlatformPrefs::_internal_has_rcsdetail() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_rcsdetail() const {
  return _internal_has_rcsdetail();
}
inline void PlatformPrefs::clear_rcsdetail() {
  rcsdetail_ = 1;
  _has_bits_[1] &= ~0x04000000u;
}
inline double PlatformPrefs::_internal_rcsdetail() const {
  return rcsdetail_;
}
inline double PlatformPrefs::rcsdetail() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.rcsDetail)
  return _internal_rcsdetail();
}
inline void PlatformPrefs::_internal_set_rcsdetail(double value) {
  _has_bits_[1] |= 0x04000000u;
  rcsdetail_ = value;
}
inline void PlatformPrefs::set_rcsdetail(double value) {
  _internal_set_rcsdetail(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.rcsDetail)
}

// optional bool drawCircleHilight = 35 [default = false];
inline bool PlatformPrefs::_internal_has_drawcirclehilight() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_drawcirclehilight() const {
  return _internal_has_drawcirclehilight();
}
inline void PlatformPrefs::clear_drawcirclehilight() {
  drawcirclehilight_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool PlatformPrefs::_internal_drawcirclehilight() const {
  return drawcirclehilight_;
}
inline bool PlatformPrefs::drawcirclehilight() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.drawCircleHilight)
  return _internal_drawcirclehilight();
}
inline void PlatformPrefs::_internal_set_drawcirclehilight(bool value) {
  _has_bits_[0] |= 0x08000000u;
  drawcirclehilight_ = value;
}
inline void PlatformPrefs::set_drawcirclehilight(bool value) {
  _internal_set_drawcirclehilight(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.drawCircleHilight)
}

// optional fixed32 circleHilightColor = 36 [default = 4294967295];
inline bool PlatformPrefs::_internal_has_circlehilightcolor() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_circlehilightcolor() const {
  return _internal_has_circlehilightcolor();
}
inline void PlatformPrefs::clear_circlehilightcolor() {
  circlehilightcolor_ = 4294967295u;
  _has_bits_[1] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlatformPrefs::_internal_circlehilightcolor() const {
  return circlehilightcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlatformPrefs::circlehilightcolor() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.circleHilightColor)
  return _internal_circlehilightcolor();
}
inline void PlatformPrefs::_internal_set_circlehilightcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x01000000u;
  circlehilightcolor_ = value;
}
inline void PlatformPrefs::set_circlehilightcolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_circlehilightcolor(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.circleHilightColor)
}

// optional .simData.CircleHilightShape circleHilightShape = 71 [default = CH_PULSING_CIRCLE];
inline bool PlatformPrefs::_internal_has_circlehilightshape() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_circlehilightshape() const {
  return _internal_has_circlehilightshape();
}
inline void PlatformPrefs::clear_circlehilightshape() {
  circlehilightshape_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::simData::CircleHilightShape PlatformPrefs::_internal_circlehilightshape() const {
  return static_cast< ::simData::CircleHilightShape >(circlehilightshape_);
}
inline ::simData::CircleHilightShape PlatformPrefs::circlehilightshape() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.circleHilightShape)
  return _internal_circlehilightshape();
}
inline void PlatformPrefs::_internal_set_circlehilightshape(::simData::CircleHilightShape value) {
  assert(::simData::CircleHilightShape_IsValid(value));
  _has_bits_[1] |= 0x00002000u;
  circlehilightshape_ = value;
}
inline void PlatformPrefs::set_circlehilightshape(::simData::CircleHilightShape value) {
  _internal_set_circlehilightshape(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.circleHilightShape)
}

// optional bool interpolatePos = 37 [default = true];
inline bool PlatformPrefs::_internal_has_interpolatepos() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_interpolatepos() const {
  return _internal_has_interpolatepos();
}
inline void PlatformPrefs::clear_interpolatepos() {
  interpolatepos_ = true;
  _has_bits_[1] &= ~0x00100000u;
}
inline bool PlatformPrefs::_internal_interpolatepos() const {
  return interpolatepos_;
}
inline bool PlatformPrefs::interpolatepos() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.interpolatePos)
  return _internal_interpolatepos();
}
inline void PlatformPrefs::_internal_set_interpolatepos(bool value) {
  _has_bits_[1] |= 0x00100000u;
  interpolatepos_ = value;
}
inline void PlatformPrefs::set_interpolatepos(bool value) {
  _internal_set_interpolatepos(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.interpolatePos)
}

// optional bool extrapolatePos = 38 [default = false];
inline bool PlatformPrefs::_internal_has_extrapolatepos() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_extrapolatepos() const {
  return _internal_has_extrapolatepos();
}
inline void PlatformPrefs::clear_extrapolatepos() {
  extrapolatepos_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool PlatformPrefs::_internal_extrapolatepos() const {
  return extrapolatepos_;
}
inline bool PlatformPrefs::extrapolatepos() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.extrapolatePos)
  return _internal_extrapolatepos();
}
inline void PlatformPrefs::_internal_set_extrapolatepos(bool value) {
  _has_bits_[0] |= 0x10000000u;
  extrapolatepos_ = value;
}
inline void PlatformPrefs::set_extrapolatepos(bool value) {
  _internal_set_extrapolatepos(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.extrapolatePos)
}

// optional double scale = 39 [default = 1];
inline bool PlatformPrefs::_internal_has_scale() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_scale() const {
  return _internal_has_scale();
}
inline void PlatformPrefs::clear_scale() {
  scale_ = 1;
  _has_bits_[1] &= ~0x08000000u;
}
inline double PlatformPrefs::_internal_scale() const {
  return scale_;
}
inline double PlatformPrefs::scale() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.scale)
  return _internal_scale();
}
inline void PlatformPrefs::_internal_set_scale(double value) {
  _has_bits_[1] |= 0x08000000u;
  scale_ = value;
}
inline void PlatformPrefs::set_scale(double value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.scale)
}

// optional int32 brightness = 40 [default = 36];
inline bool PlatformPrefs::_internal_has_brightness() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_brightness() const {
  return _internal_has_brightness();
}
inline void PlatformPrefs::clear_brightness() {
  brightness_ = 36;
  _has_bits_[1] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlatformPrefs::_internal_brightness() const {
  return brightness_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlatformPrefs::brightness() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.brightness)
  return _internal_brightness();
}
inline void PlatformPrefs::_internal_set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x20000000u;
  brightness_ = value;
}
inline void PlatformPrefs::set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.brightness)
}

// optional bool dynamicScale = 41 [default = false];
inline bool PlatformPrefs::_internal_has_dynamicscale() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_dynamicscale() const {
  return _internal_has_dynamicscale();
}
inline void PlatformPrefs::clear_dynamicscale() {
  dynamicscale_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool PlatformPrefs::_internal_dynamicscale() const {
  return dynamicscale_;
}
inline bool PlatformPrefs::dynamicscale() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.dynamicScale)
  return _internal_dynamicscale();
}
inline void PlatformPrefs::_internal_set_dynamicscale(bool value) {
  _has_bits_[0] |= 0x40000000u;
  dynamicscale_ = value;
}
inline void PlatformPrefs::set_dynamicscale(bool value) {
  _internal_set_dynamicscale(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.dynamicScale)
}

// optional double dynamicScaleOffset = 42 [default = 0];
inline bool PlatformPrefs::_internal_has_dynamicscaleoffset() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_dynamicscaleoffset() const {
  return _internal_has_dynamicscaleoffset();
}
inline void PlatformPrefs::clear_dynamicscaleoffset() {
  dynamicscaleoffset_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline double PlatformPrefs::_internal_dynamicscaleoffset() const {
  return dynamicscaleoffset_;
}
inline double PlatformPrefs::dynamicscaleoffset() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.dynamicScaleOffset)
  return _internal_dynamicscaleoffset();
}
inline void PlatformPrefs::_internal_set_dynamicscaleoffset(double value) {
  _has_bits_[0] |= 0x20000000u;
  dynamicscaleoffset_ = value;
}
inline void PlatformPrefs::set_dynamicscaleoffset(double value) {
  _internal_set_dynamicscaleoffset(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.dynamicScaleOffset)
}

// optional double dynamicScaleScalar = 43 [default = 1];
inline bool PlatformPrefs::_internal_has_dynamicscalescalar() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_dynamicscalescalar() const {
  return _internal_has_dynamicscalescalar();
}
inline void PlatformPrefs::clear_dynamicscalescalar() {
  dynamicscalescalar_ = 1;
  _has_bits_[1] &= ~0x10000000u;
}
inline double PlatformPrefs::_internal_dynamicscalescalar() const {
  return dynamicscalescalar_;
}
inline double PlatformPrefs::dynamicscalescalar() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.dynamicScaleScalar)
  return _internal_dynamicscalescalar();
}
inline void PlatformPrefs::_internal_set_dynamicscalescalar(double value) {
  _has_bits_[1] |= 0x10000000u;
  dynamicscalescalar_ = value;
}
inline void PlatformPrefs::set_dynamicscalescalar(double value) {
  _internal_set_dynamicscalescalar(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.dynamicScaleScalar)
}

// optional .simData.DynamicScaleAlgorithm dynamicScaleAlgorithm = 74 [default = DSA_METERS_TO_PIXELS];
inline bool PlatformPrefs::_internal_has_dynamicscalealgorithm() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_dynamicscalealgorithm() const {
  return _internal_has_dynamicscalealgorithm();
}
inline void PlatformPrefs::clear_dynamicscalealgorithm() {
  dynamicscalealgorithm_ = 1;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::simData::DynamicScaleAlgorithm PlatformPrefs::_internal_dynamicscalealgorithm() const {
  return static_cast< ::simData::DynamicScaleAlgorithm >(dynamicscalealgorithm_);
}
inline ::simData::DynamicScaleAlgorithm PlatformPrefs::dynamicscalealgorithm() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.dynamicScaleAlgorithm)
  return _internal_dynamicscalealgorithm();
}
inline void PlatformPrefs::_internal_set_dynamicscalealgorithm(::simData::DynamicScaleAlgorithm value) {
  assert(::simData::DynamicScaleAlgorithm_IsValid(value));
  _has_bits_[1] |= 0x00004000u;
  dynamicscalealgorithm_ = value;
}
inline void PlatformPrefs::set_dynamicscalealgorithm(::simData::DynamicScaleAlgorithm value) {
  _internal_set_dynamicscalealgorithm(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.dynamicScaleAlgorithm)
}

// optional bool drawVelocityVec = 44 [default = false];
inline bool PlatformPrefs::_internal_has_drawvelocityvec() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_drawvelocityvec() const {
  return _internal_has_drawvelocityvec();
}
inline void PlatformPrefs::clear_drawvelocityvec() {
  drawvelocityvec_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool PlatformPrefs::_internal_drawvelocityvec() const {
  return drawvelocityvec_;
}
inline bool PlatformPrefs::drawvelocityvec() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.drawVelocityVec)
  return _internal_drawvelocityvec();
}
inline void PlatformPrefs::_internal_set_drawvelocityvec(bool value) {
  _has_bits_[0] |= 0x80000000u;
  drawvelocityvec_ = value;
}
inline void PlatformPrefs::set_drawvelocityvec(bool value) {
  _internal_set_drawvelocityvec(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.drawVelocityVec)
}

// optional fixed32 velVecColor = 72 [default = 4286578943];
inline bool PlatformPrefs::_internal_has_velveccolor() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool PlatformPrefs::has_velveccolor() const {
  return _internal_has_velveccolor();
}
inline void PlatformPrefs::clear_velveccolor() {
  velveccolor_ = 4286578943u;
  _has_bits_[2] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlatformPrefs::_internal_velveccolor() const {
  return velveccolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlatformPrefs::velveccolor() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.velVecColor)
  return _internal_velveccolor();
}
inline void PlatformPrefs::_internal_set_velveccolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000100u;
  velveccolor_ = value;
}
inline void PlatformPrefs::set_velveccolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_velveccolor(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.velVecColor)
}

// optional bool velVecUseStaticLength = 45 [default = true];
inline bool PlatformPrefs::_internal_has_velvecusestaticlength() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_velvecusestaticlength() const {
  return _internal_has_velvecusestaticlength();
}
inline void PlatformPrefs::clear_velvecusestaticlength() {
  velvecusestaticlength_ = true;
  _has_bits_[1] &= ~0x00200000u;
}
inline bool PlatformPrefs::_internal_velvecusestaticlength() const {
  return velvecusestaticlength_;
}
inline bool PlatformPrefs::velvecusestaticlength() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.velVecUseStaticLength)
  return _internal_velvecusestaticlength();
}
inline void PlatformPrefs::_internal_set_velvecusestaticlength(bool value) {
  _has_bits_[1] |= 0x00200000u;
  velvecusestaticlength_ = value;
}
inline void PlatformPrefs::set_velvecusestaticlength(bool value) {
  _internal_set_velvecusestaticlength(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.velVecUseStaticLength)
}

// optional double velVecStaticLen = 46 [default = 0.5];
inline bool PlatformPrefs::_internal_has_velvecstaticlen() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_velvecstaticlen() const {
  return _internal_has_velvecstaticlen();
}
inline void PlatformPrefs::clear_velvecstaticlen() {
  velvecstaticlen_ = 0.5;
  _has_bits_[1] &= ~0x80000000u;
}
inline double PlatformPrefs::_internal_velvecstaticlen() const {
  return velvecstaticlen_;
}
inline double PlatformPrefs::velvecstaticlen() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.velVecStaticLen)
  return _internal_velvecstaticlen();
}
inline void PlatformPrefs::_internal_set_velvecstaticlen(double value) {
  _has_bits_[1] |= 0x80000000u;
  velvecstaticlen_ = value;
}
inline void PlatformPrefs::set_velvecstaticlen(double value) {
  _internal_set_velvecstaticlen(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.velVecStaticLen)
}

// optional .simData.DistanceUnits velVecStaticLenUnits = 47 [default = UNITS_NAUTICAL_MILES];
inline bool PlatformPrefs::_internal_has_velvecstaticlenunits() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_velvecstaticlenunits() const {
  return _internal_has_velvecstaticlenunits();
}
inline void PlatformPrefs::clear_velvecstaticlenunits() {
  velvecstaticlenunits_ = 26;
  _has_bits_[1] &= ~0x40000000u;
}
inline ::simData::DistanceUnits PlatformPrefs::_internal_velvecstaticlenunits() const {
  return static_cast< ::simData::DistanceUnits >(velvecstaticlenunits_);
}
inline ::simData::DistanceUnits PlatformPrefs::velvecstaticlenunits() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.velVecStaticLenUnits)
  return _internal_velvecstaticlenunits();
}
inline void PlatformPrefs::_internal_set_velvecstaticlenunits(::simData::DistanceUnits value) {
  assert(::simData::DistanceUnits_IsValid(value));
  _has_bits_[1] |= 0x40000000u;
  velvecstaticlenunits_ = value;
}
inline void PlatformPrefs::set_velvecstaticlenunits(::simData::DistanceUnits value) {
  _internal_set_velvecstaticlenunits(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.velVecStaticLenUnits)
}

// optional double velVecTime = 48 [default = 1];
inline bool PlatformPrefs::_internal_has_velvectime() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool PlatformPrefs::has_velvectime() const {
  return _internal_has_velvectime();
}
inline void PlatformPrefs::clear_velvectime() {
  velvectime_ = 1;
  _has_bits_[2] &= ~0x00000001u;
}
inline double PlatformPrefs::_internal_velvectime() const {
  return velvectime_;
}
inline double PlatformPrefs::velvectime() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.velVecTime)
  return _internal_velvectime();
}
inline void PlatformPrefs::_internal_set_velvectime(double value) {
  _has_bits_[2] |= 0x00000001u;
  velvectime_ = value;
}
inline void PlatformPrefs::set_velvectime(double value) {
  _internal_set_velvectime(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.velVecTime)
}

// optional .simData.ElapsedTimeFormat velVecTimeUnits = 62 [default = ELAPSED_SECONDS];
inline bool PlatformPrefs::_internal_has_velvectimeunits() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool PlatformPrefs::has_velvectimeunits() const {
  return _internal_has_velvectimeunits();
}
inline void PlatformPrefs::clear_velvectimeunits() {
  velvectimeunits_ = 1;
  _has_bits_[2] &= ~0x00000004u;
}
inline ::simData::ElapsedTimeFormat PlatformPrefs::_internal_velvectimeunits() const {
  return static_cast< ::simData::ElapsedTimeFormat >(velvectimeunits_);
}
inline ::simData::ElapsedTimeFormat PlatformPrefs::velvectimeunits() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.velVecTimeUnits)
  return _internal_velvectimeunits();
}
inline void PlatformPrefs::_internal_set_velvectimeunits(::simData::ElapsedTimeFormat value) {
  assert(::simData::ElapsedTimeFormat_IsValid(value));
  _has_bits_[2] |= 0x00000004u;
  velvectimeunits_ = value;
}
inline void PlatformPrefs::set_velvectimeunits(::simData::ElapsedTimeFormat value) {
  _internal_set_velvectimeunits(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.velVecTimeUnits)
}

// optional .simData.Position platPositionOffset = 49;
inline bool PlatformPrefs::_internal_has_platpositionoffset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || platpositionoffset_ != nullptr);
  return value;
}
inline bool PlatformPrefs::has_platpositionoffset() const {
  return _internal_has_platpositionoffset();
}
inline void PlatformPrefs::clear_platpositionoffset() {
  if (platpositionoffset_ != nullptr) platpositionoffset_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::simData::Position& PlatformPrefs::_internal_platpositionoffset() const {
  const ::simData::Position* p = platpositionoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::Position&>(
      ::simData::_Position_default_instance_);
}
inline const ::simData::Position& PlatformPrefs::platpositionoffset() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.platPositionOffset)
  return _internal_platpositionoffset();
}
inline void PlatformPrefs::unsafe_arena_set_allocated_platpositionoffset(
    ::simData::Position* platpositionoffset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(platpositionoffset_);
  }
  platpositionoffset_ = platpositionoffset;
  if (platpositionoffset) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.PlatformPrefs.platPositionOffset)
}
inline ::simData::Position* PlatformPrefs::release_platpositionoffset() {
  _has_bits_[0] &= ~0x00000010u;
  ::simData::Position* temp = platpositionoffset_;
  platpositionoffset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::Position* PlatformPrefs::unsafe_arena_release_platpositionoffset() {
  // @@protoc_insertion_point(field_release:simData.PlatformPrefs.platPositionOffset)
  _has_bits_[0] &= ~0x00000010u;
  ::simData::Position* temp = platpositionoffset_;
  platpositionoffset_ = nullptr;
  return temp;
}
inline ::simData::Position* PlatformPrefs::_internal_mutable_platpositionoffset() {
  _has_bits_[0] |= 0x00000010u;
  if (platpositionoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::Position>(GetArena());
    platpositionoffset_ = p;
  }
  return platpositionoffset_;
}
inline ::simData::Position* PlatformPrefs::mutable_platpositionoffset() {
  // @@protoc_insertion_point(field_mutable:simData.PlatformPrefs.platPositionOffset)
  return _internal_mutable_platpositionoffset();
}
inline void PlatformPrefs::set_allocated_platpositionoffset(::simData::Position* platpositionoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete platpositionoffset_;
  }
  if (platpositionoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(platpositionoffset);
    if (message_arena != submessage_arena) {
      platpositionoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, platpositionoffset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  platpositionoffset_ = platpositionoffset;
  // @@protoc_insertion_point(field_set_allocated:simData.PlatformPrefs.platPositionOffset)
}

// optional .simData.BodyOrientation orientationOffset = 50;
inline bool PlatformPrefs::_internal_has_orientationoffset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || orientationoffset_ != nullptr);
  return value;
}
inline bool PlatformPrefs::has_orientationoffset() const {
  return _internal_has_orientationoffset();
}
inline void PlatformPrefs::clear_orientationoffset() {
  if (orientationoffset_ != nullptr) orientationoffset_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::simData::BodyOrientation& PlatformPrefs::_internal_orientationoffset() const {
  const ::simData::BodyOrientation* p = orientationoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::BodyOrientation&>(
      ::simData::_BodyOrientation_default_instance_);
}
inline const ::simData::BodyOrientation& PlatformPrefs::orientationoffset() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.orientationOffset)
  return _internal_orientationoffset();
}
inline void PlatformPrefs::unsafe_arena_set_allocated_orientationoffset(
    ::simData::BodyOrientation* orientationoffset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientationoffset_);
  }
  orientationoffset_ = orientationoffset;
  if (orientationoffset) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.PlatformPrefs.orientationOffset)
}
inline ::simData::BodyOrientation* PlatformPrefs::release_orientationoffset() {
  _has_bits_[0] &= ~0x00000020u;
  ::simData::BodyOrientation* temp = orientationoffset_;
  orientationoffset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::BodyOrientation* PlatformPrefs::unsafe_arena_release_orientationoffset() {
  // @@protoc_insertion_point(field_release:simData.PlatformPrefs.orientationOffset)
  _has_bits_[0] &= ~0x00000020u;
  ::simData::BodyOrientation* temp = orientationoffset_;
  orientationoffset_ = nullptr;
  return temp;
}
inline ::simData::BodyOrientation* PlatformPrefs::_internal_mutable_orientationoffset() {
  _has_bits_[0] |= 0x00000020u;
  if (orientationoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::BodyOrientation>(GetArena());
    orientationoffset_ = p;
  }
  return orientationoffset_;
}
inline ::simData::BodyOrientation* PlatformPrefs::mutable_orientationoffset() {
  // @@protoc_insertion_point(field_mutable:simData.PlatformPrefs.orientationOffset)
  return _internal_mutable_orientationoffset();
}
inline void PlatformPrefs::set_allocated_orientationoffset(::simData::BodyOrientation* orientationoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientationoffset_;
  }
  if (orientationoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientationoffset);
    if (message_arena != submessage_arena) {
      orientationoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientationoffset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  orientationoffset_ = orientationoffset;
  // @@protoc_insertion_point(field_set_allocated:simData.PlatformPrefs.orientationOffset)
}

// repeated string gogFile = 51;
inline int PlatformPrefs::_internal_gogfile_size() const {
  return gogfile_.size();
}
inline int PlatformPrefs::gogfile_size() const {
  return _internal_gogfile_size();
}
inline void PlatformPrefs::clear_gogfile() {
  gogfile_.Clear();
}
inline std::string* PlatformPrefs::add_gogfile() {
  // @@protoc_insertion_point(field_add_mutable:simData.PlatformPrefs.gogFile)
  return _internal_add_gogfile();
}
inline const std::string& PlatformPrefs::_internal_gogfile(int index) const {
  return gogfile_.Get(index);
}
inline const std::string& PlatformPrefs::gogfile(int index) const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.gogFile)
  return _internal_gogfile(index);
}
inline std::string* PlatformPrefs::mutable_gogfile(int index) {
  // @@protoc_insertion_point(field_mutable:simData.PlatformPrefs.gogFile)
  return gogfile_.Mutable(index);
}
inline void PlatformPrefs::set_gogfile(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.gogFile)
  gogfile_.Mutable(index)->assign(value);
}
inline void PlatformPrefs::set_gogfile(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.gogFile)
  gogfile_.Mutable(index)->assign(std::move(value));
}
inline void PlatformPrefs::set_gogfile(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  gogfile_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:simData.PlatformPrefs.gogFile)
}
inline void PlatformPrefs::set_gogfile(int index, const char* value, size_t size) {
  gogfile_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:simData.PlatformPrefs.gogFile)
}
inline std::string* PlatformPrefs::_internal_add_gogfile() {
  return gogfile_.Add();
}
inline void PlatformPrefs::add_gogfile(const std::string& value) {
  gogfile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:simData.PlatformPrefs.gogFile)
}
inline void PlatformPrefs::add_gogfile(std::string&& value) {
  gogfile_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:simData.PlatformPrefs.gogFile)
}
inline void PlatformPrefs::add_gogfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  gogfile_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:simData.PlatformPrefs.gogFile)
}
inline void PlatformPrefs::add_gogfile(const char* value, size_t size) {
  gogfile_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:simData.PlatformPrefs.gogFile)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PlatformPrefs::gogfile() const {
  // @@protoc_insertion_point(field_list:simData.PlatformPrefs.gogFile)
  return gogfile_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PlatformPrefs::mutable_gogfile() {
  // @@protoc_insertion_point(field_mutable_list:simData.PlatformPrefs.gogFile)
  return &gogfile_;
}

// optional .simData.Position scaleXYZ = 52;
inline bool PlatformPrefs::_internal_has_scalexyz() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || scalexyz_ != nullptr);
  return value;
}
inline bool PlatformPrefs::has_scalexyz() const {
  return _internal_has_scalexyz();
}
inline void PlatformPrefs::clear_scalexyz() {
  if (scalexyz_ != nullptr) scalexyz_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::simData::Position& PlatformPrefs::_internal_scalexyz() const {
  const ::simData::Position* p = scalexyz_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::Position&>(
      ::simData::_Position_default_instance_);
}
inline const ::simData::Position& PlatformPrefs::scalexyz() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.scaleXYZ)
  return _internal_scalexyz();
}
inline void PlatformPrefs::unsafe_arena_set_allocated_scalexyz(
    ::simData::Position* scalexyz) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scalexyz_);
  }
  scalexyz_ = scalexyz;
  if (scalexyz) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.PlatformPrefs.scaleXYZ)
}
inline ::simData::Position* PlatformPrefs::release_scalexyz() {
  _has_bits_[0] &= ~0x00000040u;
  ::simData::Position* temp = scalexyz_;
  scalexyz_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::Position* PlatformPrefs::unsafe_arena_release_scalexyz() {
  // @@protoc_insertion_point(field_release:simData.PlatformPrefs.scaleXYZ)
  _has_bits_[0] &= ~0x00000040u;
  ::simData::Position* temp = scalexyz_;
  scalexyz_ = nullptr;
  return temp;
}
inline ::simData::Position* PlatformPrefs::_internal_mutable_scalexyz() {
  _has_bits_[0] |= 0x00000040u;
  if (scalexyz_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::Position>(GetArena());
    scalexyz_ = p;
  }
  return scalexyz_;
}
inline ::simData::Position* PlatformPrefs::mutable_scalexyz() {
  // @@protoc_insertion_point(field_mutable:simData.PlatformPrefs.scaleXYZ)
  return _internal_mutable_scalexyz();
}
inline void PlatformPrefs::set_allocated_scalexyz(::simData::Position* scalexyz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scalexyz_;
  }
  if (scalexyz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scalexyz);
    if (message_arena != submessage_arena) {
      scalexyz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalexyz, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  scalexyz_ = scalexyz;
  // @@protoc_insertion_point(field_set_allocated:simData.PlatformPrefs.scaleXYZ)
}

// optional bool alphaVolume = 53 [default = false];
inline bool PlatformPrefs::_internal_has_alphavolume() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool PlatformPrefs::has_alphavolume() const {
  return _internal_has_alphavolume();
}
inline void PlatformPrefs::clear_alphavolume() {
  alphavolume_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool PlatformPrefs::_internal_alphavolume() const {
  return alphavolume_;
}
inline bool PlatformPrefs::alphavolume() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.alphaVolume)
  return _internal_alphavolume();
}
inline void PlatformPrefs::_internal_set_alphavolume(bool value) {
  _has_bits_[1] |= 0x00000001u;
  alphavolume_ = value;
}
inline void PlatformPrefs::set_alphavolume(bool value) {
  _internal_set_alphavolume(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.alphaVolume)
}

// optional bool useCullFace = 54 [default = false];
inline bool PlatformPrefs::_internal_has_usecullface() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool PlatformPrefs::has_usecullface() const {
  return _internal_has_usecullface();
}
inline void PlatformPrefs::clear_usecullface() {
  usecullface_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool PlatformPrefs::_internal_usecullface() const {
  return usecullface_;
}
inline bool PlatformPrefs::usecullface() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.useCullFace)
  return _internal_usecullface();
}
inline void PlatformPrefs::_internal_set_usecullface(bool value) {
  _has_bits_[1] |= 0x00000002u;
  usecullface_ = value;
}
inline void PlatformPrefs::set_usecullface(bool value) {
  _internal_set_usecullface(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.useCullFace)
}

// optional .simData.PolygonFace cullFace = 55 [default = FRONT_AND_BACK];
inline bool PlatformPrefs::_internal_has_cullface() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool PlatformPrefs::has_cullface() const {
  return _internal_has_cullface();
}
inline void PlatformPrefs::clear_cullface() {
  cullface_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::simData::PolygonFace PlatformPrefs::_internal_cullface() const {
  return static_cast< ::simData::PolygonFace >(cullface_);
}
inline ::simData::PolygonFace PlatformPrefs::cullface() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.cullFace)
  return _internal_cullface();
}
inline void PlatformPrefs::_internal_set_cullface(::simData::PolygonFace value) {
  assert(::simData::PolygonFace_IsValid(value));
  _has_bits_[1] |= 0x00000040u;
  cullface_ = value;
}
inline void PlatformPrefs::set_cullface(::simData::PolygonFace value) {
  _internal_set_cullface(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.cullFace)
}

// optional .simData.PolygonFace polygonModeFace = 56 [default = FRONT_AND_BACK];
inline bool PlatformPrefs::_internal_has_polygonmodeface() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool PlatformPrefs::has_polygonmodeface() const {
  return _internal_has_polygonmodeface();
}
inline void PlatformPrefs::clear_polygonmodeface() {
  polygonmodeface_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::simData::PolygonFace PlatformPrefs::_internal_polygonmodeface() const {
  return static_cast< ::simData::PolygonFace >(polygonmodeface_);
}
inline ::simData::PolygonFace PlatformPrefs::polygonmodeface() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.polygonModeFace)
  return _internal_polygonmodeface();
}
inline void PlatformPrefs::_internal_set_polygonmodeface(::simData::PolygonFace value) {
  assert(::simData::PolygonFace_IsValid(value));
  _has_bits_[1] |= 0x00000080u;
  polygonmodeface_ = value;
}
inline void PlatformPrefs::set_polygonmodeface(::simData::PolygonFace value) {
  _internal_set_polygonmodeface(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.polygonModeFace)
}

// optional .simData.PolygonMode polygonMode = 57 [default = FILL];
inline bool PlatformPrefs::_internal_has_polygonmode() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool PlatformPrefs::has_polygonmode() const {
  return _internal_has_polygonmode();
}
inline void PlatformPrefs::clear_polygonmode() {
  polygonmode_ = 6914;
  _has_bits_[2] &= ~0x00000002u;
}
inline ::simData::PolygonMode PlatformPrefs::_internal_polygonmode() const {
  return static_cast< ::simData::PolygonMode >(polygonmode_);
}
inline ::simData::PolygonMode PlatformPrefs::polygonmode() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.polygonMode)
  return _internal_polygonmode();
}
inline void PlatformPrefs::_internal_set_polygonmode(::simData::PolygonMode value) {
  assert(::simData::PolygonMode_IsValid(value));
  _has_bits_[2] |= 0x00000002u;
  polygonmode_ = value;
}
inline void PlatformPrefs::set_polygonmode(::simData::PolygonMode value) {
  _internal_set_polygonmode(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.polygonMode)
}

// optional bool usePolygonStipple = 58 [default = false];
inline bool PlatformPrefs::_internal_has_usepolygonstipple() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool PlatformPrefs::has_usepolygonstipple() const {
  return _internal_has_usepolygonstipple();
}
inline void PlatformPrefs::clear_usepolygonstipple() {
  usepolygonstipple_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool PlatformPrefs::_internal_usepolygonstipple() const {
  return usepolygonstipple_;
}
inline bool PlatformPrefs::usepolygonstipple() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.usePolygonStipple)
  return _internal_usepolygonstipple();
}
inline void PlatformPrefs::_internal_set_usepolygonstipple(bool value) {
  _has_bits_[1] |= 0x00000200u;
  usepolygonstipple_ = value;
}
inline void PlatformPrefs::set_usepolygonstipple(bool value) {
  _internal_set_usepolygonstipple(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.usePolygonStipple)
}

// optional uint32 polygonStipple = 59;
inline bool PlatformPrefs::_internal_has_polygonstipple() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool PlatformPrefs::has_polygonstipple() const {
  return _internal_has_polygonstipple();
}
inline void PlatformPrefs::clear_polygonstipple() {
  polygonstipple_ = 0u;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlatformPrefs::_internal_polygonstipple() const {
  return polygonstipple_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlatformPrefs::polygonstipple() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.polygonStipple)
  return _internal_polygonstipple();
}
inline void PlatformPrefs::_internal_set_polygonstipple(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000100u;
  polygonstipple_ = value;
}
inline void PlatformPrefs::set_polygonstipple(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_polygonstipple(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.polygonStipple)
}

// optional fixed32 visibleLosColor = 64 [default = 16711808];
inline bool PlatformPrefs::_internal_has_visibleloscolor() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool PlatformPrefs::has_visibleloscolor() const {
  return _internal_has_visibleloscolor();
}
inline void PlatformPrefs::clear_visibleloscolor() {
  visibleloscolor_ = 16711808u;
  _has_bits_[2] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlatformPrefs::_internal_visibleloscolor() const {
  return visibleloscolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlatformPrefs::visibleloscolor() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.visibleLosColor)
  return _internal_visibleloscolor();
}
inline void PlatformPrefs::_internal_set_visibleloscolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000010u;
  visibleloscolor_ = value;
}
inline void PlatformPrefs::set_visibleloscolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_visibleloscolor(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.visibleLosColor)
}

// optional fixed32 obstructedLosColor = 65 [default = 4278190208];
inline bool PlatformPrefs::_internal_has_obstructedloscolor() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool PlatformPrefs::has_obstructedloscolor() const {
  return _internal_has_obstructedloscolor();
}
inline void PlatformPrefs::clear_obstructedloscolor() {
  obstructedloscolor_ = 4278190208u;
  _has_bits_[2] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlatformPrefs::_internal_obstructedloscolor() const {
  return obstructedloscolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlatformPrefs::obstructedloscolor() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.obstructedLosColor)
  return _internal_obstructedloscolor();
}
inline void PlatformPrefs::_internal_set_obstructedloscolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000080u;
  obstructedloscolor_ = value;
}
inline void PlatformPrefs::set_obstructedloscolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_obstructedloscolor(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.obstructedLosColor)
}

// optional double losRangeResolution = 66 [default = 1000];
inline bool PlatformPrefs::_internal_has_losrangeresolution() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool PlatformPrefs::has_losrangeresolution() const {
  return _internal_has_losrangeresolution();
}
inline void PlatformPrefs::clear_losrangeresolution() {
  losrangeresolution_ = 1000;
  _has_bits_[2] &= ~0x00000020u;
}
inline double PlatformPrefs::_internal_losrangeresolution() const {
  return losrangeresolution_;
}
inline double PlatformPrefs::losrangeresolution() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.losRangeResolution)
  return _internal_losrangeresolution();
}
inline void PlatformPrefs::_internal_set_losrangeresolution(double value) {
  _has_bits_[2] |= 0x00000020u;
  losrangeresolution_ = value;
}
inline void PlatformPrefs::set_losrangeresolution(double value) {
  _internal_set_losrangeresolution(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.losRangeResolution)
}

// optional double losAzimuthalResolution = 67 [default = 15];
inline bool PlatformPrefs::_internal_has_losazimuthalresolution() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool PlatformPrefs::has_losazimuthalresolution() const {
  return _internal_has_losazimuthalresolution();
}
inline void PlatformPrefs::clear_losazimuthalresolution() {
  losazimuthalresolution_ = 15;
  _has_bits_[2] &= ~0x00000040u;
}
inline double PlatformPrefs::_internal_losazimuthalresolution() const {
  return losazimuthalresolution_;
}
inline double PlatformPrefs::losazimuthalresolution() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.losAzimuthalResolution)
  return _internal_losazimuthalresolution();
}
inline void PlatformPrefs::_internal_set_losazimuthalresolution(double value) {
  _has_bits_[2] |= 0x00000040u;
  losazimuthalresolution_ = value;
}
inline void PlatformPrefs::set_losazimuthalresolution(double value) {
  _internal_set_losazimuthalresolution(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.losAzimuthalResolution)
}

// optional double losAltitudeOffset = 68 [default = 0];
inline bool PlatformPrefs::_internal_has_losaltitudeoffset() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool PlatformPrefs::has_losaltitudeoffset() const {
  return _internal_has_losaltitudeoffset();
}
inline void PlatformPrefs::clear_losaltitudeoffset() {
  losaltitudeoffset_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline double PlatformPrefs::_internal_losaltitudeoffset() const {
  return losaltitudeoffset_;
}
inline double PlatformPrefs::losaltitudeoffset() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.losAltitudeOffset)
  return _internal_losaltitudeoffset();
}
inline void PlatformPrefs::_internal_set_losaltitudeoffset(double value) {
  _has_bits_[1] |= 0x00001000u;
  losaltitudeoffset_ = value;
}
inline void PlatformPrefs::set_losaltitudeoffset(double value) {
  _internal_set_losaltitudeoffset(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.losAltitudeOffset)
}

// optional bool animateDofNodes = 70 [default = false];
inline bool PlatformPrefs::_internal_has_animatedofnodes() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool PlatformPrefs::has_animatedofnodes() const {
  return _internal_has_animatedofnodes();
}
inline void PlatformPrefs::clear_animatedofnodes() {
  animatedofnodes_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool PlatformPrefs::_internal_animatedofnodes() const {
  return animatedofnodes_;
}
inline bool PlatformPrefs::animatedofnodes() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.animateDofNodes)
  return _internal_animatedofnodes();
}
inline void PlatformPrefs::_internal_set_animatedofnodes(bool value) {
  _has_bits_[1] |= 0x00000400u;
  animatedofnodes_ = value;
}
inline void PlatformPrefs::set_animatedofnodes(bool value) {
  _internal_set_animatedofnodes(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.animateDofNodes)
}

// optional bool eciDataMode = 73 [default = false];
inline bool PlatformPrefs::_internal_has_ecidatamode() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool PlatformPrefs::has_ecidatamode() const {
  return _internal_has_ecidatamode();
}
inline void PlatformPrefs::clear_ecidatamode() {
  ecidatamode_ = false;
  _has_bits_[1] &= ~0x00000800u;
}
inline bool PlatformPrefs::_internal_ecidatamode() const {
  return ecidatamode_;
}
inline bool PlatformPrefs::ecidatamode() const {
  // @@protoc_insertion_point(field_get:simData.PlatformPrefs.eciDataMode)
  return _internal_ecidatamode();
}
inline void PlatformPrefs::_internal_set_ecidatamode(bool value) {
  _has_bits_[1] |= 0x00000800u;
  ecidatamode_ = value;
}
inline void PlatformPrefs::set_ecidatamode(bool value) {
  _internal_set_ecidatamode(value);
  // @@protoc_insertion_point(field_set:simData.PlatformPrefs.eciDataMode)
}

// -------------------------------------------------------------------

// PlatformCommand

// optional double time = 1;
inline bool PlatformCommand::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlatformCommand::has_time() const {
  return _internal_has_time();
}
inline void PlatformCommand::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PlatformCommand::_internal_time() const {
  return time_;
}
inline double PlatformCommand::time() const {
  // @@protoc_insertion_point(field_get:simData.PlatformCommand.time)
  return _internal_time();
}
inline void PlatformCommand::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void PlatformCommand::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.PlatformCommand.time)
}

// optional .simData.PlatformPrefs updatePrefs = 2;
inline bool PlatformCommand::_internal_has_updateprefs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || updateprefs_ != nullptr);
  return value;
}
inline bool PlatformCommand::has_updateprefs() const {
  return _internal_has_updateprefs();
}
inline void PlatformCommand::clear_updateprefs() {
  if (updateprefs_ != nullptr) updateprefs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::simData::PlatformPrefs& PlatformCommand::_internal_updateprefs() const {
  const ::simData::PlatformPrefs* p = updateprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::PlatformPrefs&>(
      ::simData::_PlatformPrefs_default_instance_);
}
inline const ::simData::PlatformPrefs& PlatformCommand::updateprefs() const {
  // @@protoc_insertion_point(field_get:simData.PlatformCommand.updatePrefs)
  return _internal_updateprefs();
}
inline void PlatformCommand::unsafe_arena_set_allocated_updateprefs(
    ::simData::PlatformPrefs* updateprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updateprefs_);
  }
  updateprefs_ = updateprefs;
  if (updateprefs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.PlatformCommand.updatePrefs)
}
inline ::simData::PlatformPrefs* PlatformCommand::release_updateprefs() {
  _has_bits_[0] &= ~0x00000001u;
  ::simData::PlatformPrefs* temp = updateprefs_;
  updateprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::PlatformPrefs* PlatformCommand::unsafe_arena_release_updateprefs() {
  // @@protoc_insertion_point(field_release:simData.PlatformCommand.updatePrefs)
  _has_bits_[0] &= ~0x00000001u;
  ::simData::PlatformPrefs* temp = updateprefs_;
  updateprefs_ = nullptr;
  return temp;
}
inline ::simData::PlatformPrefs* PlatformCommand::_internal_mutable_updateprefs() {
  _has_bits_[0] |= 0x00000001u;
  if (updateprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::PlatformPrefs>(GetArena());
    updateprefs_ = p;
  }
  return updateprefs_;
}
inline ::simData::PlatformPrefs* PlatformCommand::mutable_updateprefs() {
  // @@protoc_insertion_point(field_mutable:simData.PlatformCommand.updatePrefs)
  return _internal_mutable_updateprefs();
}
inline void PlatformCommand::set_allocated_updateprefs(::simData::PlatformPrefs* updateprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updateprefs_;
  }
  if (updateprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updateprefs);
    if (message_arena != submessage_arena) {
      updateprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  updateprefs_ = updateprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.PlatformCommand.updatePrefs)
}

// optional bool isClearCommand = 3 [default = false];
inline bool PlatformCommand::_internal_has_isclearcommand() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlatformCommand::has_isclearcommand() const {
  return _internal_has_isclearcommand();
}
inline void PlatformCommand::clear_isclearcommand() {
  isclearcommand_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PlatformCommand::_internal_isclearcommand() const {
  return isclearcommand_;
}
inline bool PlatformCommand::isclearcommand() const {
  // @@protoc_insertion_point(field_get:simData.PlatformCommand.isClearCommand)
  return _internal_isclearcommand();
}
inline void PlatformCommand::_internal_set_isclearcommand(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isclearcommand_ = value;
}
inline void PlatformCommand::set_isclearcommand(bool value) {
  _internal_set_isclearcommand(value);
  // @@protoc_insertion_point(field_set:simData.PlatformCommand.isClearCommand)
}

// -------------------------------------------------------------------

// BeamProperties

// optional uint64 id = 1;
inline bool BeamProperties::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BeamProperties::has_id() const {
  return _internal_has_id();
}
inline void BeamProperties::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BeamProperties::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BeamProperties::id() const {
  // @@protoc_insertion_point(field_get:simData.BeamProperties.id)
  return _internal_id();
}
inline void BeamProperties::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void BeamProperties::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:simData.BeamProperties.id)
}

// optional uint64 hostId = 2;
inline bool BeamProperties::_internal_has_hostid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BeamProperties::has_hostid() const {
  return _internal_has_hostid();
}
inline void BeamProperties::clear_hostid() {
  hostid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BeamProperties::_internal_hostid() const {
  return hostid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BeamProperties::hostid() const {
  // @@protoc_insertion_point(field_get:simData.BeamProperties.hostId)
  return _internal_hostid();
}
inline void BeamProperties::_internal_set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  hostid_ = value;
}
inline void BeamProperties::set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hostid(value);
  // @@protoc_insertion_point(field_set:simData.BeamProperties.hostId)
}

// optional uint64 originalId = 4;
inline bool BeamProperties::_internal_has_originalid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BeamProperties::has_originalid() const {
  return _internal_has_originalid();
}
inline void BeamProperties::clear_originalid() {
  originalid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BeamProperties::_internal_originalid() const {
  return originalid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BeamProperties::originalid() const {
  // @@protoc_insertion_point(field_get:simData.BeamProperties.originalId)
  return _internal_originalid();
}
inline void BeamProperties::_internal_set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  originalid_ = value;
}
inline void BeamProperties::set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_originalid(value);
  // @@protoc_insertion_point(field_set:simData.BeamProperties.originalId)
}

// optional string source = 5;
inline bool BeamProperties::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BeamProperties::has_source() const {
  return _internal_has_source();
}
inline void BeamProperties::clear_source() {
  source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BeamProperties::source() const {
  // @@protoc_insertion_point(field_get:simData.BeamProperties.source)
  return _internal_source();
}
inline void BeamProperties::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:simData.BeamProperties.source)
}
inline std::string* BeamProperties::mutable_source() {
  // @@protoc_insertion_point(field_mutable:simData.BeamProperties.source)
  return _internal_mutable_source();
}
inline const std::string& BeamProperties::_internal_source() const {
  return source_.Get();
}
inline void BeamProperties::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BeamProperties::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.BeamProperties.source)
}
inline void BeamProperties::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.BeamProperties.source)
}
inline void BeamProperties::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.BeamProperties.source)
}
inline std::string* BeamProperties::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BeamProperties::release_source() {
  // @@protoc_insertion_point(field_release:simData.BeamProperties.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BeamProperties::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.BeamProperties.source)
}

// optional .simData.BeamProperties.BeamType type = 6;
inline bool BeamProperties::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BeamProperties::has_type() const {
  return _internal_has_type();
}
inline void BeamProperties::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::simData::BeamProperties_BeamType BeamProperties::_internal_type() const {
  return static_cast< ::simData::BeamProperties_BeamType >(type_);
}
inline ::simData::BeamProperties_BeamType BeamProperties::type() const {
  // @@protoc_insertion_point(field_get:simData.BeamProperties.type)
  return _internal_type();
}
inline void BeamProperties::_internal_set_type(::simData::BeamProperties_BeamType value) {
  assert(::simData::BeamProperties_BeamType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void BeamProperties::set_type(::simData::BeamProperties_BeamType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:simData.BeamProperties.type)
}

// -------------------------------------------------------------------

// BeamPrefs_AntennaPattern

// optional .simData.BeamPrefs.AntennaPattern.Type type = 1 [default = ALGORITHM];
inline bool BeamPrefs_AntennaPattern::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BeamPrefs_AntennaPattern::has_type() const {
  return _internal_has_type();
}
inline void BeamPrefs_AntennaPattern::clear_type() {
  type_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::simData::BeamPrefs_AntennaPattern_Type BeamPrefs_AntennaPattern::_internal_type() const {
  return static_cast< ::simData::BeamPrefs_AntennaPattern_Type >(type_);
}
inline ::simData::BeamPrefs_AntennaPattern_Type BeamPrefs_AntennaPattern::type() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.AntennaPattern.type)
  return _internal_type();
}
inline void BeamPrefs_AntennaPattern::_internal_set_type(::simData::BeamPrefs_AntennaPattern_Type value) {
  assert(::simData::BeamPrefs_AntennaPattern_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void BeamPrefs_AntennaPattern::set_type(::simData::BeamPrefs_AntennaPattern_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.AntennaPattern.type)
}

// optional .simData.BeamPrefs.AntennaPattern.FileFormat fileFormat = 2 [default = TABLE];
inline bool BeamPrefs_AntennaPattern::_internal_has_fileformat() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BeamPrefs_AntennaPattern::has_fileformat() const {
  return _internal_has_fileformat();
}
inline void BeamPrefs_AntennaPattern::clear_fileformat() {
  fileformat_ = 6;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::simData::BeamPrefs_AntennaPattern_FileFormat BeamPrefs_AntennaPattern::_internal_fileformat() const {
  return static_cast< ::simData::BeamPrefs_AntennaPattern_FileFormat >(fileformat_);
}
inline ::simData::BeamPrefs_AntennaPattern_FileFormat BeamPrefs_AntennaPattern::fileformat() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.AntennaPattern.fileFormat)
  return _internal_fileformat();
}
inline void BeamPrefs_AntennaPattern::_internal_set_fileformat(::simData::BeamPrefs_AntennaPattern_FileFormat value) {
  assert(::simData::BeamPrefs_AntennaPattern_FileFormat_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  fileformat_ = value;
}
inline void BeamPrefs_AntennaPattern::set_fileformat(::simData::BeamPrefs_AntennaPattern_FileFormat value) {
  _internal_set_fileformat(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.AntennaPattern.fileFormat)
}

// optional string fileName = 3 [default = ""];
inline bool BeamPrefs_AntennaPattern::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BeamPrefs_AntennaPattern::has_filename() const {
  return _internal_has_filename();
}
inline void BeamPrefs_AntennaPattern::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BeamPrefs_AntennaPattern::filename() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.AntennaPattern.fileName)
  return _internal_filename();
}
inline void BeamPrefs_AntennaPattern::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.AntennaPattern.fileName)
}
inline std::string* BeamPrefs_AntennaPattern::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:simData.BeamPrefs.AntennaPattern.fileName)
  return _internal_mutable_filename();
}
inline const std::string& BeamPrefs_AntennaPattern::_internal_filename() const {
  return filename_.Get();
}
inline void BeamPrefs_AntennaPattern::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BeamPrefs_AntennaPattern::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.BeamPrefs.AntennaPattern.fileName)
}
inline void BeamPrefs_AntennaPattern::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.BeamPrefs.AntennaPattern.fileName)
}
inline void BeamPrefs_AntennaPattern::set_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.BeamPrefs.AntennaPattern.fileName)
}
inline std::string* BeamPrefs_AntennaPattern::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BeamPrefs_AntennaPattern::release_filename() {
  // @@protoc_insertion_point(field_release:simData.BeamPrefs.AntennaPattern.fileName)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BeamPrefs_AntennaPattern::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.BeamPrefs.AntennaPattern.fileName)
}

// optional .simData.BeamPrefs.AntennaPattern.Algorithm algorithm = 4 [default = PEDESTAL];
inline bool BeamPrefs_AntennaPattern::_internal_has_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BeamPrefs_AntennaPattern::has_algorithm() const {
  return _internal_has_algorithm();
}
inline void BeamPrefs_AntennaPattern::clear_algorithm() {
  algorithm_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::simData::BeamPrefs_AntennaPattern_Algorithm BeamPrefs_AntennaPattern::_internal_algorithm() const {
  return static_cast< ::simData::BeamPrefs_AntennaPattern_Algorithm >(algorithm_);
}
inline ::simData::BeamPrefs_AntennaPattern_Algorithm BeamPrefs_AntennaPattern::algorithm() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.AntennaPattern.algorithm)
  return _internal_algorithm();
}
inline void BeamPrefs_AntennaPattern::_internal_set_algorithm(::simData::BeamPrefs_AntennaPattern_Algorithm value) {
  assert(::simData::BeamPrefs_AntennaPattern_Algorithm_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  algorithm_ = value;
}
inline void BeamPrefs_AntennaPattern::set_algorithm(::simData::BeamPrefs_AntennaPattern_Algorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.AntennaPattern.algorithm)
}

// -------------------------------------------------------------------

// BeamPrefs

// optional .simData.CommonPrefs commonPrefs = 1;
inline bool BeamPrefs::_internal_has_commonprefs() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || commonprefs_ != nullptr);
  return value;
}
inline bool BeamPrefs::has_commonprefs() const {
  return _internal_has_commonprefs();
}
inline void BeamPrefs::clear_commonprefs() {
  if (commonprefs_ != nullptr) commonprefs_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::simData::CommonPrefs& BeamPrefs::_internal_commonprefs() const {
  const ::simData::CommonPrefs* p = commonprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::CommonPrefs&>(
      ::simData::_CommonPrefs_default_instance_);
}
inline const ::simData::CommonPrefs& BeamPrefs::commonprefs() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.commonPrefs)
  return _internal_commonprefs();
}
inline void BeamPrefs::unsafe_arena_set_allocated_commonprefs(
    ::simData::CommonPrefs* commonprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commonprefs_);
  }
  commonprefs_ = commonprefs;
  if (commonprefs) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.BeamPrefs.commonPrefs)
}
inline ::simData::CommonPrefs* BeamPrefs::release_commonprefs() {
  _has_bits_[0] &= ~0x00000002u;
  ::simData::CommonPrefs* temp = commonprefs_;
  commonprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::CommonPrefs* BeamPrefs::unsafe_arena_release_commonprefs() {
  // @@protoc_insertion_point(field_release:simData.BeamPrefs.commonPrefs)
  _has_bits_[0] &= ~0x00000002u;
  ::simData::CommonPrefs* temp = commonprefs_;
  commonprefs_ = nullptr;
  return temp;
}
inline ::simData::CommonPrefs* BeamPrefs::_internal_mutable_commonprefs() {
  _has_bits_[0] |= 0x00000002u;
  if (commonprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::CommonPrefs>(GetArena());
    commonprefs_ = p;
  }
  return commonprefs_;
}
inline ::simData::CommonPrefs* BeamPrefs::mutable_commonprefs() {
  // @@protoc_insertion_point(field_mutable:simData.BeamPrefs.commonPrefs)
  return _internal_mutable_commonprefs();
}
inline void BeamPrefs::set_allocated_commonprefs(::simData::CommonPrefs* commonprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete commonprefs_;
  }
  if (commonprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(commonprefs);
    if (message_arena != submessage_arena) {
      commonprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commonprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  commonprefs_ = commonprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.BeamPrefs.commonPrefs)
}

// optional bool shaded = 2 [default = false];
inline bool BeamPrefs::_internal_has_shaded() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BeamPrefs::has_shaded() const {
  return _internal_has_shaded();
}
inline void BeamPrefs::clear_shaded() {
  shaded_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool BeamPrefs::_internal_shaded() const {
  return shaded_;
}
inline bool BeamPrefs::shaded() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.shaded)
  return _internal_shaded();
}
inline void BeamPrefs::_internal_set_shaded(bool value) {
  _has_bits_[0] |= 0x00000020u;
  shaded_ = value;
}
inline void BeamPrefs::set_shaded(bool value) {
  _internal_set_shaded(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.shaded)
}

// optional bool blended = 3 [default = true];
inline bool BeamPrefs::_internal_has_blended() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool BeamPrefs::has_blended() const {
  return _internal_has_blended();
}
inline void BeamPrefs::clear_blended() {
  blended_ = true;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool BeamPrefs::_internal_blended() const {
  return blended_;
}
inline bool BeamPrefs::blended() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.blended)
  return _internal_blended();
}
inline void BeamPrefs::_internal_set_blended(bool value) {
  _has_bits_[0] |= 0x08000000u;
  blended_ = value;
}
inline void BeamPrefs::set_blended(bool value) {
  _internal_set_blended(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.blended)
}

// optional .simData.BeamPrefs.DrawMode beamDrawMode = 4 [default = SOLID];
inline bool BeamPrefs::_internal_has_beamdrawmode() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool BeamPrefs::has_beamdrawmode() const {
  return _internal_has_beamdrawmode();
}
inline void BeamPrefs::clear_beamdrawmode() {
  beamdrawmode_ = 1;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::simData::BeamPrefs_DrawMode BeamPrefs::_internal_beamdrawmode() const {
  return static_cast< ::simData::BeamPrefs_DrawMode >(beamdrawmode_);
}
inline ::simData::BeamPrefs_DrawMode BeamPrefs::beamdrawmode() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.beamDrawMode)
  return _internal_beamdrawmode();
}
inline void BeamPrefs::_internal_set_beamdrawmode(::simData::BeamPrefs_DrawMode value) {
  assert(::simData::BeamPrefs_DrawMode_IsValid(value));
  _has_bits_[0] |= 0x00200000u;
  beamdrawmode_ = value;
}
inline void BeamPrefs::set_beamdrawmode(::simData::BeamPrefs_DrawMode value) {
  _internal_set_beamdrawmode(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.beamDrawMode)
}

// optional double beamScale = 5 [default = 1];
inline bool BeamPrefs::_internal_has_beamscale() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool BeamPrefs::has_beamscale() const {
  return _internal_has_beamscale();
}
inline void BeamPrefs::clear_beamscale() {
  beamscale_ = 1;
  _has_bits_[0] &= ~0x00100000u;
}
inline double BeamPrefs::_internal_beamscale() const {
  return beamscale_;
}
inline double BeamPrefs::beamscale() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.beamScale)
  return _internal_beamscale();
}
inline void BeamPrefs::_internal_set_beamscale(double value) {
  _has_bits_[0] |= 0x00100000u;
  beamscale_ = value;
}
inline void BeamPrefs::set_beamscale(double value) {
  _internal_set_beamscale(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.beamScale)
}

// optional .simData.BeamPrefs.DrawType drawType = 6 [default = BEAM_3DB];
inline bool BeamPrefs::_internal_has_drawtype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BeamPrefs::has_drawtype() const {
  return _internal_has_drawtype();
}
inline void BeamPrefs::clear_drawtype() {
  drawtype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::simData::BeamPrefs_DrawType BeamPrefs::_internal_drawtype() const {
  return static_cast< ::simData::BeamPrefs_DrawType >(drawtype_);
}
inline ::simData::BeamPrefs_DrawType BeamPrefs::drawtype() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.drawType)
  return _internal_drawtype();
}
inline void BeamPrefs::_internal_set_drawtype(::simData::BeamPrefs_DrawType value) {
  assert(::simData::BeamPrefs_DrawType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  drawtype_ = value;
}
inline void BeamPrefs::set_drawtype(::simData::BeamPrefs_DrawType value) {
  _internal_set_drawtype(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.drawType)
}

// optional uint32 capResolution = 7 [default = 5];
inline bool BeamPrefs::_internal_has_capresolution() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool BeamPrefs::has_capresolution() const {
  return _internal_has_capresolution();
}
inline void BeamPrefs::clear_capresolution() {
  capresolution_ = 5u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BeamPrefs::_internal_capresolution() const {
  return capresolution_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BeamPrefs::capresolution() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.capResolution)
  return _internal_capresolution();
}
inline void BeamPrefs::_internal_set_capresolution(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  capresolution_ = value;
}
inline void BeamPrefs::set_capresolution(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_capresolution(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.capResolution)
}

// optional uint32 coneResolution = 8 [default = 30];
inline bool BeamPrefs::_internal_has_coneresolution() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool BeamPrefs::has_coneresolution() const {
  return _internal_has_coneresolution();
}
inline void BeamPrefs::clear_coneresolution() {
  coneresolution_ = 30u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BeamPrefs::_internal_coneresolution() const {
  return coneresolution_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BeamPrefs::coneresolution() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.coneResolution)
  return _internal_coneresolution();
}
inline void BeamPrefs::_internal_set_coneresolution(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  coneresolution_ = value;
}
inline void BeamPrefs::set_coneresolution(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coneresolution(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.coneResolution)
}

// optional bool renderCone = 9 [default = true];
inline bool BeamPrefs::_internal_has_rendercone() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool BeamPrefs::has_rendercone() const {
  return _internal_has_rendercone();
}
inline void BeamPrefs::clear_rendercone() {
  rendercone_ = true;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool BeamPrefs::_internal_rendercone() const {
  return rendercone_;
}
inline bool BeamPrefs::rendercone() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.renderCone)
  return _internal_rendercone();
}
inline void BeamPrefs::_internal_set_rendercone(bool value) {
  _has_bits_[0] |= 0x10000000u;
  rendercone_ = value;
}
inline void BeamPrefs::set_rendercone(bool value) {
  _internal_set_rendercone(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.renderCone)
}

// optional double sensitivity = 10 [default = -50];
inline bool BeamPrefs::_internal_has_sensitivity() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool BeamPrefs::has_sensitivity() const {
  return _internal_has_sensitivity();
}
inline void BeamPrefs::clear_sensitivity() {
  sensitivity_ = -50;
  _has_bits_[0] &= ~0x00800000u;
}
inline double BeamPrefs::_internal_sensitivity() const {
  return sensitivity_;
}
inline double BeamPrefs::sensitivity() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.sensitivity)
  return _internal_sensitivity();
}
inline void BeamPrefs::_internal_set_sensitivity(double value) {
  _has_bits_[0] |= 0x00800000u;
  sensitivity_ = value;
}
inline void BeamPrefs::set_sensitivity(double value) {
  _internal_set_sensitivity(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.sensitivity)
}

// optional double gain = 11 [default = 20];
inline bool BeamPrefs::_internal_has_gain() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool BeamPrefs::has_gain() const {
  return _internal_has_gain();
}
inline void BeamPrefs::clear_gain() {
  gain_ = 20;
  _has_bits_[0] &= ~0x01000000u;
}
inline double BeamPrefs::_internal_gain() const {
  return gain_;
}
inline double BeamPrefs::gain() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.gain)
  return _internal_gain();
}
inline void BeamPrefs::_internal_set_gain(double value) {
  _has_bits_[0] |= 0x01000000u;
  gain_ = value;
}
inline void BeamPrefs::set_gain(double value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.gain)
}

// optional double fieldOfView = 12 [default = 1.5707963267];
inline bool BeamPrefs::_internal_has_fieldofview() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool BeamPrefs::has_fieldofview() const {
  return _internal_has_fieldofview();
}
inline void BeamPrefs::clear_fieldofview() {
  fieldofview_ = 1.5707963267;
  _has_bits_[0] &= ~0x02000000u;
}
inline double BeamPrefs::_internal_fieldofview() const {
  return fieldofview_;
}
inline double BeamPrefs::fieldofview() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.fieldOfView)
  return _internal_fieldofview();
}
inline void BeamPrefs::_internal_set_fieldofview(double value) {
  _has_bits_[0] |= 0x02000000u;
  fieldofview_ = value;
}
inline void BeamPrefs::set_fieldofview(double value) {
  _internal_set_fieldofview(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.fieldOfView)
}

// optional double detail = 13 [default = 1];
inline bool BeamPrefs::_internal_has_detail() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool BeamPrefs::has_detail() const {
  return _internal_has_detail();
}
inline void BeamPrefs::clear_detail() {
  detail_ = 1;
  _has_bits_[0] &= ~0x80000000u;
}
inline double BeamPrefs::_internal_detail() const {
  return detail_;
}
inline double BeamPrefs::detail() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.detail)
  return _internal_detail();
}
inline void BeamPrefs::_internal_set_detail(double value) {
  _has_bits_[0] |= 0x80000000u;
  detail_ = value;
}
inline void BeamPrefs::set_detail(double value) {
  _internal_set_detail(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.detail)
}

// optional double power = 14 [default = 0];
inline bool BeamPrefs::_internal_has_power() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BeamPrefs::has_power() const {
  return _internal_has_power();
}
inline void BeamPrefs::clear_power() {
  power_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double BeamPrefs::_internal_power() const {
  return power_;
}
inline double BeamPrefs::power() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.power)
  return _internal_power();
}
inline void BeamPrefs::_internal_set_power(double value) {
  _has_bits_[0] |= 0x00000200u;
  power_ = value;
}
inline void BeamPrefs::set_power(double value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.power)
}

// optional double frequency = 15 [default = 0];
inline bool BeamPrefs::_internal_has_frequency() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool BeamPrefs::has_frequency() const {
  return _internal_has_frequency();
}
inline void BeamPrefs::clear_frequency() {
  frequency_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double BeamPrefs::_internal_frequency() const {
  return frequency_;
}
inline double BeamPrefs::frequency() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.frequency)
  return _internal_frequency();
}
inline void BeamPrefs::_internal_set_frequency(double value) {
  _has_bits_[0] |= 0x00000400u;
  frequency_ = value;
}
inline void BeamPrefs::set_frequency(double value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.frequency)
}

// optional .simData.Polarity polarity = 16 [default = POL_UNKNOWN];
inline bool BeamPrefs::_internal_has_polarity() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool BeamPrefs::has_polarity() const {
  return _internal_has_polarity();
}
inline void BeamPrefs::clear_polarity() {
  polarity_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::simData::Polarity BeamPrefs::_internal_polarity() const {
  return static_cast< ::simData::Polarity >(polarity_);
}
inline ::simData::Polarity BeamPrefs::polarity() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.polarity)
  return _internal_polarity();
}
inline void BeamPrefs::_internal_set_polarity(::simData::Polarity value) {
  assert(::simData::Polarity_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  polarity_ = value;
}
inline void BeamPrefs::set_polarity(::simData::Polarity value) {
  _internal_set_polarity(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.polarity)
}

// optional bool colorScale = 17 [default = false];
inline bool BeamPrefs::_internal_has_colorscale() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BeamPrefs::has_colorscale() const {
  return _internal_has_colorscale();
}
inline void BeamPrefs::clear_colorscale() {
  colorscale_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool BeamPrefs::_internal_colorscale() const {
  return colorscale_;
}
inline bool BeamPrefs::colorscale() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.colorScale)
  return _internal_colorscale();
}
inline void BeamPrefs::_internal_set_colorscale(bool value) {
  _has_bits_[0] |= 0x00000040u;
  colorscale_ = value;
}
inline void BeamPrefs::set_colorscale(bool value) {
  _internal_set_colorscale(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.colorScale)
}

// optional .simData.BeamPrefs.AntennaPattern antennaPattern = 18;
inline bool BeamPrefs::_internal_has_antennapattern() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || antennapattern_ != nullptr);
  return value;
}
inline bool BeamPrefs::has_antennapattern() const {
  return _internal_has_antennapattern();
}
inline void BeamPrefs::clear_antennapattern() {
  if (antennapattern_ != nullptr) antennapattern_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::simData::BeamPrefs_AntennaPattern& BeamPrefs::_internal_antennapattern() const {
  const ::simData::BeamPrefs_AntennaPattern* p = antennapattern_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::BeamPrefs_AntennaPattern&>(
      ::simData::_BeamPrefs_AntennaPattern_default_instance_);
}
inline const ::simData::BeamPrefs_AntennaPattern& BeamPrefs::antennapattern() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.antennaPattern)
  return _internal_antennapattern();
}
inline void BeamPrefs::unsafe_arena_set_allocated_antennapattern(
    ::simData::BeamPrefs_AntennaPattern* antennapattern) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(antennapattern_);
  }
  antennapattern_ = antennapattern;
  if (antennapattern) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.BeamPrefs.antennaPattern)
}
inline ::simData::BeamPrefs_AntennaPattern* BeamPrefs::release_antennapattern() {
  _has_bits_[0] &= ~0x00000004u;
  ::simData::BeamPrefs_AntennaPattern* temp = antennapattern_;
  antennapattern_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::BeamPrefs_AntennaPattern* BeamPrefs::unsafe_arena_release_antennapattern() {
  // @@protoc_insertion_point(field_release:simData.BeamPrefs.antennaPattern)
  _has_bits_[0] &= ~0x00000004u;
  ::simData::BeamPrefs_AntennaPattern* temp = antennapattern_;
  antennapattern_ = nullptr;
  return temp;
}
inline ::simData::BeamPrefs_AntennaPattern* BeamPrefs::_internal_mutable_antennapattern() {
  _has_bits_[0] |= 0x00000004u;
  if (antennapattern_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::BeamPrefs_AntennaPattern>(GetArena());
    antennapattern_ = p;
  }
  return antennapattern_;
}
inline ::simData::BeamPrefs_AntennaPattern* BeamPrefs::mutable_antennapattern() {
  // @@protoc_insertion_point(field_mutable:simData.BeamPrefs.antennaPattern)
  return _internal_mutable_antennapattern();
}
inline void BeamPrefs::set_allocated_antennapattern(::simData::BeamPrefs_AntennaPattern* antennapattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete antennapattern_;
  }
  if (antennapattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(antennapattern);
    if (message_arena != submessage_arena) {
      antennapattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, antennapattern, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  antennapattern_ = antennapattern;
  // @@protoc_insertion_point(field_set_allocated:simData.BeamPrefs.antennaPattern)
}

// optional string arepsFile = 19 [default = ""];
inline bool BeamPrefs::_internal_has_arepsfile() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BeamPrefs::has_arepsfile() const {
  return _internal_has_arepsfile();
}
inline void BeamPrefs::clear_arepsfile() {
  arepsfile_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BeamPrefs::arepsfile() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.arepsFile)
  return _internal_arepsfile();
}
inline void BeamPrefs::set_arepsfile(const std::string& value) {
  _internal_set_arepsfile(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.arepsFile)
}
inline std::string* BeamPrefs::mutable_arepsfile() {
  // @@protoc_insertion_point(field_mutable:simData.BeamPrefs.arepsFile)
  return _internal_mutable_arepsfile();
}
inline const std::string& BeamPrefs::_internal_arepsfile() const {
  return arepsfile_.Get();
}
inline void BeamPrefs::_internal_set_arepsfile(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  arepsfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BeamPrefs::set_arepsfile(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  arepsfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.BeamPrefs.arepsFile)
}
inline void BeamPrefs::set_arepsfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  arepsfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.BeamPrefs.arepsFile)
}
inline void BeamPrefs::set_arepsfile(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  arepsfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.BeamPrefs.arepsFile)
}
inline std::string* BeamPrefs::_internal_mutable_arepsfile() {
  _has_bits_[0] |= 0x00000001u;
  return arepsfile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BeamPrefs::release_arepsfile() {
  // @@protoc_insertion_point(field_release:simData.BeamPrefs.arepsFile)
  if (!_internal_has_arepsfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return arepsfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BeamPrefs::set_allocated_arepsfile(std::string* arepsfile) {
  if (arepsfile != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  arepsfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arepsfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.BeamPrefs.arepsFile)
}

// optional bool channel = 20 [default = false];
inline bool BeamPrefs::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BeamPrefs::has_channel() const {
  return _internal_has_channel();
}
inline void BeamPrefs::clear_channel() {
  channel_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool BeamPrefs::_internal_channel() const {
  return channel_;
}
inline bool BeamPrefs::channel() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.channel)
  return _internal_channel();
}
inline void BeamPrefs::_internal_set_channel(bool value) {
  _has_bits_[0] |= 0x00000080u;
  channel_ = value;
}
inline void BeamPrefs::set_channel(bool value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.channel)
}

// optional bool weighting = 21 [default = true];
inline bool BeamPrefs::_internal_has_weighting() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool BeamPrefs::has_weighting() const {
  return _internal_has_weighting();
}
inline void BeamPrefs::clear_weighting() {
  weighting_ = true;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool BeamPrefs::_internal_weighting() const {
  return weighting_;
}
inline bool BeamPrefs::weighting() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.weighting)
  return _internal_weighting();
}
inline void BeamPrefs::_internal_set_weighting(bool value) {
  _has_bits_[0] |= 0x20000000u;
  weighting_ = value;
}
inline void BeamPrefs::set_weighting(bool value) {
  _internal_set_weighting(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.weighting)
}

// optional bool interpolateBeamPos = 22 [default = true];
inline bool BeamPrefs::_internal_has_interpolatebeampos() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool BeamPrefs::has_interpolatebeampos() const {
  return _internal_has_interpolatebeampos();
}
inline void BeamPrefs::clear_interpolatebeampos() {
  interpolatebeampos_ = true;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool BeamPrefs::_internal_interpolatebeampos() const {
  return interpolatebeampos_;
}
inline bool BeamPrefs::interpolatebeampos() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.interpolateBeamPos)
  return _internal_interpolatebeampos();
}
inline void BeamPrefs::_internal_set_interpolatebeampos(bool value) {
  _has_bits_[0] |= 0x40000000u;
  interpolatebeampos_ = value;
}
inline void BeamPrefs::set_interpolatebeampos(bool value) {
  _internal_set_interpolatebeampos(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.interpolateBeamPos)
}

// optional bool useOffsetPlatform = 23 [default = true];
inline bool BeamPrefs::_internal_has_useoffsetplatform() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool BeamPrefs::has_useoffsetplatform() const {
  return _internal_has_useoffsetplatform();
}
inline void BeamPrefs::clear_useoffsetplatform() {
  useoffsetplatform_ = true;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool BeamPrefs::_internal_useoffsetplatform() const {
  return useoffsetplatform_;
}
inline bool BeamPrefs::useoffsetplatform() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.useOffsetPlatform)
  return _internal_useoffsetplatform();
}
inline void BeamPrefs::_internal_set_useoffsetplatform(bool value) {
  _has_bits_[1] |= 0x00000001u;
  useoffsetplatform_ = value;
}
inline void BeamPrefs::set_useoffsetplatform(bool value) {
  _internal_set_useoffsetplatform(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.useOffsetPlatform)
}

// optional bool useOffsetIcon = 24 [default = false];
inline bool BeamPrefs::_internal_has_useoffseticon() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BeamPrefs::has_useoffseticon() const {
  return _internal_has_useoffseticon();
}
inline void BeamPrefs::clear_useoffseticon() {
  useoffseticon_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool BeamPrefs::_internal_useoffseticon() const {
  return useoffseticon_;
}
inline bool BeamPrefs::useoffseticon() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.useOffsetIcon)
  return _internal_useoffseticon();
}
inline void BeamPrefs::_internal_set_useoffseticon(bool value) {
  _has_bits_[0] |= 0x00000100u;
  useoffseticon_ = value;
}
inline void BeamPrefs::set_useoffseticon(bool value) {
  _internal_set_useoffseticon(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.useOffsetIcon)
}

// optional bool useOffsetBeam = 25 [default = false];
inline bool BeamPrefs::_internal_has_useoffsetbeam() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool BeamPrefs::has_useoffsetbeam() const {
  return _internal_has_useoffsetbeam();
}
inline void BeamPrefs::clear_useoffsetbeam() {
  useoffsetbeam_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool BeamPrefs::_internal_useoffsetbeam() const {
  return useoffsetbeam_;
}
inline bool BeamPrefs::useoffsetbeam() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.useOffsetBeam)
  return _internal_useoffsetbeam();
}
inline void BeamPrefs::_internal_set_useoffsetbeam(bool value) {
  _has_bits_[0] |= 0x00001000u;
  useoffsetbeam_ = value;
}
inline void BeamPrefs::set_useoffsetbeam(bool value) {
  _internal_set_useoffsetbeam(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.useOffsetBeam)
}

// optional double azimuthOffset = 26 [default = 0];
inline bool BeamPrefs::_internal_has_azimuthoffset() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool BeamPrefs::has_azimuthoffset() const {
  return _internal_has_azimuthoffset();
}
inline void BeamPrefs::clear_azimuthoffset() {
  azimuthoffset_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double BeamPrefs::_internal_azimuthoffset() const {
  return azimuthoffset_;
}
inline double BeamPrefs::azimuthoffset() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.azimuthOffset)
  return _internal_azimuthoffset();
}
inline void BeamPrefs::_internal_set_azimuthoffset(double value) {
  _has_bits_[0] |= 0x00004000u;
  azimuthoffset_ = value;
}
inline void BeamPrefs::set_azimuthoffset(double value) {
  _internal_set_azimuthoffset(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.azimuthOffset)
}

// optional double elevationOffset = 27 [default = 0];
inline bool BeamPrefs::_internal_has_elevationoffset() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool BeamPrefs::has_elevationoffset() const {
  return _internal_has_elevationoffset();
}
inline void BeamPrefs::clear_elevationoffset() {
  elevationoffset_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double BeamPrefs::_internal_elevationoffset() const {
  return elevationoffset_;
}
inline double BeamPrefs::elevationoffset() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.elevationOffset)
  return _internal_elevationoffset();
}
inline void BeamPrefs::_internal_set_elevationoffset(double value) {
  _has_bits_[0] |= 0x00008000u;
  elevationoffset_ = value;
}
inline void BeamPrefs::set_elevationoffset(double value) {
  _internal_set_elevationoffset(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.elevationOffset)
}

// optional double rollOffset = 28 [default = 0];
inline bool BeamPrefs::_internal_has_rolloffset() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool BeamPrefs::has_rolloffset() const {
  return _internal_has_rolloffset();
}
inline void BeamPrefs::clear_rolloffset() {
  rolloffset_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double BeamPrefs::_internal_rolloffset() const {
  return rolloffset_;
}
inline double BeamPrefs::rolloffset() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.rollOffset)
  return _internal_rolloffset();
}
inline void BeamPrefs::_internal_set_rolloffset(double value) {
  _has_bits_[0] |= 0x00010000u;
  rolloffset_ = value;
}
inline void BeamPrefs::set_rolloffset(double value) {
  _internal_set_rolloffset(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.rollOffset)
}

// optional .simData.Position beamPositionOffset = 29;
inline bool BeamPrefs::_internal_has_beampositionoffset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || beampositionoffset_ != nullptr);
  return value;
}
inline bool BeamPrefs::has_beampositionoffset() const {
  return _internal_has_beampositionoffset();
}
inline void BeamPrefs::clear_beampositionoffset() {
  if (beampositionoffset_ != nullptr) beampositionoffset_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::simData::Position& BeamPrefs::_internal_beampositionoffset() const {
  const ::simData::Position* p = beampositionoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::Position&>(
      ::simData::_Position_default_instance_);
}
inline const ::simData::Position& BeamPrefs::beampositionoffset() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.beamPositionOffset)
  return _internal_beampositionoffset();
}
inline void BeamPrefs::unsafe_arena_set_allocated_beampositionoffset(
    ::simData::Position* beampositionoffset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(beampositionoffset_);
  }
  beampositionoffset_ = beampositionoffset;
  if (beampositionoffset) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.BeamPrefs.beamPositionOffset)
}
inline ::simData::Position* BeamPrefs::release_beampositionoffset() {
  _has_bits_[0] &= ~0x00000008u;
  ::simData::Position* temp = beampositionoffset_;
  beampositionoffset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::Position* BeamPrefs::unsafe_arena_release_beampositionoffset() {
  // @@protoc_insertion_point(field_release:simData.BeamPrefs.beamPositionOffset)
  _has_bits_[0] &= ~0x00000008u;
  ::simData::Position* temp = beampositionoffset_;
  beampositionoffset_ = nullptr;
  return temp;
}
inline ::simData::Position* BeamPrefs::_internal_mutable_beampositionoffset() {
  _has_bits_[0] |= 0x00000008u;
  if (beampositionoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::Position>(GetArena());
    beampositionoffset_ = p;
  }
  return beampositionoffset_;
}
inline ::simData::Position* BeamPrefs::mutable_beampositionoffset() {
  // @@protoc_insertion_point(field_mutable:simData.BeamPrefs.beamPositionOffset)
  return _internal_mutable_beampositionoffset();
}
inline void BeamPrefs::set_allocated_beampositionoffset(::simData::Position* beampositionoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete beampositionoffset_;
  }
  if (beampositionoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(beampositionoffset);
    if (message_arena != submessage_arena) {
      beampositionoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, beampositionoffset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  beampositionoffset_ = beampositionoffset;
  // @@protoc_insertion_point(field_set_allocated:simData.BeamPrefs.beamPositionOffset)
}

// optional uint64 targetId = 30 [default = 0];
inline bool BeamPrefs::_internal_has_targetid() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool BeamPrefs::has_targetid() const {
  return _internal_has_targetid();
}
inline void BeamPrefs::clear_targetid() {
  targetid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BeamPrefs::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BeamPrefs::targetid() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.targetId)
  return _internal_targetid();
}
inline void BeamPrefs::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00020000u;
  targetid_ = value;
}
inline void BeamPrefs::set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.targetId)
}

// optional double verticalWidth = 31 [default = 0];
inline bool BeamPrefs::_internal_has_verticalwidth() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool BeamPrefs::has_verticalwidth() const {
  return _internal_has_verticalwidth();
}
inline void BeamPrefs::clear_verticalwidth() {
  verticalwidth_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double BeamPrefs::_internal_verticalwidth() const {
  return verticalwidth_;
}
inline double BeamPrefs::verticalwidth() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.verticalWidth)
  return _internal_verticalwidth();
}
inline void BeamPrefs::_internal_set_verticalwidth(double value) {
  _has_bits_[0] |= 0x00040000u;
  verticalwidth_ = value;
}
inline void BeamPrefs::set_verticalwidth(double value) {
  _internal_set_verticalwidth(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.verticalWidth)
}

// optional double horizontalWidth = 32 [default = 0];
inline bool BeamPrefs::_internal_has_horizontalwidth() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool BeamPrefs::has_horizontalwidth() const {
  return _internal_has_horizontalwidth();
}
inline void BeamPrefs::clear_horizontalwidth() {
  horizontalwidth_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double BeamPrefs::_internal_horizontalwidth() const {
  return horizontalwidth_;
}
inline double BeamPrefs::horizontalwidth() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.horizontalWidth)
  return _internal_horizontalwidth();
}
inline void BeamPrefs::_internal_set_horizontalwidth(double value) {
  _has_bits_[0] |= 0x00080000u;
  horizontalwidth_ = value;
}
inline void BeamPrefs::set_horizontalwidth(double value) {
  _internal_set_horizontalwidth(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.horizontalWidth)
}

// optional bool animate = 33 [default = false];
inline bool BeamPrefs::_internal_has_animate() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool BeamPrefs::has_animate() const {
  return _internal_has_animate();
}
inline void BeamPrefs::clear_animate() {
  animate_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool BeamPrefs::_internal_animate() const {
  return animate_;
}
inline bool BeamPrefs::animate() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.animate)
  return _internal_animate();
}
inline void BeamPrefs::_internal_set_animate(bool value) {
  _has_bits_[0] |= 0x00002000u;
  animate_ = value;
}
inline void BeamPrefs::set_animate(bool value) {
  _internal_set_animate(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.animate)
}

// optional double pulseLength = 34 [default = 100];
inline bool BeamPrefs::_internal_has_pulselength() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool BeamPrefs::has_pulselength() const {
  return _internal_has_pulselength();
}
inline void BeamPrefs::clear_pulselength() {
  pulselength_ = 100;
  _has_bits_[1] &= ~0x00000004u;
}
inline double BeamPrefs::_internal_pulselength() const {
  return pulselength_;
}
inline double BeamPrefs::pulselength() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.pulseLength)
  return _internal_pulselength();
}
inline void BeamPrefs::_internal_set_pulselength(double value) {
  _has_bits_[1] |= 0x00000004u;
  pulselength_ = value;
}
inline void BeamPrefs::set_pulselength(double value) {
  _internal_set_pulselength(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.pulseLength)
}

// optional double pulseRate = 35 [default = 1];
inline bool BeamPrefs::_internal_has_pulserate() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool BeamPrefs::has_pulserate() const {
  return _internal_has_pulserate();
}
inline void BeamPrefs::clear_pulserate() {
  pulserate_ = 1;
  _has_bits_[1] &= ~0x00000008u;
}
inline double BeamPrefs::_internal_pulserate() const {
  return pulserate_;
}
inline double BeamPrefs::pulserate() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.pulseRate)
  return _internal_pulserate();
}
inline void BeamPrefs::_internal_set_pulserate(double value) {
  _has_bits_[1] |= 0x00000008u;
  pulserate_ = value;
}
inline void BeamPrefs::set_pulserate(double value) {
  _internal_set_pulserate(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.pulseRate)
}

// optional uint32 pulseStipple = 36 [default = 3855];
inline bool BeamPrefs::_internal_has_pulsestipple() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool BeamPrefs::has_pulsestipple() const {
  return _internal_has_pulsestipple();
}
inline void BeamPrefs::clear_pulsestipple() {
  pulsestipple_ = 3855u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BeamPrefs::_internal_pulsestipple() const {
  return pulsestipple_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BeamPrefs::pulsestipple() const {
  // @@protoc_insertion_point(field_get:simData.BeamPrefs.pulseStipple)
  return _internal_pulsestipple();
}
inline void BeamPrefs::_internal_set_pulsestipple(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  pulsestipple_ = value;
}
inline void BeamPrefs::set_pulsestipple(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pulsestipple(value);
  // @@protoc_insertion_point(field_set:simData.BeamPrefs.pulseStipple)
}

// -------------------------------------------------------------------

// BeamUpdate

// optional double time = 1;
inline bool BeamUpdate::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BeamUpdate::has_time() const {
  return _internal_has_time();
}
inline void BeamUpdate::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double BeamUpdate::_internal_time() const {
  return time_;
}
inline double BeamUpdate::time() const {
  // @@protoc_insertion_point(field_get:simData.BeamUpdate.time)
  return _internal_time();
}
inline void BeamUpdate::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void BeamUpdate::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.BeamUpdate.time)
}

// optional double range = 2;
inline bool BeamUpdate::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BeamUpdate::has_range() const {
  return _internal_has_range();
}
inline void BeamUpdate::clear_range() {
  range_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double BeamUpdate::_internal_range() const {
  return range_;
}
inline double BeamUpdate::range() const {
  // @@protoc_insertion_point(field_get:simData.BeamUpdate.range)
  return _internal_range();
}
inline void BeamUpdate::_internal_set_range(double value) {
  _has_bits_[0] |= 0x00000002u;
  range_ = value;
}
inline void BeamUpdate::set_range(double value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:simData.BeamUpdate.range)
}

// optional double azimuth = 3;
inline bool BeamUpdate::_internal_has_azimuth() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BeamUpdate::has_azimuth() const {
  return _internal_has_azimuth();
}
inline void BeamUpdate::clear_azimuth() {
  azimuth_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double BeamUpdate::_internal_azimuth() const {
  return azimuth_;
}
inline double BeamUpdate::azimuth() const {
  // @@protoc_insertion_point(field_get:simData.BeamUpdate.azimuth)
  return _internal_azimuth();
}
inline void BeamUpdate::_internal_set_azimuth(double value) {
  _has_bits_[0] |= 0x00000004u;
  azimuth_ = value;
}
inline void BeamUpdate::set_azimuth(double value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:simData.BeamUpdate.azimuth)
}

// optional double elevation = 4;
inline bool BeamUpdate::_internal_has_elevation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BeamUpdate::has_elevation() const {
  return _internal_has_elevation();
}
inline void BeamUpdate::clear_elevation() {
  elevation_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double BeamUpdate::_internal_elevation() const {
  return elevation_;
}
inline double BeamUpdate::elevation() const {
  // @@protoc_insertion_point(field_get:simData.BeamUpdate.elevation)
  return _internal_elevation();
}
inline void BeamUpdate::_internal_set_elevation(double value) {
  _has_bits_[0] |= 0x00000008u;
  elevation_ = value;
}
inline void BeamUpdate::set_elevation(double value) {
  _internal_set_elevation(value);
  // @@protoc_insertion_point(field_set:simData.BeamUpdate.elevation)
}

// -------------------------------------------------------------------

// BeamCommand

// optional double time = 1;
inline bool BeamCommand::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BeamCommand::has_time() const {
  return _internal_has_time();
}
inline void BeamCommand::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double BeamCommand::_internal_time() const {
  return time_;
}
inline double BeamCommand::time() const {
  // @@protoc_insertion_point(field_get:simData.BeamCommand.time)
  return _internal_time();
}
inline void BeamCommand::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void BeamCommand::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.BeamCommand.time)
}

// optional .simData.BeamPrefs updatePrefs = 2;
inline bool BeamCommand::_internal_has_updateprefs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || updateprefs_ != nullptr);
  return value;
}
inline bool BeamCommand::has_updateprefs() const {
  return _internal_has_updateprefs();
}
inline void BeamCommand::clear_updateprefs() {
  if (updateprefs_ != nullptr) updateprefs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::simData::BeamPrefs& BeamCommand::_internal_updateprefs() const {
  const ::simData::BeamPrefs* p = updateprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::BeamPrefs&>(
      ::simData::_BeamPrefs_default_instance_);
}
inline const ::simData::BeamPrefs& BeamCommand::updateprefs() const {
  // @@protoc_insertion_point(field_get:simData.BeamCommand.updatePrefs)
  return _internal_updateprefs();
}
inline void BeamCommand::unsafe_arena_set_allocated_updateprefs(
    ::simData::BeamPrefs* updateprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updateprefs_);
  }
  updateprefs_ = updateprefs;
  if (updateprefs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.BeamCommand.updatePrefs)
}
inline ::simData::BeamPrefs* BeamCommand::release_updateprefs() {
  _has_bits_[0] &= ~0x00000001u;
  ::simData::BeamPrefs* temp = updateprefs_;
  updateprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::BeamPrefs* BeamCommand::unsafe_arena_release_updateprefs() {
  // @@protoc_insertion_point(field_release:simData.BeamCommand.updatePrefs)
  _has_bits_[0] &= ~0x00000001u;
  ::simData::BeamPrefs* temp = updateprefs_;
  updateprefs_ = nullptr;
  return temp;
}
inline ::simData::BeamPrefs* BeamCommand::_internal_mutable_updateprefs() {
  _has_bits_[0] |= 0x00000001u;
  if (updateprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::BeamPrefs>(GetArena());
    updateprefs_ = p;
  }
  return updateprefs_;
}
inline ::simData::BeamPrefs* BeamCommand::mutable_updateprefs() {
  // @@protoc_insertion_point(field_mutable:simData.BeamCommand.updatePrefs)
  return _internal_mutable_updateprefs();
}
inline void BeamCommand::set_allocated_updateprefs(::simData::BeamPrefs* updateprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updateprefs_;
  }
  if (updateprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updateprefs);
    if (message_arena != submessage_arena) {
      updateprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  updateprefs_ = updateprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.BeamCommand.updatePrefs)
}

// optional bool isClearCommand = 3 [default = false];
inline bool BeamCommand::_internal_has_isclearcommand() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BeamCommand::has_isclearcommand() const {
  return _internal_has_isclearcommand();
}
inline void BeamCommand::clear_isclearcommand() {
  isclearcommand_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool BeamCommand::_internal_isclearcommand() const {
  return isclearcommand_;
}
inline bool BeamCommand::isclearcommand() const {
  // @@protoc_insertion_point(field_get:simData.BeamCommand.isClearCommand)
  return _internal_isclearcommand();
}
inline void BeamCommand::_internal_set_isclearcommand(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isclearcommand_ = value;
}
inline void BeamCommand::set_isclearcommand(bool value) {
  _internal_set_isclearcommand(value);
  // @@protoc_insertion_point(field_set:simData.BeamCommand.isClearCommand)
}

// -------------------------------------------------------------------

// GateProperties

// optional uint64 id = 1;
inline bool GateProperties::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GateProperties::has_id() const {
  return _internal_has_id();
}
inline void GateProperties::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GateProperties::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GateProperties::id() const {
  // @@protoc_insertion_point(field_get:simData.GateProperties.id)
  return _internal_id();
}
inline void GateProperties::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void GateProperties::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:simData.GateProperties.id)
}

// optional uint64 hostId = 2;
inline bool GateProperties::_internal_has_hostid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GateProperties::has_hostid() const {
  return _internal_has_hostid();
}
inline void GateProperties::clear_hostid() {
  hostid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GateProperties::_internal_hostid() const {
  return hostid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GateProperties::hostid() const {
  // @@protoc_insertion_point(field_get:simData.GateProperties.hostId)
  return _internal_hostid();
}
inline void GateProperties::_internal_set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  hostid_ = value;
}
inline void GateProperties::set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hostid(value);
  // @@protoc_insertion_point(field_set:simData.GateProperties.hostId)
}

// optional uint64 originalId = 4;
inline bool GateProperties::_internal_has_originalid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GateProperties::has_originalid() const {
  return _internal_has_originalid();
}
inline void GateProperties::clear_originalid() {
  originalid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GateProperties::_internal_originalid() const {
  return originalid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GateProperties::originalid() const {
  // @@protoc_insertion_point(field_get:simData.GateProperties.originalId)
  return _internal_originalid();
}
inline void GateProperties::_internal_set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  originalid_ = value;
}
inline void GateProperties::set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_originalid(value);
  // @@protoc_insertion_point(field_set:simData.GateProperties.originalId)
}

// optional string source = 5;
inline bool GateProperties::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GateProperties::has_source() const {
  return _internal_has_source();
}
inline void GateProperties::clear_source() {
  source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GateProperties::source() const {
  // @@protoc_insertion_point(field_get:simData.GateProperties.source)
  return _internal_source();
}
inline void GateProperties::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:simData.GateProperties.source)
}
inline std::string* GateProperties::mutable_source() {
  // @@protoc_insertion_point(field_mutable:simData.GateProperties.source)
  return _internal_mutable_source();
}
inline const std::string& GateProperties::_internal_source() const {
  return source_.Get();
}
inline void GateProperties::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GateProperties::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.GateProperties.source)
}
inline void GateProperties::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.GateProperties.source)
}
inline void GateProperties::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.GateProperties.source)
}
inline std::string* GateProperties::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GateProperties::release_source() {
  // @@protoc_insertion_point(field_release:simData.GateProperties.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GateProperties::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.GateProperties.source)
}

// optional .simData.GateProperties.GateType type = 6;
inline bool GateProperties::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GateProperties::has_type() const {
  return _internal_has_type();
}
inline void GateProperties::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::simData::GateProperties_GateType GateProperties::_internal_type() const {
  return static_cast< ::simData::GateProperties_GateType >(type_);
}
inline ::simData::GateProperties_GateType GateProperties::type() const {
  // @@protoc_insertion_point(field_get:simData.GateProperties.type)
  return _internal_type();
}
inline void GateProperties::_internal_set_type(::simData::GateProperties_GateType value) {
  assert(::simData::GateProperties_GateType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void GateProperties::set_type(::simData::GateProperties_GateType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:simData.GateProperties.type)
}

// -------------------------------------------------------------------

// GatePrefs

// optional .simData.CommonPrefs commonPrefs = 1;
inline bool GatePrefs::_internal_has_commonprefs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || commonprefs_ != nullptr);
  return value;
}
inline bool GatePrefs::has_commonprefs() const {
  return _internal_has_commonprefs();
}
inline void GatePrefs::clear_commonprefs() {
  if (commonprefs_ != nullptr) commonprefs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::simData::CommonPrefs& GatePrefs::_internal_commonprefs() const {
  const ::simData::CommonPrefs* p = commonprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::CommonPrefs&>(
      ::simData::_CommonPrefs_default_instance_);
}
inline const ::simData::CommonPrefs& GatePrefs::commonprefs() const {
  // @@protoc_insertion_point(field_get:simData.GatePrefs.commonPrefs)
  return _internal_commonprefs();
}
inline void GatePrefs::unsafe_arena_set_allocated_commonprefs(
    ::simData::CommonPrefs* commonprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commonprefs_);
  }
  commonprefs_ = commonprefs;
  if (commonprefs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.GatePrefs.commonPrefs)
}
inline ::simData::CommonPrefs* GatePrefs::release_commonprefs() {
  _has_bits_[0] &= ~0x00000001u;
  ::simData::CommonPrefs* temp = commonprefs_;
  commonprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::CommonPrefs* GatePrefs::unsafe_arena_release_commonprefs() {
  // @@protoc_insertion_point(field_release:simData.GatePrefs.commonPrefs)
  _has_bits_[0] &= ~0x00000001u;
  ::simData::CommonPrefs* temp = commonprefs_;
  commonprefs_ = nullptr;
  return temp;
}
inline ::simData::CommonPrefs* GatePrefs::_internal_mutable_commonprefs() {
  _has_bits_[0] |= 0x00000001u;
  if (commonprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::CommonPrefs>(GetArena());
    commonprefs_ = p;
  }
  return commonprefs_;
}
inline ::simData::CommonPrefs* GatePrefs::mutable_commonprefs() {
  // @@protoc_insertion_point(field_mutable:simData.GatePrefs.commonPrefs)
  return _internal_mutable_commonprefs();
}
inline void GatePrefs::set_allocated_commonprefs(::simData::CommonPrefs* commonprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete commonprefs_;
  }
  if (commonprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(commonprefs);
    if (message_arena != submessage_arena) {
      commonprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commonprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  commonprefs_ = commonprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.GatePrefs.commonPrefs)
}

// optional bool gateLighting = 2 [default = false];
inline bool GatePrefs::_internal_has_gatelighting() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GatePrefs::has_gatelighting() const {
  return _internal_has_gatelighting();
}
inline void GatePrefs::clear_gatelighting() {
  gatelighting_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GatePrefs::_internal_gatelighting() const {
  return gatelighting_;
}
inline bool GatePrefs::gatelighting() const {
  // @@protoc_insertion_point(field_get:simData.GatePrefs.gateLighting)
  return _internal_gatelighting();
}
inline void GatePrefs::_internal_set_gatelighting(bool value) {
  _has_bits_[0] |= 0x00000002u;
  gatelighting_ = value;
}
inline void GatePrefs::set_gatelighting(bool value) {
  _internal_set_gatelighting(value);
  // @@protoc_insertion_point(field_set:simData.GatePrefs.gateLighting)
}

// optional bool gateBlending = 3 [default = true];
inline bool GatePrefs::_internal_has_gateblending() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GatePrefs::has_gateblending() const {
  return _internal_has_gateblending();
}
inline void GatePrefs::clear_gateblending() {
  gateblending_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool GatePrefs::_internal_gateblending() const {
  return gateblending_;
}
inline bool GatePrefs::gateblending() const {
  // @@protoc_insertion_point(field_get:simData.GatePrefs.gateBlending)
  return _internal_gateblending();
}
inline void GatePrefs::_internal_set_gateblending(bool value) {
  _has_bits_[0] |= 0x00000080u;
  gateblending_ = value;
}
inline void GatePrefs::set_gateblending(bool value) {
  _internal_set_gateblending(value);
  // @@protoc_insertion_point(field_set:simData.GatePrefs.gateBlending)
}

// optional .simData.GatePrefs.DrawMode gateDrawMode = 4 [default = UNKNOWN];
inline bool GatePrefs::_internal_has_gatedrawmode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GatePrefs::has_gatedrawmode() const {
  return _internal_has_gatedrawmode();
}
inline void GatePrefs::clear_gatedrawmode() {
  gatedrawmode_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::simData::GatePrefs_DrawMode GatePrefs::_internal_gatedrawmode() const {
  return static_cast< ::simData::GatePrefs_DrawMode >(gatedrawmode_);
}
inline ::simData::GatePrefs_DrawMode GatePrefs::gatedrawmode() const {
  // @@protoc_insertion_point(field_get:simData.GatePrefs.gateDrawMode)
  return _internal_gatedrawmode();
}
inline void GatePrefs::_internal_set_gatedrawmode(::simData::GatePrefs_DrawMode value) {
  assert(::simData::GatePrefs_DrawMode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  gatedrawmode_ = value;
}
inline void GatePrefs::set_gatedrawmode(::simData::GatePrefs_DrawMode value) {
  _internal_set_gatedrawmode(value);
  // @@protoc_insertion_point(field_set:simData.GatePrefs.gateDrawMode)
}

// optional .simData.GatePrefs.FillPattern fillPattern = 5 [default = STIPPLE];
inline bool GatePrefs::_internal_has_fillpattern() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GatePrefs::has_fillpattern() const {
  return _internal_has_fillpattern();
}
inline void GatePrefs::clear_fillpattern() {
  fillpattern_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::simData::GatePrefs_FillPattern GatePrefs::_internal_fillpattern() const {
  return static_cast< ::simData::GatePrefs_FillPattern >(fillpattern_);
}
inline ::simData::GatePrefs_FillPattern GatePrefs::fillpattern() const {
  // @@protoc_insertion_point(field_get:simData.GatePrefs.fillPattern)
  return _internal_fillpattern();
}
inline void GatePrefs::_internal_set_fillpattern(::simData::GatePrefs_FillPattern value) {
  assert(::simData::GatePrefs_FillPattern_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  fillpattern_ = value;
}
inline void GatePrefs::set_fillpattern(::simData::GatePrefs_FillPattern value) {
  _internal_set_fillpattern(value);
  // @@protoc_insertion_point(field_set:simData.GatePrefs.fillPattern)
}

// optional bool drawCentroid = 6 [default = true];
inline bool GatePrefs::_internal_has_drawcentroid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GatePrefs::has_drawcentroid() const {
  return _internal_has_drawcentroid();
}
inline void GatePrefs::clear_drawcentroid() {
  drawcentroid_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool GatePrefs::_internal_drawcentroid() const {
  return drawcentroid_;
}
inline bool GatePrefs::drawcentroid() const {
  // @@protoc_insertion_point(field_get:simData.GatePrefs.drawCentroid)
  return _internal_drawcentroid();
}
inline void GatePrefs::_internal_set_drawcentroid(bool value) {
  _has_bits_[0] |= 0x00000100u;
  drawcentroid_ = value;
}
inline void GatePrefs::set_drawcentroid(bool value) {
  _internal_set_drawcentroid(value);
  // @@protoc_insertion_point(field_set:simData.GatePrefs.drawCentroid)
}

// optional bool interpolateGatePos = 7 [default = true];
inline bool GatePrefs::_internal_has_interpolategatepos() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GatePrefs::has_interpolategatepos() const {
  return _internal_has_interpolategatepos();
}
inline void GatePrefs::clear_interpolategatepos() {
  interpolategatepos_ = true;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool GatePrefs::_internal_interpolategatepos() const {
  return interpolategatepos_;
}
inline bool GatePrefs::interpolategatepos() const {
  // @@protoc_insertion_point(field_get:simData.GatePrefs.interpolateGatePos)
  return _internal_interpolategatepos();
}
inline void GatePrefs::_internal_set_interpolategatepos(bool value) {
  _has_bits_[0] |= 0x00000200u;
  interpolategatepos_ = value;
}
inline void GatePrefs::set_interpolategatepos(bool value) {
  _internal_set_interpolategatepos(value);
  // @@protoc_insertion_point(field_set:simData.GatePrefs.interpolateGatePos)
}

// optional double gateAzimuthOffset = 8 [default = 0];
inline bool GatePrefs::_internal_has_gateazimuthoffset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GatePrefs::has_gateazimuthoffset() const {
  return _internal_has_gateazimuthoffset();
}
inline void GatePrefs::clear_gateazimuthoffset() {
  gateazimuthoffset_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double GatePrefs::_internal_gateazimuthoffset() const {
  return gateazimuthoffset_;
}
inline double GatePrefs::gateazimuthoffset() const {
  // @@protoc_insertion_point(field_get:simData.GatePrefs.gateAzimuthOffset)
  return _internal_gateazimuthoffset();
}
inline void GatePrefs::_internal_set_gateazimuthoffset(double value) {
  _has_bits_[0] |= 0x00000008u;
  gateazimuthoffset_ = value;
}
inline void GatePrefs::set_gateazimuthoffset(double value) {
  _internal_set_gateazimuthoffset(value);
  // @@protoc_insertion_point(field_set:simData.GatePrefs.gateAzimuthOffset)
}

// optional double gateElevationOffset = 9 [default = 0];
inline bool GatePrefs::_internal_has_gateelevationoffset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GatePrefs::has_gateelevationoffset() const {
  return _internal_has_gateelevationoffset();
}
inline void GatePrefs::clear_gateelevationoffset() {
  gateelevationoffset_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double GatePrefs::_internal_gateelevationoffset() const {
  return gateelevationoffset_;
}
inline double GatePrefs::gateelevationoffset() const {
  // @@protoc_insertion_point(field_get:simData.GatePrefs.gateElevationOffset)
  return _internal_gateelevationoffset();
}
inline void GatePrefs::_internal_set_gateelevationoffset(double value) {
  _has_bits_[0] |= 0x00000010u;
  gateelevationoffset_ = value;
}
inline void GatePrefs::set_gateelevationoffset(double value) {
  _internal_set_gateelevationoffset(value);
  // @@protoc_insertion_point(field_set:simData.GatePrefs.gateElevationOffset)
}

// optional double gateRollOffset = 10 [default = 0];
inline bool GatePrefs::_internal_has_gaterolloffset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GatePrefs::has_gaterolloffset() const {
  return _internal_has_gaterolloffset();
}
inline void GatePrefs::clear_gaterolloffset() {
  gaterolloffset_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double GatePrefs::_internal_gaterolloffset() const {
  return gaterolloffset_;
}
inline double GatePrefs::gaterolloffset() const {
  // @@protoc_insertion_point(field_get:simData.GatePrefs.gateRollOffset)
  return _internal_gaterolloffset();
}
inline void GatePrefs::_internal_set_gaterolloffset(double value) {
  _has_bits_[0] |= 0x00000020u;
  gaterolloffset_ = value;
}
inline void GatePrefs::set_gaterolloffset(double value) {
  _internal_set_gaterolloffset(value);
  // @@protoc_insertion_point(field_set:simData.GatePrefs.gateRollOffset)
}

// optional bool drawOutline = 11 [default = true];
inline bool GatePrefs::_internal_has_drawoutline() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GatePrefs::has_drawoutline() const {
  return _internal_has_drawoutline();
}
inline void GatePrefs::clear_drawoutline() {
  drawoutline_ = true;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool GatePrefs::_internal_drawoutline() const {
  return drawoutline_;
}
inline bool GatePrefs::drawoutline() const {
  // @@protoc_insertion_point(field_get:simData.GatePrefs.drawOutline)
  return _internal_drawoutline();
}
inline void GatePrefs::_internal_set_drawoutline(bool value) {
  _has_bits_[0] |= 0x00000400u;
  drawoutline_ = value;
}
inline void GatePrefs::set_drawoutline(bool value) {
  _internal_set_drawoutline(value);
  // @@protoc_insertion_point(field_set:simData.GatePrefs.drawOutline)
}

// -------------------------------------------------------------------

// GateUpdate

// optional double time = 1;
inline bool GateUpdate::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GateUpdate::has_time() const {
  return _internal_has_time();
}
inline void GateUpdate::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double GateUpdate::_internal_time() const {
  return time_;
}
inline double GateUpdate::time() const {
  // @@protoc_insertion_point(field_get:simData.GateUpdate.time)
  return _internal_time();
}
inline void GateUpdate::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void GateUpdate::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.GateUpdate.time)
}

// optional double azimuth = 2;
inline bool GateUpdate::_internal_has_azimuth() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GateUpdate::has_azimuth() const {
  return _internal_has_azimuth();
}
inline void GateUpdate::clear_azimuth() {
  azimuth_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double GateUpdate::_internal_azimuth() const {
  return azimuth_;
}
inline double GateUpdate::azimuth() const {
  // @@protoc_insertion_point(field_get:simData.GateUpdate.azimuth)
  return _internal_azimuth();
}
inline void GateUpdate::_internal_set_azimuth(double value) {
  _has_bits_[0] |= 0x00000002u;
  azimuth_ = value;
}
inline void GateUpdate::set_azimuth(double value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:simData.GateUpdate.azimuth)
}

// optional double elevation = 3;
inline bool GateUpdate::_internal_has_elevation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GateUpdate::has_elevation() const {
  return _internal_has_elevation();
}
inline void GateUpdate::clear_elevation() {
  elevation_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double GateUpdate::_internal_elevation() const {
  return elevation_;
}
inline double GateUpdate::elevation() const {
  // @@protoc_insertion_point(field_get:simData.GateUpdate.elevation)
  return _internal_elevation();
}
inline void GateUpdate::_internal_set_elevation(double value) {
  _has_bits_[0] |= 0x00000004u;
  elevation_ = value;
}
inline void GateUpdate::set_elevation(double value) {
  _internal_set_elevation(value);
  // @@protoc_insertion_point(field_set:simData.GateUpdate.elevation)
}

// optional double width = 4;
inline bool GateUpdate::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GateUpdate::has_width() const {
  return _internal_has_width();
}
inline void GateUpdate::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double GateUpdate::_internal_width() const {
  return width_;
}
inline double GateUpdate::width() const {
  // @@protoc_insertion_point(field_get:simData.GateUpdate.width)
  return _internal_width();
}
inline void GateUpdate::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void GateUpdate::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:simData.GateUpdate.width)
}

// optional double height = 5;
inline bool GateUpdate::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GateUpdate::has_height() const {
  return _internal_has_height();
}
inline void GateUpdate::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double GateUpdate::_internal_height() const {
  return height_;
}
inline double GateUpdate::height() const {
  // @@protoc_insertion_point(field_get:simData.GateUpdate.height)
  return _internal_height();
}
inline void GateUpdate::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
}
inline void GateUpdate::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:simData.GateUpdate.height)
}

// optional double minRange = 6;
inline bool GateUpdate::_internal_has_minrange() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GateUpdate::has_minrange() const {
  return _internal_has_minrange();
}
inline void GateUpdate::clear_minrange() {
  minrange_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double GateUpdate::_internal_minrange() const {
  return minrange_;
}
inline double GateUpdate::minrange() const {
  // @@protoc_insertion_point(field_get:simData.GateUpdate.minRange)
  return _internal_minrange();
}
inline void GateUpdate::_internal_set_minrange(double value) {
  _has_bits_[0] |= 0x00000020u;
  minrange_ = value;
}
inline void GateUpdate::set_minrange(double value) {
  _internal_set_minrange(value);
  // @@protoc_insertion_point(field_set:simData.GateUpdate.minRange)
}

// optional double maxRange = 7;
inline bool GateUpdate::_internal_has_maxrange() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GateUpdate::has_maxrange() const {
  return _internal_has_maxrange();
}
inline void GateUpdate::clear_maxrange() {
  maxrange_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double GateUpdate::_internal_maxrange() const {
  return maxrange_;
}
inline double GateUpdate::maxrange() const {
  // @@protoc_insertion_point(field_get:simData.GateUpdate.maxRange)
  return _internal_maxrange();
}
inline void GateUpdate::_internal_set_maxrange(double value) {
  _has_bits_[0] |= 0x00000040u;
  maxrange_ = value;
}
inline void GateUpdate::set_maxrange(double value) {
  _internal_set_maxrange(value);
  // @@protoc_insertion_point(field_set:simData.GateUpdate.maxRange)
}

// optional double centroid = 8;
inline bool GateUpdate::_internal_has_centroid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GateUpdate::has_centroid() const {
  return _internal_has_centroid();
}
inline void GateUpdate::clear_centroid() {
  centroid_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double GateUpdate::_internal_centroid() const {
  return centroid_;
}
inline double GateUpdate::centroid() const {
  // @@protoc_insertion_point(field_get:simData.GateUpdate.centroid)
  return _internal_centroid();
}
inline void GateUpdate::_internal_set_centroid(double value) {
  _has_bits_[0] |= 0x00000080u;
  centroid_ = value;
}
inline void GateUpdate::set_centroid(double value) {
  _internal_set_centroid(value);
  // @@protoc_insertion_point(field_set:simData.GateUpdate.centroid)
}

// -------------------------------------------------------------------

// GateCommand

// optional double time = 1;
inline bool GateCommand::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GateCommand::has_time() const {
  return _internal_has_time();
}
inline void GateCommand::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double GateCommand::_internal_time() const {
  return time_;
}
inline double GateCommand::time() const {
  // @@protoc_insertion_point(field_get:simData.GateCommand.time)
  return _internal_time();
}
inline void GateCommand::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void GateCommand::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.GateCommand.time)
}

// optional .simData.GatePrefs updatePrefs = 2;
inline bool GateCommand::_internal_has_updateprefs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || updateprefs_ != nullptr);
  return value;
}
inline bool GateCommand::has_updateprefs() const {
  return _internal_has_updateprefs();
}
inline void GateCommand::clear_updateprefs() {
  if (updateprefs_ != nullptr) updateprefs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::simData::GatePrefs& GateCommand::_internal_updateprefs() const {
  const ::simData::GatePrefs* p = updateprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::GatePrefs&>(
      ::simData::_GatePrefs_default_instance_);
}
inline const ::simData::GatePrefs& GateCommand::updateprefs() const {
  // @@protoc_insertion_point(field_get:simData.GateCommand.updatePrefs)
  return _internal_updateprefs();
}
inline void GateCommand::unsafe_arena_set_allocated_updateprefs(
    ::simData::GatePrefs* updateprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updateprefs_);
  }
  updateprefs_ = updateprefs;
  if (updateprefs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.GateCommand.updatePrefs)
}
inline ::simData::GatePrefs* GateCommand::release_updateprefs() {
  _has_bits_[0] &= ~0x00000001u;
  ::simData::GatePrefs* temp = updateprefs_;
  updateprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::GatePrefs* GateCommand::unsafe_arena_release_updateprefs() {
  // @@protoc_insertion_point(field_release:simData.GateCommand.updatePrefs)
  _has_bits_[0] &= ~0x00000001u;
  ::simData::GatePrefs* temp = updateprefs_;
  updateprefs_ = nullptr;
  return temp;
}
inline ::simData::GatePrefs* GateCommand::_internal_mutable_updateprefs() {
  _has_bits_[0] |= 0x00000001u;
  if (updateprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::GatePrefs>(GetArena());
    updateprefs_ = p;
  }
  return updateprefs_;
}
inline ::simData::GatePrefs* GateCommand::mutable_updateprefs() {
  // @@protoc_insertion_point(field_mutable:simData.GateCommand.updatePrefs)
  return _internal_mutable_updateprefs();
}
inline void GateCommand::set_allocated_updateprefs(::simData::GatePrefs* updateprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updateprefs_;
  }
  if (updateprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updateprefs);
    if (message_arena != submessage_arena) {
      updateprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  updateprefs_ = updateprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.GateCommand.updatePrefs)
}

// optional bool isClearCommand = 3 [default = false];
inline bool GateCommand::_internal_has_isclearcommand() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GateCommand::has_isclearcommand() const {
  return _internal_has_isclearcommand();
}
inline void GateCommand::clear_isclearcommand() {
  isclearcommand_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GateCommand::_internal_isclearcommand() const {
  return isclearcommand_;
}
inline bool GateCommand::isclearcommand() const {
  // @@protoc_insertion_point(field_get:simData.GateCommand.isClearCommand)
  return _internal_isclearcommand();
}
inline void GateCommand::_internal_set_isclearcommand(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isclearcommand_ = value;
}
inline void GateCommand::set_isclearcommand(bool value) {
  _internal_set_isclearcommand(value);
  // @@protoc_insertion_point(field_set:simData.GateCommand.isClearCommand)
}

// -------------------------------------------------------------------

// LaserProperties

// optional uint64 id = 1;
inline bool LaserProperties::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaserProperties::has_id() const {
  return _internal_has_id();
}
inline void LaserProperties::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaserProperties::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaserProperties::id() const {
  // @@protoc_insertion_point(field_get:simData.LaserProperties.id)
  return _internal_id();
}
inline void LaserProperties::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void LaserProperties::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:simData.LaserProperties.id)
}

// optional uint64 hostId = 2;
inline bool LaserProperties::_internal_has_hostid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaserProperties::has_hostid() const {
  return _internal_has_hostid();
}
inline void LaserProperties::clear_hostid() {
  hostid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaserProperties::_internal_hostid() const {
  return hostid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaserProperties::hostid() const {
  // @@protoc_insertion_point(field_get:simData.LaserProperties.hostId)
  return _internal_hostid();
}
inline void LaserProperties::_internal_set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  hostid_ = value;
}
inline void LaserProperties::set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hostid(value);
  // @@protoc_insertion_point(field_set:simData.LaserProperties.hostId)
}

// optional uint64 originalId = 3;
inline bool LaserProperties::_internal_has_originalid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LaserProperties::has_originalid() const {
  return _internal_has_originalid();
}
inline void LaserProperties::clear_originalid() {
  originalid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaserProperties::_internal_originalid() const {
  return originalid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaserProperties::originalid() const {
  // @@protoc_insertion_point(field_get:simData.LaserProperties.originalId)
  return _internal_originalid();
}
inline void LaserProperties::_internal_set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  originalid_ = value;
}
inline void LaserProperties::set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_originalid(value);
  // @@protoc_insertion_point(field_set:simData.LaserProperties.originalId)
}

// optional string source = 4;
inline bool LaserProperties::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LaserProperties::has_source() const {
  return _internal_has_source();
}
inline void LaserProperties::clear_source() {
  source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LaserProperties::source() const {
  // @@protoc_insertion_point(field_get:simData.LaserProperties.source)
  return _internal_source();
}
inline void LaserProperties::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:simData.LaserProperties.source)
}
inline std::string* LaserProperties::mutable_source() {
  // @@protoc_insertion_point(field_mutable:simData.LaserProperties.source)
  return _internal_mutable_source();
}
inline const std::string& LaserProperties::_internal_source() const {
  return source_.Get();
}
inline void LaserProperties::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LaserProperties::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.LaserProperties.source)
}
inline void LaserProperties::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.LaserProperties.source)
}
inline void LaserProperties::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.LaserProperties.source)
}
inline std::string* LaserProperties::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LaserProperties::release_source() {
  // @@protoc_insertion_point(field_release:simData.LaserProperties.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LaserProperties::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.LaserProperties.source)
}

// optional .simData.CoordinateSystem coordinateSystem = 5;
inline bool LaserProperties::_internal_has_coordinatesystem() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LaserProperties::has_coordinatesystem() const {
  return _internal_has_coordinatesystem();
}
inline void LaserProperties::clear_coordinatesystem() {
  coordinatesystem_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::simData::CoordinateSystem LaserProperties::_internal_coordinatesystem() const {
  return static_cast< ::simData::CoordinateSystem >(coordinatesystem_);
}
inline ::simData::CoordinateSystem LaserProperties::coordinatesystem() const {
  // @@protoc_insertion_point(field_get:simData.LaserProperties.coordinateSystem)
  return _internal_coordinatesystem();
}
inline void LaserProperties::_internal_set_coordinatesystem(::simData::CoordinateSystem value) {
  assert(::simData::CoordinateSystem_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  coordinatesystem_ = value;
}
inline void LaserProperties::set_coordinatesystem(::simData::CoordinateSystem value) {
  _internal_set_coordinatesystem(value);
  // @@protoc_insertion_point(field_set:simData.LaserProperties.coordinateSystem)
}

// optional bool azElRelativeToHostOri = 6;
inline bool LaserProperties::_internal_has_azelrelativetohostori() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LaserProperties::has_azelrelativetohostori() const {
  return _internal_has_azelrelativetohostori();
}
inline void LaserProperties::clear_azelrelativetohostori() {
  azelrelativetohostori_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LaserProperties::_internal_azelrelativetohostori() const {
  return azelrelativetohostori_;
}
inline bool LaserProperties::azelrelativetohostori() const {
  // @@protoc_insertion_point(field_get:simData.LaserProperties.azElRelativeToHostOri)
  return _internal_azelrelativetohostori();
}
inline void LaserProperties::_internal_set_azelrelativetohostori(bool value) {
  _has_bits_[0] |= 0x00000010u;
  azelrelativetohostori_ = value;
}
inline void LaserProperties::set_azelrelativetohostori(bool value) {
  _internal_set_azelrelativetohostori(value);
  // @@protoc_insertion_point(field_set:simData.LaserProperties.azElRelativeToHostOri)
}

// -------------------------------------------------------------------

// LaserPrefs

// optional .simData.CommonPrefs commonPrefs = 1;
inline bool LaserPrefs::_internal_has_commonprefs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || commonprefs_ != nullptr);
  return value;
}
inline bool LaserPrefs::has_commonprefs() const {
  return _internal_has_commonprefs();
}
inline void LaserPrefs::clear_commonprefs() {
  if (commonprefs_ != nullptr) commonprefs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::simData::CommonPrefs& LaserPrefs::_internal_commonprefs() const {
  const ::simData::CommonPrefs* p = commonprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::CommonPrefs&>(
      ::simData::_CommonPrefs_default_instance_);
}
inline const ::simData::CommonPrefs& LaserPrefs::commonprefs() const {
  // @@protoc_insertion_point(field_get:simData.LaserPrefs.commonPrefs)
  return _internal_commonprefs();
}
inline void LaserPrefs::unsafe_arena_set_allocated_commonprefs(
    ::simData::CommonPrefs* commonprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commonprefs_);
  }
  commonprefs_ = commonprefs;
  if (commonprefs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LaserPrefs.commonPrefs)
}
inline ::simData::CommonPrefs* LaserPrefs::release_commonprefs() {
  _has_bits_[0] &= ~0x00000001u;
  ::simData::CommonPrefs* temp = commonprefs_;
  commonprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::CommonPrefs* LaserPrefs::unsafe_arena_release_commonprefs() {
  // @@protoc_insertion_point(field_release:simData.LaserPrefs.commonPrefs)
  _has_bits_[0] &= ~0x00000001u;
  ::simData::CommonPrefs* temp = commonprefs_;
  commonprefs_ = nullptr;
  return temp;
}
inline ::simData::CommonPrefs* LaserPrefs::_internal_mutable_commonprefs() {
  _has_bits_[0] |= 0x00000001u;
  if (commonprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::CommonPrefs>(GetArena());
    commonprefs_ = p;
  }
  return commonprefs_;
}
inline ::simData::CommonPrefs* LaserPrefs::mutable_commonprefs() {
  // @@protoc_insertion_point(field_mutable:simData.LaserPrefs.commonPrefs)
  return _internal_mutable_commonprefs();
}
inline void LaserPrefs::set_allocated_commonprefs(::simData::CommonPrefs* commonprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete commonprefs_;
  }
  if (commonprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(commonprefs);
    if (message_arena != submessage_arena) {
      commonprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commonprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  commonprefs_ = commonprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.LaserPrefs.commonPrefs)
}

// optional .simData.Position laserXyzOffset = 2;
inline bool LaserPrefs::_internal_has_laserxyzoffset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || laserxyzoffset_ != nullptr);
  return value;
}
inline bool LaserPrefs::has_laserxyzoffset() const {
  return _internal_has_laserxyzoffset();
}
inline void LaserPrefs::clear_laserxyzoffset() {
  if (laserxyzoffset_ != nullptr) laserxyzoffset_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::simData::Position& LaserPrefs::_internal_laserxyzoffset() const {
  const ::simData::Position* p = laserxyzoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::Position&>(
      ::simData::_Position_default_instance_);
}
inline const ::simData::Position& LaserPrefs::laserxyzoffset() const {
  // @@protoc_insertion_point(field_get:simData.LaserPrefs.laserXyzOffset)
  return _internal_laserxyzoffset();
}
inline void LaserPrefs::unsafe_arena_set_allocated_laserxyzoffset(
    ::simData::Position* laserxyzoffset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(laserxyzoffset_);
  }
  laserxyzoffset_ = laserxyzoffset;
  if (laserxyzoffset) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LaserPrefs.laserXyzOffset)
}
inline ::simData::Position* LaserPrefs::release_laserxyzoffset() {
  _has_bits_[0] &= ~0x00000002u;
  ::simData::Position* temp = laserxyzoffset_;
  laserxyzoffset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::Position* LaserPrefs::unsafe_arena_release_laserxyzoffset() {
  // @@protoc_insertion_point(field_release:simData.LaserPrefs.laserXyzOffset)
  _has_bits_[0] &= ~0x00000002u;
  ::simData::Position* temp = laserxyzoffset_;
  laserxyzoffset_ = nullptr;
  return temp;
}
inline ::simData::Position* LaserPrefs::_internal_mutable_laserxyzoffset() {
  _has_bits_[0] |= 0x00000002u;
  if (laserxyzoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::Position>(GetArena());
    laserxyzoffset_ = p;
  }
  return laserxyzoffset_;
}
inline ::simData::Position* LaserPrefs::mutable_laserxyzoffset() {
  // @@protoc_insertion_point(field_mutable:simData.LaserPrefs.laserXyzOffset)
  return _internal_mutable_laserxyzoffset();
}
inline void LaserPrefs::set_allocated_laserxyzoffset(::simData::Position* laserxyzoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete laserxyzoffset_;
  }
  if (laserxyzoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(laserxyzoffset);
    if (message_arena != submessage_arena) {
      laserxyzoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, laserxyzoffset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  laserxyzoffset_ = laserxyzoffset;
  // @@protoc_insertion_point(field_set_allocated:simData.LaserPrefs.laserXyzOffset)
}

// optional double maxRange = 3 [default = 1000000];
inline bool LaserPrefs::_internal_has_maxrange() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LaserPrefs::has_maxrange() const {
  return _internal_has_maxrange();
}
inline void LaserPrefs::clear_maxrange() {
  maxrange_ = 1000000;
  _has_bits_[0] &= ~0x00000008u;
}
inline double LaserPrefs::_internal_maxrange() const {
  return maxrange_;
}
inline double LaserPrefs::maxrange() const {
  // @@protoc_insertion_point(field_get:simData.LaserPrefs.maxRange)
  return _internal_maxrange();
}
inline void LaserPrefs::_internal_set_maxrange(double value) {
  _has_bits_[0] |= 0x00000008u;
  maxrange_ = value;
}
inline void LaserPrefs::set_maxrange(double value) {
  _internal_set_maxrange(value);
  // @@protoc_insertion_point(field_set:simData.LaserPrefs.maxRange)
}

// optional int32 laserWidth = 4 [default = 1];
inline bool LaserPrefs::_internal_has_laserwidth() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaserPrefs::has_laserwidth() const {
  return _internal_has_laserwidth();
}
inline void LaserPrefs::clear_laserwidth() {
  laserwidth_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaserPrefs::_internal_laserwidth() const {
  return laserwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaserPrefs::laserwidth() const {
  // @@protoc_insertion_point(field_get:simData.LaserPrefs.laserWidth)
  return _internal_laserwidth();
}
inline void LaserPrefs::_internal_set_laserwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  laserwidth_ = value;
}
inline void LaserPrefs::set_laserwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_laserwidth(value);
  // @@protoc_insertion_point(field_set:simData.LaserPrefs.laserWidth)
}

// -------------------------------------------------------------------

// LaserUpdate

// optional double time = 1;
inline bool LaserUpdate::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaserUpdate::has_time() const {
  return _internal_has_time();
}
inline void LaserUpdate::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LaserUpdate::_internal_time() const {
  return time_;
}
inline double LaserUpdate::time() const {
  // @@protoc_insertion_point(field_get:simData.LaserUpdate.time)
  return _internal_time();
}
inline void LaserUpdate::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void LaserUpdate::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.LaserUpdate.time)
}

// optional .simData.BodyOrientation orientation = 2;
inline bool LaserUpdate::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || orientation_ != nullptr);
  return value;
}
inline bool LaserUpdate::has_orientation() const {
  return _internal_has_orientation();
}
inline void LaserUpdate::clear_orientation() {
  if (orientation_ != nullptr) orientation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::simData::BodyOrientation& LaserUpdate::_internal_orientation() const {
  const ::simData::BodyOrientation* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::BodyOrientation&>(
      ::simData::_BodyOrientation_default_instance_);
}
inline const ::simData::BodyOrientation& LaserUpdate::orientation() const {
  // @@protoc_insertion_point(field_get:simData.LaserUpdate.orientation)
  return _internal_orientation();
}
inline void LaserUpdate::unsafe_arena_set_allocated_orientation(
    ::simData::BodyOrientation* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LaserUpdate.orientation)
}
inline ::simData::BodyOrientation* LaserUpdate::release_orientation() {
  _has_bits_[0] &= ~0x00000001u;
  ::simData::BodyOrientation* temp = orientation_;
  orientation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::BodyOrientation* LaserUpdate::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:simData.LaserUpdate.orientation)
  _has_bits_[0] &= ~0x00000001u;
  ::simData::BodyOrientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::simData::BodyOrientation* LaserUpdate::_internal_mutable_orientation() {
  _has_bits_[0] |= 0x00000001u;
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::BodyOrientation>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::simData::BodyOrientation* LaserUpdate::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:simData.LaserUpdate.orientation)
  return _internal_mutable_orientation();
}
inline void LaserUpdate::set_allocated_orientation(::simData::BodyOrientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:simData.LaserUpdate.orientation)
}

// -------------------------------------------------------------------

// LaserCommand

// optional double time = 1;
inline bool LaserCommand::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaserCommand::has_time() const {
  return _internal_has_time();
}
inline void LaserCommand::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LaserCommand::_internal_time() const {
  return time_;
}
inline double LaserCommand::time() const {
  // @@protoc_insertion_point(field_get:simData.LaserCommand.time)
  return _internal_time();
}
inline void LaserCommand::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void LaserCommand::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.LaserCommand.time)
}

// optional .simData.LaserPrefs updatePrefs = 2;
inline bool LaserCommand::_internal_has_updateprefs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || updateprefs_ != nullptr);
  return value;
}
inline bool LaserCommand::has_updateprefs() const {
  return _internal_has_updateprefs();
}
inline void LaserCommand::clear_updateprefs() {
  if (updateprefs_ != nullptr) updateprefs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::simData::LaserPrefs& LaserCommand::_internal_updateprefs() const {
  const ::simData::LaserPrefs* p = updateprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::LaserPrefs&>(
      ::simData::_LaserPrefs_default_instance_);
}
inline const ::simData::LaserPrefs& LaserCommand::updateprefs() const {
  // @@protoc_insertion_point(field_get:simData.LaserCommand.updatePrefs)
  return _internal_updateprefs();
}
inline void LaserCommand::unsafe_arena_set_allocated_updateprefs(
    ::simData::LaserPrefs* updateprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updateprefs_);
  }
  updateprefs_ = updateprefs;
  if (updateprefs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LaserCommand.updatePrefs)
}
inline ::simData::LaserPrefs* LaserCommand::release_updateprefs() {
  _has_bits_[0] &= ~0x00000001u;
  ::simData::LaserPrefs* temp = updateprefs_;
  updateprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::LaserPrefs* LaserCommand::unsafe_arena_release_updateprefs() {
  // @@protoc_insertion_point(field_release:simData.LaserCommand.updatePrefs)
  _has_bits_[0] &= ~0x00000001u;
  ::simData::LaserPrefs* temp = updateprefs_;
  updateprefs_ = nullptr;
  return temp;
}
inline ::simData::LaserPrefs* LaserCommand::_internal_mutable_updateprefs() {
  _has_bits_[0] |= 0x00000001u;
  if (updateprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::LaserPrefs>(GetArena());
    updateprefs_ = p;
  }
  return updateprefs_;
}
inline ::simData::LaserPrefs* LaserCommand::mutable_updateprefs() {
  // @@protoc_insertion_point(field_mutable:simData.LaserCommand.updatePrefs)
  return _internal_mutable_updateprefs();
}
inline void LaserCommand::set_allocated_updateprefs(::simData::LaserPrefs* updateprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updateprefs_;
  }
  if (updateprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updateprefs);
    if (message_arena != submessage_arena) {
      updateprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  updateprefs_ = updateprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.LaserCommand.updatePrefs)
}

// optional bool isClearCommand = 3 [default = false];
inline bool LaserCommand::_internal_has_isclearcommand() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaserCommand::has_isclearcommand() const {
  return _internal_has_isclearcommand();
}
inline void LaserCommand::clear_isclearcommand() {
  isclearcommand_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool LaserCommand::_internal_isclearcommand() const {
  return isclearcommand_;
}
inline bool LaserCommand::isclearcommand() const {
  // @@protoc_insertion_point(field_get:simData.LaserCommand.isClearCommand)
  return _internal_isclearcommand();
}
inline void LaserCommand::_internal_set_isclearcommand(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isclearcommand_ = value;
}
inline void LaserCommand::set_isclearcommand(bool value) {
  _internal_set_isclearcommand(value);
  // @@protoc_insertion_point(field_set:simData.LaserCommand.isClearCommand)
}

// -------------------------------------------------------------------

// CustomRenderingProperties

// optional uint64 id = 1;
inline bool CustomRenderingProperties::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CustomRenderingProperties::has_id() const {
  return _internal_has_id();
}
inline void CustomRenderingProperties::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CustomRenderingProperties::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CustomRenderingProperties::id() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingProperties.id)
  return _internal_id();
}
inline void CustomRenderingProperties::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void CustomRenderingProperties::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingProperties.id)
}

// optional uint64 hostId = 2;
inline bool CustomRenderingProperties::_internal_has_hostid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CustomRenderingProperties::has_hostid() const {
  return _internal_has_hostid();
}
inline void CustomRenderingProperties::clear_hostid() {
  hostid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CustomRenderingProperties::_internal_hostid() const {
  return hostid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CustomRenderingProperties::hostid() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingProperties.hostId)
  return _internal_hostid();
}
inline void CustomRenderingProperties::_internal_set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  hostid_ = value;
}
inline void CustomRenderingProperties::set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hostid(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingProperties.hostId)
}

// optional uint64 originalId = 3;
inline bool CustomRenderingProperties::_internal_has_originalid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CustomRenderingProperties::has_originalid() const {
  return _internal_has_originalid();
}
inline void CustomRenderingProperties::clear_originalid() {
  originalid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CustomRenderingProperties::_internal_originalid() const {
  return originalid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CustomRenderingProperties::originalid() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingProperties.originalId)
  return _internal_originalid();
}
inline void CustomRenderingProperties::_internal_set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  originalid_ = value;
}
inline void CustomRenderingProperties::set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_originalid(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingProperties.originalId)
}

// optional string source = 4;
inline bool CustomRenderingProperties::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomRenderingProperties::has_source() const {
  return _internal_has_source();
}
inline void CustomRenderingProperties::clear_source() {
  source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomRenderingProperties::source() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingProperties.source)
  return _internal_source();
}
inline void CustomRenderingProperties::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingProperties.source)
}
inline std::string* CustomRenderingProperties::mutable_source() {
  // @@protoc_insertion_point(field_mutable:simData.CustomRenderingProperties.source)
  return _internal_mutable_source();
}
inline const std::string& CustomRenderingProperties::_internal_source() const {
  return source_.Get();
}
inline void CustomRenderingProperties::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomRenderingProperties::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.CustomRenderingProperties.source)
}
inline void CustomRenderingProperties::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.CustomRenderingProperties.source)
}
inline void CustomRenderingProperties::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.CustomRenderingProperties.source)
}
inline std::string* CustomRenderingProperties::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomRenderingProperties::release_source() {
  // @@protoc_insertion_point(field_release:simData.CustomRenderingProperties.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomRenderingProperties::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.CustomRenderingProperties.source)
}

// optional string renderer = 5;
inline bool CustomRenderingProperties::_internal_has_renderer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomRenderingProperties::has_renderer() const {
  return _internal_has_renderer();
}
inline void CustomRenderingProperties::clear_renderer() {
  renderer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CustomRenderingProperties::renderer() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingProperties.renderer)
  return _internal_renderer();
}
inline void CustomRenderingProperties::set_renderer(const std::string& value) {
  _internal_set_renderer(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingProperties.renderer)
}
inline std::string* CustomRenderingProperties::mutable_renderer() {
  // @@protoc_insertion_point(field_mutable:simData.CustomRenderingProperties.renderer)
  return _internal_mutable_renderer();
}
inline const std::string& CustomRenderingProperties::_internal_renderer() const {
  return renderer_.Get();
}
inline void CustomRenderingProperties::_internal_set_renderer(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  renderer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomRenderingProperties::set_renderer(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  renderer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.CustomRenderingProperties.renderer)
}
inline void CustomRenderingProperties::set_renderer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  renderer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.CustomRenderingProperties.renderer)
}
inline void CustomRenderingProperties::set_renderer(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  renderer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.CustomRenderingProperties.renderer)
}
inline std::string* CustomRenderingProperties::_internal_mutable_renderer() {
  _has_bits_[0] |= 0x00000002u;
  return renderer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomRenderingProperties::release_renderer() {
  // @@protoc_insertion_point(field_release:simData.CustomRenderingProperties.renderer)
  if (!_internal_has_renderer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return renderer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomRenderingProperties::set_allocated_renderer(std::string* renderer) {
  if (renderer != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  renderer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), renderer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.CustomRenderingProperties.renderer)
}

// -------------------------------------------------------------------

// CustomRenderingPrefs

// optional .simData.CommonPrefs commonPrefs = 1;
inline bool CustomRenderingPrefs::_internal_has_commonprefs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || commonprefs_ != nullptr);
  return value;
}
inline bool CustomRenderingPrefs::has_commonprefs() const {
  return _internal_has_commonprefs();
}
inline void CustomRenderingPrefs::clear_commonprefs() {
  if (commonprefs_ != nullptr) commonprefs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::simData::CommonPrefs& CustomRenderingPrefs::_internal_commonprefs() const {
  const ::simData::CommonPrefs* p = commonprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::CommonPrefs&>(
      ::simData::_CommonPrefs_default_instance_);
}
inline const ::simData::CommonPrefs& CustomRenderingPrefs::commonprefs() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingPrefs.commonPrefs)
  return _internal_commonprefs();
}
inline void CustomRenderingPrefs::unsafe_arena_set_allocated_commonprefs(
    ::simData::CommonPrefs* commonprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commonprefs_);
  }
  commonprefs_ = commonprefs;
  if (commonprefs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.CustomRenderingPrefs.commonPrefs)
}
inline ::simData::CommonPrefs* CustomRenderingPrefs::release_commonprefs() {
  _has_bits_[0] &= ~0x00000001u;
  ::simData::CommonPrefs* temp = commonprefs_;
  commonprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::CommonPrefs* CustomRenderingPrefs::unsafe_arena_release_commonprefs() {
  // @@protoc_insertion_point(field_release:simData.CustomRenderingPrefs.commonPrefs)
  _has_bits_[0] &= ~0x00000001u;
  ::simData::CommonPrefs* temp = commonprefs_;
  commonprefs_ = nullptr;
  return temp;
}
inline ::simData::CommonPrefs* CustomRenderingPrefs::_internal_mutable_commonprefs() {
  _has_bits_[0] |= 0x00000001u;
  if (commonprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::CommonPrefs>(GetArena());
    commonprefs_ = p;
  }
  return commonprefs_;
}
inline ::simData::CommonPrefs* CustomRenderingPrefs::mutable_commonprefs() {
  // @@protoc_insertion_point(field_mutable:simData.CustomRenderingPrefs.commonPrefs)
  return _internal_mutable_commonprefs();
}
inline void CustomRenderingPrefs::set_allocated_commonprefs(::simData::CommonPrefs* commonprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete commonprefs_;
  }
  if (commonprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(commonprefs);
    if (message_arena != submessage_arena) {
      commonprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commonprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  commonprefs_ = commonprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.CustomRenderingPrefs.commonPrefs)
}

// optional double persistence = 2 [default = 5];
inline bool CustomRenderingPrefs::_internal_has_persistence() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CustomRenderingPrefs::has_persistence() const {
  return _internal_has_persistence();
}
inline void CustomRenderingPrefs::clear_persistence() {
  persistence_ = 5;
  _has_bits_[0] &= ~0x00000080u;
}
inline double CustomRenderingPrefs::_internal_persistence() const {
  return persistence_;
}
inline double CustomRenderingPrefs::persistence() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingPrefs.persistence)
  return _internal_persistence();
}
inline void CustomRenderingPrefs::_internal_set_persistence(double value) {
  _has_bits_[0] |= 0x00000080u;
  persistence_ = value;
}
inline void CustomRenderingPrefs::set_persistence(double value) {
  _internal_set_persistence(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingPrefs.persistence)
}

// optional double secondsHistory = 3 [default = 5];
inline bool CustomRenderingPrefs::_internal_has_secondshistory() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CustomRenderingPrefs::has_secondshistory() const {
  return _internal_has_secondshistory();
}
inline void CustomRenderingPrefs::clear_secondshistory() {
  secondshistory_ = 5;
  _has_bits_[0] &= ~0x00000100u;
}
inline double CustomRenderingPrefs::_internal_secondshistory() const {
  return secondshistory_;
}
inline double CustomRenderingPrefs::secondshistory() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingPrefs.secondsHistory)
  return _internal_secondshistory();
}
inline void CustomRenderingPrefs::_internal_set_secondshistory(double value) {
  _has_bits_[0] |= 0x00000100u;
  secondshistory_ = value;
}
inline void CustomRenderingPrefs::set_secondshistory(double value) {
  _internal_set_secondshistory(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingPrefs.secondsHistory)
}

// optional uint32 pointsHistory = 4 [default = 0];
inline bool CustomRenderingPrefs::_internal_has_pointshistory() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomRenderingPrefs::has_pointshistory() const {
  return _internal_has_pointshistory();
}
inline void CustomRenderingPrefs::clear_pointshistory() {
  pointshistory_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomRenderingPrefs::_internal_pointshistory() const {
  return pointshistory_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomRenderingPrefs::pointshistory() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingPrefs.pointsHistory)
  return _internal_pointshistory();
}
inline void CustomRenderingPrefs::_internal_set_pointshistory(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pointshistory_ = value;
}
inline void CustomRenderingPrefs::set_pointshistory(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pointshistory(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingPrefs.pointsHistory)
}

// optional bool outline = 5 [default = false];
inline bool CustomRenderingPrefs::_internal_has_outline() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CustomRenderingPrefs::has_outline() const {
  return _internal_has_outline();
}
inline void CustomRenderingPrefs::clear_outline() {
  outline_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CustomRenderingPrefs::_internal_outline() const {
  return outline_;
}
inline bool CustomRenderingPrefs::outline() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingPrefs.outline)
  return _internal_outline();
}
inline void CustomRenderingPrefs::_internal_set_outline(bool value) {
  _has_bits_[0] |= 0x00000004u;
  outline_ = value;
}
inline void CustomRenderingPrefs::set_outline(bool value) {
  _internal_set_outline(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingPrefs.outline)
}

// optional bool useHistoryOverrideColor = 6 [default = false];
inline bool CustomRenderingPrefs::_internal_has_usehistoryoverridecolor() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CustomRenderingPrefs::has_usehistoryoverridecolor() const {
  return _internal_has_usehistoryoverridecolor();
}
inline void CustomRenderingPrefs::clear_usehistoryoverridecolor() {
  usehistoryoverridecolor_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CustomRenderingPrefs::_internal_usehistoryoverridecolor() const {
  return usehistoryoverridecolor_;
}
inline bool CustomRenderingPrefs::usehistoryoverridecolor() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingPrefs.useHistoryOverrideColor)
  return _internal_usehistoryoverridecolor();
}
inline void CustomRenderingPrefs::_internal_set_usehistoryoverridecolor(bool value) {
  _has_bits_[0] |= 0x00000008u;
  usehistoryoverridecolor_ = value;
}
inline void CustomRenderingPrefs::set_usehistoryoverridecolor(bool value) {
  _internal_set_usehistoryoverridecolor(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingPrefs.useHistoryOverrideColor)
}

// optional fixed32 historyOverrideColor = 7 [default = 434438399];
inline bool CustomRenderingPrefs::_internal_has_historyoverridecolor() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CustomRenderingPrefs::has_historyoverridecolor() const {
  return _internal_has_historyoverridecolor();
}
inline void CustomRenderingPrefs::clear_historyoverridecolor() {
  historyoverridecolor_ = 434438399u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomRenderingPrefs::_internal_historyoverridecolor() const {
  return historyoverridecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomRenderingPrefs::historyoverridecolor() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingPrefs.historyOverrideColor)
  return _internal_historyoverridecolor();
}
inline void CustomRenderingPrefs::_internal_set_historyoverridecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  historyoverridecolor_ = value;
}
inline void CustomRenderingPrefs::set_historyoverridecolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_historyoverridecolor(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingPrefs.historyOverrideColor)
}

// optional bool centerAxis = 8 [default = false];
inline bool CustomRenderingPrefs::_internal_has_centeraxis() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CustomRenderingPrefs::has_centeraxis() const {
  return _internal_has_centeraxis();
}
inline void CustomRenderingPrefs::clear_centeraxis() {
  centeraxis_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CustomRenderingPrefs::_internal_centeraxis() const {
  return centeraxis_;
}
inline bool CustomRenderingPrefs::centeraxis() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingPrefs.centerAxis)
  return _internal_centeraxis();
}
inline void CustomRenderingPrefs::_internal_set_centeraxis(bool value) {
  _has_bits_[0] |= 0x00000010u;
  centeraxis_ = value;
}
inline void CustomRenderingPrefs::set_centeraxis(bool value) {
  _internal_set_centeraxis(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingPrefs.centerAxis)
}

// optional bool showLighted = 9 [default = false];
inline bool CustomRenderingPrefs::_internal_has_showlighted() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CustomRenderingPrefs::has_showlighted() const {
  return _internal_has_showlighted();
}
inline void CustomRenderingPrefs::clear_showlighted() {
  showlighted_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CustomRenderingPrefs::_internal_showlighted() const {
  return showlighted_;
}
inline bool CustomRenderingPrefs::showlighted() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingPrefs.showLighted)
  return _internal_showlighted();
}
inline void CustomRenderingPrefs::_internal_set_showlighted(bool value) {
  _has_bits_[0] |= 0x00000020u;
  showlighted_ = value;
}
inline void CustomRenderingPrefs::set_showlighted(bool value) {
  _internal_set_showlighted(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingPrefs.showLighted)
}

// -------------------------------------------------------------------

// CustomRenderingUpdate

// optional double time = 1;
inline bool CustomRenderingUpdate::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomRenderingUpdate::has_time() const {
  return _internal_has_time();
}
inline void CustomRenderingUpdate::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double CustomRenderingUpdate::_internal_time() const {
  return time_;
}
inline double CustomRenderingUpdate::time() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingUpdate.time)
  return _internal_time();
}
inline void CustomRenderingUpdate::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void CustomRenderingUpdate::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingUpdate.time)
}

// -------------------------------------------------------------------

// CustomRenderingCommand

// optional double time = 1;
inline bool CustomRenderingCommand::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomRenderingCommand::has_time() const {
  return _internal_has_time();
}
inline void CustomRenderingCommand::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CustomRenderingCommand::_internal_time() const {
  return time_;
}
inline double CustomRenderingCommand::time() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingCommand.time)
  return _internal_time();
}
inline void CustomRenderingCommand::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void CustomRenderingCommand::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingCommand.time)
}

// optional .simData.CustomRenderingPrefs updatePrefs = 2;
inline bool CustomRenderingCommand::_internal_has_updateprefs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || updateprefs_ != nullptr);
  return value;
}
inline bool CustomRenderingCommand::has_updateprefs() const {
  return _internal_has_updateprefs();
}
inline void CustomRenderingCommand::clear_updateprefs() {
  if (updateprefs_ != nullptr) updateprefs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::simData::CustomRenderingPrefs& CustomRenderingCommand::_internal_updateprefs() const {
  const ::simData::CustomRenderingPrefs* p = updateprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::CustomRenderingPrefs&>(
      ::simData::_CustomRenderingPrefs_default_instance_);
}
inline const ::simData::CustomRenderingPrefs& CustomRenderingCommand::updateprefs() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingCommand.updatePrefs)
  return _internal_updateprefs();
}
inline void CustomRenderingCommand::unsafe_arena_set_allocated_updateprefs(
    ::simData::CustomRenderingPrefs* updateprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updateprefs_);
  }
  updateprefs_ = updateprefs;
  if (updateprefs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.CustomRenderingCommand.updatePrefs)
}
inline ::simData::CustomRenderingPrefs* CustomRenderingCommand::release_updateprefs() {
  _has_bits_[0] &= ~0x00000001u;
  ::simData::CustomRenderingPrefs* temp = updateprefs_;
  updateprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::CustomRenderingPrefs* CustomRenderingCommand::unsafe_arena_release_updateprefs() {
  // @@protoc_insertion_point(field_release:simData.CustomRenderingCommand.updatePrefs)
  _has_bits_[0] &= ~0x00000001u;
  ::simData::CustomRenderingPrefs* temp = updateprefs_;
  updateprefs_ = nullptr;
  return temp;
}
inline ::simData::CustomRenderingPrefs* CustomRenderingCommand::_internal_mutable_updateprefs() {
  _has_bits_[0] |= 0x00000001u;
  if (updateprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::CustomRenderingPrefs>(GetArena());
    updateprefs_ = p;
  }
  return updateprefs_;
}
inline ::simData::CustomRenderingPrefs* CustomRenderingCommand::mutable_updateprefs() {
  // @@protoc_insertion_point(field_mutable:simData.CustomRenderingCommand.updatePrefs)
  return _internal_mutable_updateprefs();
}
inline void CustomRenderingCommand::set_allocated_updateprefs(::simData::CustomRenderingPrefs* updateprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updateprefs_;
  }
  if (updateprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updateprefs);
    if (message_arena != submessage_arena) {
      updateprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  updateprefs_ = updateprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.CustomRenderingCommand.updatePrefs)
}

// optional bool isClearCommand = 3 [default = false];
inline bool CustomRenderingCommand::_internal_has_isclearcommand() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CustomRenderingCommand::has_isclearcommand() const {
  return _internal_has_isclearcommand();
}
inline void CustomRenderingCommand::clear_isclearcommand() {
  isclearcommand_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CustomRenderingCommand::_internal_isclearcommand() const {
  return isclearcommand_;
}
inline bool CustomRenderingCommand::isclearcommand() const {
  // @@protoc_insertion_point(field_get:simData.CustomRenderingCommand.isClearCommand)
  return _internal_isclearcommand();
}
inline void CustomRenderingCommand::_internal_set_isclearcommand(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isclearcommand_ = value;
}
inline void CustomRenderingCommand::set_isclearcommand(bool value) {
  _internal_set_isclearcommand(value);
  // @@protoc_insertion_point(field_set:simData.CustomRenderingCommand.isClearCommand)
}

// -------------------------------------------------------------------

// ProjectorProperties

// optional uint64 id = 1;
inline bool ProjectorProperties::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProjectorProperties::has_id() const {
  return _internal_has_id();
}
inline void ProjectorProperties::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectorProperties::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectorProperties::id() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorProperties.id)
  return _internal_id();
}
inline void ProjectorProperties::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void ProjectorProperties::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorProperties.id)
}

// optional uint64 hostId = 2;
inline bool ProjectorProperties::_internal_has_hostid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProjectorProperties::has_hostid() const {
  return _internal_has_hostid();
}
inline void ProjectorProperties::clear_hostid() {
  hostid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectorProperties::_internal_hostid() const {
  return hostid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectorProperties::hostid() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorProperties.hostId)
  return _internal_hostid();
}
inline void ProjectorProperties::_internal_set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  hostid_ = value;
}
inline void ProjectorProperties::set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hostid(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorProperties.hostId)
}

// optional uint64 originalId = 3;
inline bool ProjectorProperties::_internal_has_originalid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProjectorProperties::has_originalid() const {
  return _internal_has_originalid();
}
inline void ProjectorProperties::clear_originalid() {
  originalid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectorProperties::_internal_originalid() const {
  return originalid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProjectorProperties::originalid() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorProperties.originalId)
  return _internal_originalid();
}
inline void ProjectorProperties::_internal_set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  originalid_ = value;
}
inline void ProjectorProperties::set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_originalid(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorProperties.originalId)
}

// optional string source = 4;
inline bool ProjectorProperties::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProjectorProperties::has_source() const {
  return _internal_has_source();
}
inline void ProjectorProperties::clear_source() {
  source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProjectorProperties::source() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorProperties.source)
  return _internal_source();
}
inline void ProjectorProperties::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorProperties.source)
}
inline std::string* ProjectorProperties::mutable_source() {
  // @@protoc_insertion_point(field_mutable:simData.ProjectorProperties.source)
  return _internal_mutable_source();
}
inline const std::string& ProjectorProperties::_internal_source() const {
  return source_.Get();
}
inline void ProjectorProperties::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProjectorProperties::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.ProjectorProperties.source)
}
inline void ProjectorProperties::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.ProjectorProperties.source)
}
inline void ProjectorProperties::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.ProjectorProperties.source)
}
inline std::string* ProjectorProperties::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProjectorProperties::release_source() {
  // @@protoc_insertion_point(field_release:simData.ProjectorProperties.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProjectorProperties::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.ProjectorProperties.source)
}

// -------------------------------------------------------------------

// ProjectorPrefs

// optional .simData.CommonPrefs commonPrefs = 1;
inline bool ProjectorPrefs::_internal_has_commonprefs() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || commonprefs_ != nullptr);
  return value;
}
inline bool ProjectorPrefs::has_commonprefs() const {
  return _internal_has_commonprefs();
}
inline void ProjectorPrefs::clear_commonprefs() {
  if (commonprefs_ != nullptr) commonprefs_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::simData::CommonPrefs& ProjectorPrefs::_internal_commonprefs() const {
  const ::simData::CommonPrefs* p = commonprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::CommonPrefs&>(
      ::simData::_CommonPrefs_default_instance_);
}
inline const ::simData::CommonPrefs& ProjectorPrefs::commonprefs() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorPrefs.commonPrefs)
  return _internal_commonprefs();
}
inline void ProjectorPrefs::unsafe_arena_set_allocated_commonprefs(
    ::simData::CommonPrefs* commonprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commonprefs_);
  }
  commonprefs_ = commonprefs;
  if (commonprefs) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.ProjectorPrefs.commonPrefs)
}
inline ::simData::CommonPrefs* ProjectorPrefs::release_commonprefs() {
  _has_bits_[0] &= ~0x00000002u;
  ::simData::CommonPrefs* temp = commonprefs_;
  commonprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::CommonPrefs* ProjectorPrefs::unsafe_arena_release_commonprefs() {
  // @@protoc_insertion_point(field_release:simData.ProjectorPrefs.commonPrefs)
  _has_bits_[0] &= ~0x00000002u;
  ::simData::CommonPrefs* temp = commonprefs_;
  commonprefs_ = nullptr;
  return temp;
}
inline ::simData::CommonPrefs* ProjectorPrefs::_internal_mutable_commonprefs() {
  _has_bits_[0] |= 0x00000002u;
  if (commonprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::CommonPrefs>(GetArena());
    commonprefs_ = p;
  }
  return commonprefs_;
}
inline ::simData::CommonPrefs* ProjectorPrefs::mutable_commonprefs() {
  // @@protoc_insertion_point(field_mutable:simData.ProjectorPrefs.commonPrefs)
  return _internal_mutable_commonprefs();
}
inline void ProjectorPrefs::set_allocated_commonprefs(::simData::CommonPrefs* commonprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete commonprefs_;
  }
  if (commonprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(commonprefs);
    if (message_arena != submessage_arena) {
      commonprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commonprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  commonprefs_ = commonprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.ProjectorPrefs.commonPrefs)
}

// optional string rasterFile = 2;
inline bool ProjectorPrefs::_internal_has_rasterfile() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProjectorPrefs::has_rasterfile() const {
  return _internal_has_rasterfile();
}
inline void ProjectorPrefs::clear_rasterfile() {
  rasterfile_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProjectorPrefs::rasterfile() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorPrefs.rasterFile)
  return _internal_rasterfile();
}
inline void ProjectorPrefs::set_rasterfile(const std::string& value) {
  _internal_set_rasterfile(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorPrefs.rasterFile)
}
inline std::string* ProjectorPrefs::mutable_rasterfile() {
  // @@protoc_insertion_point(field_mutable:simData.ProjectorPrefs.rasterFile)
  return _internal_mutable_rasterfile();
}
inline const std::string& ProjectorPrefs::_internal_rasterfile() const {
  return rasterfile_.Get();
}
inline void ProjectorPrefs::_internal_set_rasterfile(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rasterfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProjectorPrefs::set_rasterfile(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rasterfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.ProjectorPrefs.rasterFile)
}
inline void ProjectorPrefs::set_rasterfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rasterfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.ProjectorPrefs.rasterFile)
}
inline void ProjectorPrefs::set_rasterfile(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rasterfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.ProjectorPrefs.rasterFile)
}
inline std::string* ProjectorPrefs::_internal_mutable_rasterfile() {
  _has_bits_[0] |= 0x00000001u;
  return rasterfile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProjectorPrefs::release_rasterfile() {
  // @@protoc_insertion_point(field_release:simData.ProjectorPrefs.rasterFile)
  if (!_internal_has_rasterfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rasterfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProjectorPrefs::set_allocated_rasterfile(std::string* rasterfile) {
  if (rasterfile != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rasterfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rasterfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.ProjectorPrefs.rasterFile)
}

// optional bool showFrustum = 3 [default = false];
inline bool ProjectorPrefs::_internal_has_showfrustum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProjectorPrefs::has_showfrustum() const {
  return _internal_has_showfrustum();
}
inline void ProjectorPrefs::clear_showfrustum() {
  showfrustum_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ProjectorPrefs::_internal_showfrustum() const {
  return showfrustum_;
}
inline bool ProjectorPrefs::showfrustum() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorPrefs.showFrustum)
  return _internal_showfrustum();
}
inline void ProjectorPrefs::_internal_set_showfrustum(bool value) {
  _has_bits_[0] |= 0x00000004u;
  showfrustum_ = value;
}
inline void ProjectorPrefs::set_showfrustum(bool value) {
  _internal_set_showfrustum(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorPrefs.showFrustum)
}

// optional float projectorAlpha = 4 [default = 1];
inline bool ProjectorPrefs::_internal_has_projectoralpha() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ProjectorPrefs::has_projectoralpha() const {
  return _internal_has_projectoralpha();
}
inline void ProjectorPrefs::clear_projectoralpha() {
  projectoralpha_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ProjectorPrefs::_internal_projectoralpha() const {
  return projectoralpha_;
}
inline float ProjectorPrefs::projectoralpha() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorPrefs.projectorAlpha)
  return _internal_projectoralpha();
}
inline void ProjectorPrefs::_internal_set_projectoralpha(float value) {
  _has_bits_[0] |= 0x00000080u;
  projectoralpha_ = value;
}
inline void ProjectorPrefs::set_projectoralpha(float value) {
  _internal_set_projectoralpha(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorPrefs.projectorAlpha)
}

// optional bool interpolateProjectorFov = 5 [default = true];
inline bool ProjectorPrefs::_internal_has_interpolateprojectorfov() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ProjectorPrefs::has_interpolateprojectorfov() const {
  return _internal_has_interpolateprojectorfov();
}
inline void ProjectorPrefs::clear_interpolateprojectorfov() {
  interpolateprojectorfov_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ProjectorPrefs::_internal_interpolateprojectorfov() const {
  return interpolateprojectorfov_;
}
inline bool ProjectorPrefs::interpolateprojectorfov() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorPrefs.interpolateProjectorFov)
  return _internal_interpolateprojectorfov();
}
inline void ProjectorPrefs::_internal_set_interpolateprojectorfov(bool value) {
  _has_bits_[0] |= 0x00000100u;
  interpolateprojectorfov_ = value;
}
inline void ProjectorPrefs::set_interpolateprojectorfov(bool value) {
  _internal_set_interpolateprojectorfov(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorPrefs.interpolateProjectorFov)
}

// optional bool overrideFov = 6 [default = false];
inline bool ProjectorPrefs::_internal_has_overridefov() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProjectorPrefs::has_overridefov() const {
  return _internal_has_overridefov();
}
inline void ProjectorPrefs::clear_overridefov() {
  overridefov_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ProjectorPrefs::_internal_overridefov() const {
  return overridefov_;
}
inline bool ProjectorPrefs::overridefov() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorPrefs.overrideFov)
  return _internal_overridefov();
}
inline void ProjectorPrefs::_internal_set_overridefov(bool value) {
  _has_bits_[0] |= 0x00000008u;
  overridefov_ = value;
}
inline void ProjectorPrefs::set_overridefov(bool value) {
  _internal_set_overridefov(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorPrefs.overrideFov)
}

// optional double overrideFovAngle = 7 [default = 0.174533];
inline bool ProjectorPrefs::_internal_has_overridefovangle() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ProjectorPrefs::has_overridefovangle() const {
  return _internal_has_overridefovangle();
}
inline void ProjectorPrefs::clear_overridefovangle() {
  overridefovangle_ = 0.174533;
  _has_bits_[0] &= ~0x00000200u;
}
inline double ProjectorPrefs::_internal_overridefovangle() const {
  return overridefovangle_;
}
inline double ProjectorPrefs::overridefovangle() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorPrefs.overrideFovAngle)
  return _internal_overridefovangle();
}
inline void ProjectorPrefs::_internal_set_overridefovangle(double value) {
  _has_bits_[0] |= 0x00000200u;
  overridefovangle_ = value;
}
inline void ProjectorPrefs::set_overridefovangle(double value) {
  _internal_set_overridefovangle(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorPrefs.overrideFovAngle)
}

// optional bool shadowMapping = 8 [default = false];
inline bool ProjectorPrefs::_internal_has_shadowmapping() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProjectorPrefs::has_shadowmapping() const {
  return _internal_has_shadowmapping();
}
inline void ProjectorPrefs::clear_shadowmapping() {
  shadowmapping_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ProjectorPrefs::_internal_shadowmapping() const {
  return shadowmapping_;
}
inline bool ProjectorPrefs::shadowmapping() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorPrefs.shadowMapping)
  return _internal_shadowmapping();
}
inline void ProjectorPrefs::_internal_set_shadowmapping(bool value) {
  _has_bits_[0] |= 0x00000010u;
  shadowmapping_ = value;
}
inline void ProjectorPrefs::set_shadowmapping(bool value) {
  _internal_set_shadowmapping(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorPrefs.shadowMapping)
}

// optional float maxDrawRange = 9 [default = 0];
inline bool ProjectorPrefs::_internal_has_maxdrawrange() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ProjectorPrefs::has_maxdrawrange() const {
  return _internal_has_maxdrawrange();
}
inline void ProjectorPrefs::clear_maxdrawrange() {
  maxdrawrange_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ProjectorPrefs::_internal_maxdrawrange() const {
  return maxdrawrange_;
}
inline float ProjectorPrefs::maxdrawrange() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorPrefs.maxDrawRange)
  return _internal_maxdrawrange();
}
inline void ProjectorPrefs::_internal_set_maxdrawrange(float value) {
  _has_bits_[0] |= 0x00000040u;
  maxdrawrange_ = value;
}
inline void ProjectorPrefs::set_maxdrawrange(float value) {
  _internal_set_maxdrawrange(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorPrefs.maxDrawRange)
}

// optional bool doubleSided = 10 [default = false];
inline bool ProjectorPrefs::_internal_has_doublesided() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProjectorPrefs::has_doublesided() const {
  return _internal_has_doublesided();
}
inline void ProjectorPrefs::clear_doublesided() {
  doublesided_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ProjectorPrefs::_internal_doublesided() const {
  return doublesided_;
}
inline bool ProjectorPrefs::doublesided() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorPrefs.doubleSided)
  return _internal_doublesided();
}
inline void ProjectorPrefs::_internal_set_doublesided(bool value) {
  _has_bits_[0] |= 0x00000020u;
  doublesided_ = value;
}
inline void ProjectorPrefs::set_doublesided(bool value) {
  _internal_set_doublesided(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorPrefs.doubleSided)
}

// -------------------------------------------------------------------

// ProjectorUpdate

// optional double time = 1;
inline bool ProjectorUpdate::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProjectorUpdate::has_time() const {
  return _internal_has_time();
}
inline void ProjectorUpdate::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double ProjectorUpdate::_internal_time() const {
  return time_;
}
inline double ProjectorUpdate::time() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorUpdate.time)
  return _internal_time();
}
inline void ProjectorUpdate::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void ProjectorUpdate::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorUpdate.time)
}

// optional double fov = 2;
inline bool ProjectorUpdate::_internal_has_fov() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProjectorUpdate::has_fov() const {
  return _internal_has_fov();
}
inline void ProjectorUpdate::clear_fov() {
  fov_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ProjectorUpdate::_internal_fov() const {
  return fov_;
}
inline double ProjectorUpdate::fov() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorUpdate.fov)
  return _internal_fov();
}
inline void ProjectorUpdate::_internal_set_fov(double value) {
  _has_bits_[0] |= 0x00000002u;
  fov_ = value;
}
inline void ProjectorUpdate::set_fov(double value) {
  _internal_set_fov(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorUpdate.fov)
}

// -------------------------------------------------------------------

// ProjectorCommand

// optional double time = 1;
inline bool ProjectorCommand::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProjectorCommand::has_time() const {
  return _internal_has_time();
}
inline void ProjectorCommand::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ProjectorCommand::_internal_time() const {
  return time_;
}
inline double ProjectorCommand::time() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorCommand.time)
  return _internal_time();
}
inline void ProjectorCommand::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void ProjectorCommand::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorCommand.time)
}

// optional .simData.ProjectorPrefs updatePrefs = 2;
inline bool ProjectorCommand::_internal_has_updateprefs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || updateprefs_ != nullptr);
  return value;
}
inline bool ProjectorCommand::has_updateprefs() const {
  return _internal_has_updateprefs();
}
inline void ProjectorCommand::clear_updateprefs() {
  if (updateprefs_ != nullptr) updateprefs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::simData::ProjectorPrefs& ProjectorCommand::_internal_updateprefs() const {
  const ::simData::ProjectorPrefs* p = updateprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::ProjectorPrefs&>(
      ::simData::_ProjectorPrefs_default_instance_);
}
inline const ::simData::ProjectorPrefs& ProjectorCommand::updateprefs() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorCommand.updatePrefs)
  return _internal_updateprefs();
}
inline void ProjectorCommand::unsafe_arena_set_allocated_updateprefs(
    ::simData::ProjectorPrefs* updateprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updateprefs_);
  }
  updateprefs_ = updateprefs;
  if (updateprefs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.ProjectorCommand.updatePrefs)
}
inline ::simData::ProjectorPrefs* ProjectorCommand::release_updateprefs() {
  _has_bits_[0] &= ~0x00000001u;
  ::simData::ProjectorPrefs* temp = updateprefs_;
  updateprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::ProjectorPrefs* ProjectorCommand::unsafe_arena_release_updateprefs() {
  // @@protoc_insertion_point(field_release:simData.ProjectorCommand.updatePrefs)
  _has_bits_[0] &= ~0x00000001u;
  ::simData::ProjectorPrefs* temp = updateprefs_;
  updateprefs_ = nullptr;
  return temp;
}
inline ::simData::ProjectorPrefs* ProjectorCommand::_internal_mutable_updateprefs() {
  _has_bits_[0] |= 0x00000001u;
  if (updateprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::ProjectorPrefs>(GetArena());
    updateprefs_ = p;
  }
  return updateprefs_;
}
inline ::simData::ProjectorPrefs* ProjectorCommand::mutable_updateprefs() {
  // @@protoc_insertion_point(field_mutable:simData.ProjectorCommand.updatePrefs)
  return _internal_mutable_updateprefs();
}
inline void ProjectorCommand::set_allocated_updateprefs(::simData::ProjectorPrefs* updateprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updateprefs_;
  }
  if (updateprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updateprefs);
    if (message_arena != submessage_arena) {
      updateprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  updateprefs_ = updateprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.ProjectorCommand.updatePrefs)
}

// optional bool isClearCommand = 3 [default = false];
inline bool ProjectorCommand::_internal_has_isclearcommand() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProjectorCommand::has_isclearcommand() const {
  return _internal_has_isclearcommand();
}
inline void ProjectorCommand::clear_isclearcommand() {
  isclearcommand_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ProjectorCommand::_internal_isclearcommand() const {
  return isclearcommand_;
}
inline bool ProjectorCommand::isclearcommand() const {
  // @@protoc_insertion_point(field_get:simData.ProjectorCommand.isClearCommand)
  return _internal_isclearcommand();
}
inline void ProjectorCommand::_internal_set_isclearcommand(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isclearcommand_ = value;
}
inline void ProjectorCommand::set_isclearcommand(bool value) {
  _internal_set_isclearcommand(value);
  // @@protoc_insertion_point(field_set:simData.ProjectorCommand.isClearCommand)
}

// -------------------------------------------------------------------

// LobGroupProperties

// optional uint64 id = 1;
inline bool LobGroupProperties::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LobGroupProperties::has_id() const {
  return _internal_has_id();
}
inline void LobGroupProperties::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LobGroupProperties::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LobGroupProperties::id() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupProperties.id)
  return _internal_id();
}
inline void LobGroupProperties::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void LobGroupProperties::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupProperties.id)
}

// optional uint64 hostId = 2;
inline bool LobGroupProperties::_internal_has_hostid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LobGroupProperties::has_hostid() const {
  return _internal_has_hostid();
}
inline void LobGroupProperties::clear_hostid() {
  hostid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LobGroupProperties::_internal_hostid() const {
  return hostid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LobGroupProperties::hostid() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupProperties.hostId)
  return _internal_hostid();
}
inline void LobGroupProperties::_internal_set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  hostid_ = value;
}
inline void LobGroupProperties::set_hostid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hostid(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupProperties.hostId)
}

// optional uint64 originalId = 3;
inline bool LobGroupProperties::_internal_has_originalid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LobGroupProperties::has_originalid() const {
  return _internal_has_originalid();
}
inline void LobGroupProperties::clear_originalid() {
  originalid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LobGroupProperties::_internal_originalid() const {
  return originalid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LobGroupProperties::originalid() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupProperties.originalId)
  return _internal_originalid();
}
inline void LobGroupProperties::_internal_set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  originalid_ = value;
}
inline void LobGroupProperties::set_originalid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_originalid(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupProperties.originalId)
}

// optional string source = 4;
inline bool LobGroupProperties::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LobGroupProperties::has_source() const {
  return _internal_has_source();
}
inline void LobGroupProperties::clear_source() {
  source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LobGroupProperties::source() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupProperties.source)
  return _internal_source();
}
inline void LobGroupProperties::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupProperties.source)
}
inline std::string* LobGroupProperties::mutable_source() {
  // @@protoc_insertion_point(field_mutable:simData.LobGroupProperties.source)
  return _internal_mutable_source();
}
inline const std::string& LobGroupProperties::_internal_source() const {
  return source_.Get();
}
inline void LobGroupProperties::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LobGroupProperties::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.LobGroupProperties.source)
}
inline void LobGroupProperties::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.LobGroupProperties.source)
}
inline void LobGroupProperties::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.LobGroupProperties.source)
}
inline std::string* LobGroupProperties::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LobGroupProperties::release_source() {
  // @@protoc_insertion_point(field_release:simData.LobGroupProperties.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LobGroupProperties::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.LobGroupProperties.source)
}

// optional .simData.CoordinateSystem coordinateSystem = 5;
inline bool LobGroupProperties::_internal_has_coordinatesystem() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LobGroupProperties::has_coordinatesystem() const {
  return _internal_has_coordinatesystem();
}
inline void LobGroupProperties::clear_coordinatesystem() {
  coordinatesystem_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::simData::CoordinateSystem LobGroupProperties::_internal_coordinatesystem() const {
  return static_cast< ::simData::CoordinateSystem >(coordinatesystem_);
}
inline ::simData::CoordinateSystem LobGroupProperties::coordinatesystem() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupProperties.coordinateSystem)
  return _internal_coordinatesystem();
}
inline void LobGroupProperties::_internal_set_coordinatesystem(::simData::CoordinateSystem value) {
  assert(::simData::CoordinateSystem_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  coordinatesystem_ = value;
}
inline void LobGroupProperties::set_coordinatesystem(::simData::CoordinateSystem value) {
  _internal_set_coordinatesystem(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupProperties.coordinateSystem)
}

// optional bool azElRelativeToHostOri = 6;
inline bool LobGroupProperties::_internal_has_azelrelativetohostori() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LobGroupProperties::has_azelrelativetohostori() const {
  return _internal_has_azelrelativetohostori();
}
inline void LobGroupProperties::clear_azelrelativetohostori() {
  azelrelativetohostori_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LobGroupProperties::_internal_azelrelativetohostori() const {
  return azelrelativetohostori_;
}
inline bool LobGroupProperties::azelrelativetohostori() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupProperties.azElRelativeToHostOri)
  return _internal_azelrelativetohostori();
}
inline void LobGroupProperties::_internal_set_azelrelativetohostori(bool value) {
  _has_bits_[0] |= 0x00000010u;
  azelrelativetohostori_ = value;
}
inline void LobGroupProperties::set_azelrelativetohostori(bool value) {
  _internal_set_azelrelativetohostori(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupProperties.azElRelativeToHostOri)
}

// -------------------------------------------------------------------

// LobGroupPrefs

// optional .simData.CommonPrefs commonPrefs = 1;
inline bool LobGroupPrefs::_internal_has_commonprefs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || commonprefs_ != nullptr);
  return value;
}
inline bool LobGroupPrefs::has_commonprefs() const {
  return _internal_has_commonprefs();
}
inline void LobGroupPrefs::clear_commonprefs() {
  if (commonprefs_ != nullptr) commonprefs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::simData::CommonPrefs& LobGroupPrefs::_internal_commonprefs() const {
  const ::simData::CommonPrefs* p = commonprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::CommonPrefs&>(
      ::simData::_CommonPrefs_default_instance_);
}
inline const ::simData::CommonPrefs& LobGroupPrefs::commonprefs() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupPrefs.commonPrefs)
  return _internal_commonprefs();
}
inline void LobGroupPrefs::unsafe_arena_set_allocated_commonprefs(
    ::simData::CommonPrefs* commonprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commonprefs_);
  }
  commonprefs_ = commonprefs;
  if (commonprefs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LobGroupPrefs.commonPrefs)
}
inline ::simData::CommonPrefs* LobGroupPrefs::release_commonprefs() {
  _has_bits_[0] &= ~0x00000001u;
  ::simData::CommonPrefs* temp = commonprefs_;
  commonprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::CommonPrefs* LobGroupPrefs::unsafe_arena_release_commonprefs() {
  // @@protoc_insertion_point(field_release:simData.LobGroupPrefs.commonPrefs)
  _has_bits_[0] &= ~0x00000001u;
  ::simData::CommonPrefs* temp = commonprefs_;
  commonprefs_ = nullptr;
  return temp;
}
inline ::simData::CommonPrefs* LobGroupPrefs::_internal_mutable_commonprefs() {
  _has_bits_[0] |= 0x00000001u;
  if (commonprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::CommonPrefs>(GetArena());
    commonprefs_ = p;
  }
  return commonprefs_;
}
inline ::simData::CommonPrefs* LobGroupPrefs::mutable_commonprefs() {
  // @@protoc_insertion_point(field_mutable:simData.LobGroupPrefs.commonPrefs)
  return _internal_mutable_commonprefs();
}
inline void LobGroupPrefs::set_allocated_commonprefs(::simData::CommonPrefs* commonprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete commonprefs_;
  }
  if (commonprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(commonprefs);
    if (message_arena != submessage_arena) {
      commonprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commonprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  commonprefs_ = commonprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.LobGroupPrefs.commonPrefs)
}

// optional .simData.Position xyzOffset = 2;
inline bool LobGroupPrefs::_internal_has_xyzoffset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || xyzoffset_ != nullptr);
  return value;
}
inline bool LobGroupPrefs::has_xyzoffset() const {
  return _internal_has_xyzoffset();
}
inline void LobGroupPrefs::clear_xyzoffset() {
  if (xyzoffset_ != nullptr) xyzoffset_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::simData::Position& LobGroupPrefs::_internal_xyzoffset() const {
  const ::simData::Position* p = xyzoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::Position&>(
      ::simData::_Position_default_instance_);
}
inline const ::simData::Position& LobGroupPrefs::xyzoffset() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupPrefs.xyzOffset)
  return _internal_xyzoffset();
}
inline void LobGroupPrefs::unsafe_arena_set_allocated_xyzoffset(
    ::simData::Position* xyzoffset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xyzoffset_);
  }
  xyzoffset_ = xyzoffset;
  if (xyzoffset) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LobGroupPrefs.xyzOffset)
}
inline ::simData::Position* LobGroupPrefs::release_xyzoffset() {
  _has_bits_[0] &= ~0x00000002u;
  ::simData::Position* temp = xyzoffset_;
  xyzoffset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::Position* LobGroupPrefs::unsafe_arena_release_xyzoffset() {
  // @@protoc_insertion_point(field_release:simData.LobGroupPrefs.xyzOffset)
  _has_bits_[0] &= ~0x00000002u;
  ::simData::Position* temp = xyzoffset_;
  xyzoffset_ = nullptr;
  return temp;
}
inline ::simData::Position* LobGroupPrefs::_internal_mutable_xyzoffset() {
  _has_bits_[0] |= 0x00000002u;
  if (xyzoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::Position>(GetArena());
    xyzoffset_ = p;
  }
  return xyzoffset_;
}
inline ::simData::Position* LobGroupPrefs::mutable_xyzoffset() {
  // @@protoc_insertion_point(field_mutable:simData.LobGroupPrefs.xyzOffset)
  return _internal_mutable_xyzoffset();
}
inline void LobGroupPrefs::set_allocated_xyzoffset(::simData::Position* xyzoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete xyzoffset_;
  }
  if (xyzoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(xyzoffset);
    if (message_arena != submessage_arena) {
      xyzoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xyzoffset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  xyzoffset_ = xyzoffset;
  // @@protoc_insertion_point(field_set_allocated:simData.LobGroupPrefs.xyzOffset)
}

// optional int32 lobwidth = 3 [default = 2];
inline bool LobGroupPrefs::_internal_has_lobwidth() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LobGroupPrefs::has_lobwidth() const {
  return _internal_has_lobwidth();
}
inline void LobGroupPrefs::clear_lobwidth() {
  lobwidth_ = 2;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LobGroupPrefs::_internal_lobwidth() const {
  return lobwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LobGroupPrefs::lobwidth() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupPrefs.lobwidth)
  return _internal_lobwidth();
}
inline void LobGroupPrefs::_internal_set_lobwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  lobwidth_ = value;
}
inline void LobGroupPrefs::set_lobwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lobwidth(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupPrefs.lobwidth)
}

// optional fixed32 color1 = 4 [default = 16711935];
inline bool LobGroupPrefs::_internal_has_color1() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LobGroupPrefs::has_color1() const {
  return _internal_has_color1();
}
inline void LobGroupPrefs::clear_color1() {
  color1_ = 16711935u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LobGroupPrefs::_internal_color1() const {
  return color1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LobGroupPrefs::color1() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupPrefs.color1)
  return _internal_color1();
}
inline void LobGroupPrefs::_internal_set_color1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  color1_ = value;
}
inline void LobGroupPrefs::set_color1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color1(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupPrefs.color1)
}

// optional fixed32 color2 = 5 [default = 4278190335];
inline bool LobGroupPrefs::_internal_has_color2() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LobGroupPrefs::has_color2() const {
  return _internal_has_color2();
}
inline void LobGroupPrefs::clear_color2() {
  color2_ = 4278190335u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LobGroupPrefs::_internal_color2() const {
  return color2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LobGroupPrefs::color2() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupPrefs.color2)
  return _internal_color2();
}
inline void LobGroupPrefs::_internal_set_color2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  color2_ = value;
}
inline void LobGroupPrefs::set_color2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color2(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupPrefs.color2)
}

// optional uint32 stipple1 = 6 [default = 65280];
inline bool LobGroupPrefs::_internal_has_stipple1() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LobGroupPrefs::has_stipple1() const {
  return _internal_has_stipple1();
}
inline void LobGroupPrefs::clear_stipple1() {
  stipple1_ = 65280u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LobGroupPrefs::_internal_stipple1() const {
  return stipple1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LobGroupPrefs::stipple1() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupPrefs.stipple1)
  return _internal_stipple1();
}
inline void LobGroupPrefs::_internal_set_stipple1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  stipple1_ = value;
}
inline void LobGroupPrefs::set_stipple1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stipple1(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupPrefs.stipple1)
}

// optional uint32 stipple2 = 7 [default = 255];
inline bool LobGroupPrefs::_internal_has_stipple2() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LobGroupPrefs::has_stipple2() const {
  return _internal_has_stipple2();
}
inline void LobGroupPrefs::clear_stipple2() {
  stipple2_ = 255u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LobGroupPrefs::_internal_stipple2() const {
  return stipple2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LobGroupPrefs::stipple2() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupPrefs.stipple2)
  return _internal_stipple2();
}
inline void LobGroupPrefs::_internal_set_stipple2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  stipple2_ = value;
}
inline void LobGroupPrefs::set_stipple2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stipple2(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupPrefs.stipple2)
}

// optional double maxDataSeconds = 8 [default = 5];
inline bool LobGroupPrefs::_internal_has_maxdataseconds() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LobGroupPrefs::has_maxdataseconds() const {
  return _internal_has_maxdataseconds();
}
inline void LobGroupPrefs::clear_maxdataseconds() {
  maxdataseconds_ = 5;
  _has_bits_[0] &= ~0x00000200u;
}
inline double LobGroupPrefs::_internal_maxdataseconds() const {
  return maxdataseconds_;
}
inline double LobGroupPrefs::maxdataseconds() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupPrefs.maxDataSeconds)
  return _internal_maxdataseconds();
}
inline void LobGroupPrefs::_internal_set_maxdataseconds(double value) {
  _has_bits_[0] |= 0x00000200u;
  maxdataseconds_ = value;
}
inline void LobGroupPrefs::set_maxdataseconds(double value) {
  _internal_set_maxdataseconds(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupPrefs.maxDataSeconds)
}

// optional uint32 maxDataPoints = 9 [default = 10];
inline bool LobGroupPrefs::_internal_has_maxdatapoints() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LobGroupPrefs::has_maxdatapoints() const {
  return _internal_has_maxdatapoints();
}
inline void LobGroupPrefs::clear_maxdatapoints() {
  maxdatapoints_ = 10u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LobGroupPrefs::_internal_maxdatapoints() const {
  return maxdatapoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LobGroupPrefs::maxdatapoints() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupPrefs.maxDataPoints)
  return _internal_maxdatapoints();
}
inline void LobGroupPrefs::_internal_set_maxdatapoints(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  maxdatapoints_ = value;
}
inline void LobGroupPrefs::set_maxdatapoints(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxdatapoints(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupPrefs.maxDataPoints)
}

// optional bool lobUseClampAlt = 10 [default = false];
inline bool LobGroupPrefs::_internal_has_lobuseclampalt() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LobGroupPrefs::has_lobuseclampalt() const {
  return _internal_has_lobuseclampalt();
}
inline void LobGroupPrefs::clear_lobuseclampalt() {
  lobuseclampalt_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool LobGroupPrefs::_internal_lobuseclampalt() const {
  return lobuseclampalt_;
}
inline bool LobGroupPrefs::lobuseclampalt() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupPrefs.lobUseClampAlt)
  return _internal_lobuseclampalt();
}
inline void LobGroupPrefs::_internal_set_lobuseclampalt(bool value) {
  _has_bits_[0] |= 0x00000004u;
  lobuseclampalt_ = value;
}
inline void LobGroupPrefs::set_lobuseclampalt(bool value) {
  _internal_set_lobuseclampalt(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupPrefs.lobUseClampAlt)
}

// optional bool useRangeOverride = 11 [default = false];
inline bool LobGroupPrefs::_internal_has_userangeoverride() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LobGroupPrefs::has_userangeoverride() const {
  return _internal_has_userangeoverride();
}
inline void LobGroupPrefs::clear_userangeoverride() {
  userangeoverride_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool LobGroupPrefs::_internal_userangeoverride() const {
  return userangeoverride_;
}
inline bool LobGroupPrefs::userangeoverride() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupPrefs.useRangeOverride)
  return _internal_userangeoverride();
}
inline void LobGroupPrefs::_internal_set_userangeoverride(bool value) {
  _has_bits_[0] |= 0x00000008u;
  userangeoverride_ = value;
}
inline void LobGroupPrefs::set_userangeoverride(bool value) {
  _internal_set_userangeoverride(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupPrefs.useRangeOverride)
}

// optional double rangeOverrideValue = 12 [default = 1000];
inline bool LobGroupPrefs::_internal_has_rangeoverridevalue() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LobGroupPrefs::has_rangeoverridevalue() const {
  return _internal_has_rangeoverridevalue();
}
inline void LobGroupPrefs::clear_rangeoverridevalue() {
  rangeoverridevalue_ = 1000;
  _has_bits_[0] &= ~0x00001000u;
}
inline double LobGroupPrefs::_internal_rangeoverridevalue() const {
  return rangeoverridevalue_;
}
inline double LobGroupPrefs::rangeoverridevalue() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupPrefs.rangeOverrideValue)
  return _internal_rangeoverridevalue();
}
inline void LobGroupPrefs::_internal_set_rangeoverridevalue(double value) {
  _has_bits_[0] |= 0x00001000u;
  rangeoverridevalue_ = value;
}
inline void LobGroupPrefs::set_rangeoverridevalue(double value) {
  _internal_set_rangeoverridevalue(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupPrefs.rangeOverrideValue)
}

// optional .simData.AnimatedLineBend bending = 13 [default = ALB_AUTO];
inline bool LobGroupPrefs::_internal_has_bending() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LobGroupPrefs::has_bending() const {
  return _internal_has_bending();
}
inline void LobGroupPrefs::clear_bending() {
  bending_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::simData::AnimatedLineBend LobGroupPrefs::_internal_bending() const {
  return static_cast< ::simData::AnimatedLineBend >(bending_);
}
inline ::simData::AnimatedLineBend LobGroupPrefs::bending() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupPrefs.bending)
  return _internal_bending();
}
inline void LobGroupPrefs::_internal_set_bending(::simData::AnimatedLineBend value) {
  assert(::simData::AnimatedLineBend_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  bending_ = value;
}
inline void LobGroupPrefs::set_bending(::simData::AnimatedLineBend value) {
  _internal_set_bending(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupPrefs.bending)
}

// -------------------------------------------------------------------

// LobGroupUpdatePoint

// optional double time = 1;
inline bool LobGroupUpdatePoint::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LobGroupUpdatePoint::has_time() const {
  return _internal_has_time();
}
inline void LobGroupUpdatePoint::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LobGroupUpdatePoint::_internal_time() const {
  return time_;
}
inline double LobGroupUpdatePoint::time() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupUpdatePoint.time)
  return _internal_time();
}
inline void LobGroupUpdatePoint::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void LobGroupUpdatePoint::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupUpdatePoint.time)
}

// optional double range = 2;
inline bool LobGroupUpdatePoint::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LobGroupUpdatePoint::has_range() const {
  return _internal_has_range();
}
inline void LobGroupUpdatePoint::clear_range() {
  range_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LobGroupUpdatePoint::_internal_range() const {
  return range_;
}
inline double LobGroupUpdatePoint::range() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupUpdatePoint.range)
  return _internal_range();
}
inline void LobGroupUpdatePoint::_internal_set_range(double value) {
  _has_bits_[0] |= 0x00000002u;
  range_ = value;
}
inline void LobGroupUpdatePoint::set_range(double value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupUpdatePoint.range)
}

// optional double azimuth = 3;
inline bool LobGroupUpdatePoint::_internal_has_azimuth() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LobGroupUpdatePoint::has_azimuth() const {
  return _internal_has_azimuth();
}
inline void LobGroupUpdatePoint::clear_azimuth() {
  azimuth_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double LobGroupUpdatePoint::_internal_azimuth() const {
  return azimuth_;
}
inline double LobGroupUpdatePoint::azimuth() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupUpdatePoint.azimuth)
  return _internal_azimuth();
}
inline void LobGroupUpdatePoint::_internal_set_azimuth(double value) {
  _has_bits_[0] |= 0x00000004u;
  azimuth_ = value;
}
inline void LobGroupUpdatePoint::set_azimuth(double value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupUpdatePoint.azimuth)
}

// optional double elevation = 4;
inline bool LobGroupUpdatePoint::_internal_has_elevation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LobGroupUpdatePoint::has_elevation() const {
  return _internal_has_elevation();
}
inline void LobGroupUpdatePoint::clear_elevation() {
  elevation_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double LobGroupUpdatePoint::_internal_elevation() const {
  return elevation_;
}
inline double LobGroupUpdatePoint::elevation() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupUpdatePoint.elevation)
  return _internal_elevation();
}
inline void LobGroupUpdatePoint::_internal_set_elevation(double value) {
  _has_bits_[0] |= 0x00000008u;
  elevation_ = value;
}
inline void LobGroupUpdatePoint::set_elevation(double value) {
  _internal_set_elevation(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupUpdatePoint.elevation)
}

// -------------------------------------------------------------------

// LobGroupUpdate

// optional double time = 1;
inline bool LobGroupUpdate::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LobGroupUpdate::has_time() const {
  return _internal_has_time();
}
inline void LobGroupUpdate::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LobGroupUpdate::_internal_time() const {
  return time_;
}
inline double LobGroupUpdate::time() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupUpdate.time)
  return _internal_time();
}
inline void LobGroupUpdate::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void LobGroupUpdate::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupUpdate.time)
}

// repeated .simData.LobGroupUpdatePoint dataPoints = 2;
inline int LobGroupUpdate::_internal_datapoints_size() const {
  return datapoints_.size();
}
inline int LobGroupUpdate::datapoints_size() const {
  return _internal_datapoints_size();
}
inline void LobGroupUpdate::clear_datapoints() {
  datapoints_.Clear();
}
inline ::simData::LobGroupUpdatePoint* LobGroupUpdate::mutable_datapoints(int index) {
  // @@protoc_insertion_point(field_mutable:simData.LobGroupUpdate.dataPoints)
  return datapoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::LobGroupUpdatePoint >*
LobGroupUpdate::mutable_datapoints() {
  // @@protoc_insertion_point(field_mutable_list:simData.LobGroupUpdate.dataPoints)
  return &datapoints_;
}
inline const ::simData::LobGroupUpdatePoint& LobGroupUpdate::_internal_datapoints(int index) const {
  return datapoints_.Get(index);
}
inline const ::simData::LobGroupUpdatePoint& LobGroupUpdate::datapoints(int index) const {
  // @@protoc_insertion_point(field_get:simData.LobGroupUpdate.dataPoints)
  return _internal_datapoints(index);
}
inline ::simData::LobGroupUpdatePoint* LobGroupUpdate::_internal_add_datapoints() {
  return datapoints_.Add();
}
inline ::simData::LobGroupUpdatePoint* LobGroupUpdate::add_datapoints() {
  // @@protoc_insertion_point(field_add:simData.LobGroupUpdate.dataPoints)
  return _internal_add_datapoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::LobGroupUpdatePoint >&
LobGroupUpdate::datapoints() const {
  // @@protoc_insertion_point(field_list:simData.LobGroupUpdate.dataPoints)
  return datapoints_;
}

// -------------------------------------------------------------------

// LobGroupCommand

// optional double time = 1;
inline bool LobGroupCommand::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LobGroupCommand::has_time() const {
  return _internal_has_time();
}
inline void LobGroupCommand::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LobGroupCommand::_internal_time() const {
  return time_;
}
inline double LobGroupCommand::time() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupCommand.time)
  return _internal_time();
}
inline void LobGroupCommand::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void LobGroupCommand::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupCommand.time)
}

// optional .simData.LobGroupPrefs updatePrefs = 2;
inline bool LobGroupCommand::_internal_has_updateprefs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || updateprefs_ != nullptr);
  return value;
}
inline bool LobGroupCommand::has_updateprefs() const {
  return _internal_has_updateprefs();
}
inline void LobGroupCommand::clear_updateprefs() {
  if (updateprefs_ != nullptr) updateprefs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::simData::LobGroupPrefs& LobGroupCommand::_internal_updateprefs() const {
  const ::simData::LobGroupPrefs* p = updateprefs_;
  return p != nullptr ? *p : reinterpret_cast<const ::simData::LobGroupPrefs&>(
      ::simData::_LobGroupPrefs_default_instance_);
}
inline const ::simData::LobGroupPrefs& LobGroupCommand::updateprefs() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupCommand.updatePrefs)
  return _internal_updateprefs();
}
inline void LobGroupCommand::unsafe_arena_set_allocated_updateprefs(
    ::simData::LobGroupPrefs* updateprefs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updateprefs_);
  }
  updateprefs_ = updateprefs;
  if (updateprefs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:simData.LobGroupCommand.updatePrefs)
}
inline ::simData::LobGroupPrefs* LobGroupCommand::release_updateprefs() {
  _has_bits_[0] &= ~0x00000001u;
  ::simData::LobGroupPrefs* temp = updateprefs_;
  updateprefs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::simData::LobGroupPrefs* LobGroupCommand::unsafe_arena_release_updateprefs() {
  // @@protoc_insertion_point(field_release:simData.LobGroupCommand.updatePrefs)
  _has_bits_[0] &= ~0x00000001u;
  ::simData::LobGroupPrefs* temp = updateprefs_;
  updateprefs_ = nullptr;
  return temp;
}
inline ::simData::LobGroupPrefs* LobGroupCommand::_internal_mutable_updateprefs() {
  _has_bits_[0] |= 0x00000001u;
  if (updateprefs_ == nullptr) {
    auto* p = CreateMaybeMessage<::simData::LobGroupPrefs>(GetArena());
    updateprefs_ = p;
  }
  return updateprefs_;
}
inline ::simData::LobGroupPrefs* LobGroupCommand::mutable_updateprefs() {
  // @@protoc_insertion_point(field_mutable:simData.LobGroupCommand.updatePrefs)
  return _internal_mutable_updateprefs();
}
inline void LobGroupCommand::set_allocated_updateprefs(::simData::LobGroupPrefs* updateprefs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updateprefs_;
  }
  if (updateprefs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updateprefs);
    if (message_arena != submessage_arena) {
      updateprefs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateprefs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  updateprefs_ = updateprefs;
  // @@protoc_insertion_point(field_set_allocated:simData.LobGroupCommand.updatePrefs)
}

// optional bool isClearCommand = 3 [default = false];
inline bool LobGroupCommand::_internal_has_isclearcommand() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LobGroupCommand::has_isclearcommand() const {
  return _internal_has_isclearcommand();
}
inline void LobGroupCommand::clear_isclearcommand() {
  isclearcommand_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool LobGroupCommand::_internal_isclearcommand() const {
  return isclearcommand_;
}
inline bool LobGroupCommand::isclearcommand() const {
  // @@protoc_insertion_point(field_get:simData.LobGroupCommand.isClearCommand)
  return _internal_isclearcommand();
}
inline void LobGroupCommand::_internal_set_isclearcommand(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isclearcommand_ = value;
}
inline void LobGroupCommand::set_isclearcommand(bool value) {
  _internal_set_isclearcommand(value);
  // @@protoc_insertion_point(field_set:simData.LobGroupCommand.isClearCommand)
}

// -------------------------------------------------------------------

// CategoryData_Entry

// optional string key = 1;
inline bool CategoryData_Entry::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CategoryData_Entry::has_key() const {
  return _internal_has_key();
}
inline void CategoryData_Entry::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CategoryData_Entry::key() const {
  // @@protoc_insertion_point(field_get:simData.CategoryData.Entry.key)
  return _internal_key();
}
inline void CategoryData_Entry::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:simData.CategoryData.Entry.key)
}
inline std::string* CategoryData_Entry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:simData.CategoryData.Entry.key)
  return _internal_mutable_key();
}
inline const std::string& CategoryData_Entry::_internal_key() const {
  return key_.Get();
}
inline void CategoryData_Entry::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CategoryData_Entry::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.CategoryData.Entry.key)
}
inline void CategoryData_Entry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.CategoryData.Entry.key)
}
inline void CategoryData_Entry::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.CategoryData.Entry.key)
}
inline std::string* CategoryData_Entry::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CategoryData_Entry::release_key() {
  // @@protoc_insertion_point(field_release:simData.CategoryData.Entry.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CategoryData_Entry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.CategoryData.Entry.key)
}

// optional string value = 2;
inline bool CategoryData_Entry::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CategoryData_Entry::has_value() const {
  return _internal_has_value();
}
inline void CategoryData_Entry::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CategoryData_Entry::value() const {
  // @@protoc_insertion_point(field_get:simData.CategoryData.Entry.value)
  return _internal_value();
}
inline void CategoryData_Entry::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:simData.CategoryData.Entry.value)
}
inline std::string* CategoryData_Entry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:simData.CategoryData.Entry.value)
  return _internal_mutable_value();
}
inline const std::string& CategoryData_Entry::_internal_value() const {
  return value_.Get();
}
inline void CategoryData_Entry::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CategoryData_Entry::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.CategoryData.Entry.value)
}
inline void CategoryData_Entry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.CategoryData.Entry.value)
}
inline void CategoryData_Entry::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.CategoryData.Entry.value)
}
inline std::string* CategoryData_Entry::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CategoryData_Entry::release_value() {
  // @@protoc_insertion_point(field_release:simData.CategoryData.Entry.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CategoryData_Entry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.CategoryData.Entry.value)
}

// -------------------------------------------------------------------

// CategoryData

// optional double time = 1;
inline bool CategoryData::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CategoryData::has_time() const {
  return _internal_has_time();
}
inline void CategoryData::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double CategoryData::_internal_time() const {
  return time_;
}
inline double CategoryData::time() const {
  // @@protoc_insertion_point(field_get:simData.CategoryData.time)
  return _internal_time();
}
inline void CategoryData::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void CategoryData::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.CategoryData.time)
}

// repeated .simData.CategoryData.Entry entry = 2;
inline int CategoryData::_internal_entry_size() const {
  return entry_.size();
}
inline int CategoryData::entry_size() const {
  return _internal_entry_size();
}
inline void CategoryData::clear_entry() {
  entry_.Clear();
}
inline ::simData::CategoryData_Entry* CategoryData::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:simData.CategoryData.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::CategoryData_Entry >*
CategoryData::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:simData.CategoryData.entry)
  return &entry_;
}
inline const ::simData::CategoryData_Entry& CategoryData::_internal_entry(int index) const {
  return entry_.Get(index);
}
inline const ::simData::CategoryData_Entry& CategoryData::entry(int index) const {
  // @@protoc_insertion_point(field_get:simData.CategoryData.entry)
  return _internal_entry(index);
}
inline ::simData::CategoryData_Entry* CategoryData::_internal_add_entry() {
  return entry_.Add();
}
inline ::simData::CategoryData_Entry* CategoryData::add_entry() {
  // @@protoc_insertion_point(field_add:simData.CategoryData.entry)
  return _internal_add_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::CategoryData_Entry >&
CategoryData::entry() const {
  // @@protoc_insertion_point(field_list:simData.CategoryData.entry)
  return entry_;
}

// -------------------------------------------------------------------

// GenericData_Entry

// optional string key = 2;
inline bool GenericData_Entry::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GenericData_Entry::has_key() const {
  return _internal_has_key();
}
inline void GenericData_Entry::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GenericData_Entry::key() const {
  // @@protoc_insertion_point(field_get:simData.GenericData.Entry.key)
  return _internal_key();
}
inline void GenericData_Entry::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:simData.GenericData.Entry.key)
}
inline std::string* GenericData_Entry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:simData.GenericData.Entry.key)
  return _internal_mutable_key();
}
inline const std::string& GenericData_Entry::_internal_key() const {
  return key_.Get();
}
inline void GenericData_Entry::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenericData_Entry::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.GenericData.Entry.key)
}
inline void GenericData_Entry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.GenericData.Entry.key)
}
inline void GenericData_Entry::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.GenericData.Entry.key)
}
inline std::string* GenericData_Entry::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenericData_Entry::release_key() {
  // @@protoc_insertion_point(field_release:simData.GenericData.Entry.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenericData_Entry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.GenericData.Entry.key)
}

// optional string value = 3;
inline bool GenericData_Entry::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GenericData_Entry::has_value() const {
  return _internal_has_value();
}
inline void GenericData_Entry::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GenericData_Entry::value() const {
  // @@protoc_insertion_point(field_get:simData.GenericData.Entry.value)
  return _internal_value();
}
inline void GenericData_Entry::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:simData.GenericData.Entry.value)
}
inline std::string* GenericData_Entry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:simData.GenericData.Entry.value)
  return _internal_mutable_value();
}
inline const std::string& GenericData_Entry::_internal_value() const {
  return value_.Get();
}
inline void GenericData_Entry::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenericData_Entry::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:simData.GenericData.Entry.value)
}
inline void GenericData_Entry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:simData.GenericData.Entry.value)
}
inline void GenericData_Entry::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:simData.GenericData.Entry.value)
}
inline std::string* GenericData_Entry::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenericData_Entry::release_value() {
  // @@protoc_insertion_point(field_release:simData.GenericData.Entry.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenericData_Entry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:simData.GenericData.Entry.value)
}

// -------------------------------------------------------------------

// GenericData

// optional double time = 1;
inline bool GenericData::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GenericData::has_time() const {
  return _internal_has_time();
}
inline void GenericData::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double GenericData::_internal_time() const {
  return time_;
}
inline double GenericData::time() const {
  // @@protoc_insertion_point(field_get:simData.GenericData.time)
  return _internal_time();
}
inline void GenericData::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void GenericData::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:simData.GenericData.time)
}

// optional double duration = 2;
inline bool GenericData::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GenericData::has_duration() const {
  return _internal_has_duration();
}
inline void GenericData::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double GenericData::_internal_duration() const {
  return duration_;
}
inline double GenericData::duration() const {
  // @@protoc_insertion_point(field_get:simData.GenericData.duration)
  return _internal_duration();
}
inline void GenericData::_internal_set_duration(double value) {
  _has_bits_[0] |= 0x00000002u;
  duration_ = value;
}
inline void GenericData::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:simData.GenericData.duration)
}

// repeated .simData.GenericData.Entry entry = 3;
inline int GenericData::_internal_entry_size() const {
  return entry_.size();
}
inline int GenericData::entry_size() const {
  return _internal_entry_size();
}
inline void GenericData::clear_entry() {
  entry_.Clear();
}
inline ::simData::GenericData_Entry* GenericData::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:simData.GenericData.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::GenericData_Entry >*
GenericData::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:simData.GenericData.entry)
  return &entry_;
}
inline const ::simData::GenericData_Entry& GenericData::_internal_entry(int index) const {
  return entry_.Get(index);
}
inline const ::simData::GenericData_Entry& GenericData::entry(int index) const {
  // @@protoc_insertion_point(field_get:simData.GenericData.entry)
  return _internal_entry(index);
}
inline ::simData::GenericData_Entry* GenericData::_internal_add_entry() {
  return entry_.Add();
}
inline ::simData::GenericData_Entry* GenericData::add_entry() {
  // @@protoc_insertion_point(field_add:simData.GenericData.entry)
  return _internal_add_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simData::GenericData_Entry >&
GenericData::entry() const {
  // @@protoc_insertion_point(field_list:simData.GenericData.entry)
  return entry_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace simData

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::simData::TimeTickPrefs_DrawStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::TimeTickPrefs_DrawStyle>() {
  return ::simData::TimeTickPrefs_DrawStyle_descriptor();
}
template <> struct is_proto_enum< ::simData::TrackPrefs_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::TrackPrefs_Mode>() {
  return ::simData::TrackPrefs_Mode_descriptor();
}
template <> struct is_proto_enum< ::simData::LabelPrefs_UseValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::LabelPrefs_UseValue>() {
  return ::simData::LabelPrefs_UseValue_descriptor();
}
template <> struct is_proto_enum< ::simData::LocalGridPrefs_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::LocalGridPrefs_Type>() {
  return ::simData::LocalGridPrefs_Type_descriptor();
}
template <> struct is_proto_enum< ::simData::BeamProperties_BeamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::BeamProperties_BeamType>() {
  return ::simData::BeamProperties_BeamType_descriptor();
}
template <> struct is_proto_enum< ::simData::BeamPrefs_AntennaPattern_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::BeamPrefs_AntennaPattern_Type>() {
  return ::simData::BeamPrefs_AntennaPattern_Type_descriptor();
}
template <> struct is_proto_enum< ::simData::BeamPrefs_AntennaPattern_FileFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::BeamPrefs_AntennaPattern_FileFormat>() {
  return ::simData::BeamPrefs_AntennaPattern_FileFormat_descriptor();
}
template <> struct is_proto_enum< ::simData::BeamPrefs_AntennaPattern_Algorithm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::BeamPrefs_AntennaPattern_Algorithm>() {
  return ::simData::BeamPrefs_AntennaPattern_Algorithm_descriptor();
}
template <> struct is_proto_enum< ::simData::BeamPrefs_DrawMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::BeamPrefs_DrawMode>() {
  return ::simData::BeamPrefs_DrawMode_descriptor();
}
template <> struct is_proto_enum< ::simData::BeamPrefs_DrawType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::BeamPrefs_DrawType>() {
  return ::simData::BeamPrefs_DrawType_descriptor();
}
template <> struct is_proto_enum< ::simData::GateProperties_GateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::GateProperties_GateType>() {
  return ::simData::GateProperties_GateType_descriptor();
}
template <> struct is_proto_enum< ::simData::GatePrefs_DrawMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::GatePrefs_DrawMode>() {
  return ::simData::GatePrefs_DrawMode_descriptor();
}
template <> struct is_proto_enum< ::simData::GatePrefs_FillPattern> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::GatePrefs_FillPattern>() {
  return ::simData::GatePrefs_FillPattern_descriptor();
}
template <> struct is_proto_enum< ::simData::ModelDrawMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::ModelDrawMode>() {
  return ::simData::ModelDrawMode_descriptor();
}
template <> struct is_proto_enum< ::simData::IconRotation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::IconRotation>() {
  return ::simData::IconRotation_descriptor();
}
template <> struct is_proto_enum< ::simData::ElapsedTimeFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::ElapsedTimeFormat>() {
  return ::simData::ElapsedTimeFormat_descriptor();
}
template <> struct is_proto_enum< ::simData::AngleUnits> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::AngleUnits>() {
  return ::simData::AngleUnits_descriptor();
}
template <> struct is_proto_enum< ::simData::GeodeticUnits> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::GeodeticUnits>() {
  return ::simData::GeodeticUnits_descriptor();
}
template <> struct is_proto_enum< ::simData::DistanceUnits> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::DistanceUnits>() {
  return ::simData::DistanceUnits_descriptor();
}
template <> struct is_proto_enum< ::simData::SpeedUnits> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::SpeedUnits>() {
  return ::simData::SpeedUnits_descriptor();
}
template <> struct is_proto_enum< ::simData::Polarity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::Polarity>() {
  return ::simData::Polarity_descriptor();
}
template <> struct is_proto_enum< ::simData::CoordinateSystem> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::CoordinateSystem>() {
  return ::simData::CoordinateSystem_descriptor();
}
template <> struct is_proto_enum< ::simData::MagneticVariance> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::MagneticVariance>() {
  return ::simData::MagneticVariance_descriptor();
}
template <> struct is_proto_enum< ::simData::VerticalDatum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::VerticalDatum>() {
  return ::simData::VerticalDatum_descriptor();
}
template <> struct is_proto_enum< ::simData::PolygonFace> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::PolygonFace>() {
  return ::simData::PolygonFace_descriptor();
}
template <> struct is_proto_enum< ::simData::PolygonMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::PolygonMode>() {
  return ::simData::PolygonMode_descriptor();
}
template <> struct is_proto_enum< ::simData::CircleHilightShape> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::CircleHilightShape>() {
  return ::simData::CircleHilightShape_descriptor();
}
template <> struct is_proto_enum< ::simData::DynamicScaleAlgorithm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::DynamicScaleAlgorithm>() {
  return ::simData::DynamicScaleAlgorithm_descriptor();
}
template <> struct is_proto_enum< ::simData::AnimatedLineBend> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::AnimatedLineBend>() {
  return ::simData::AnimatedLineBend_descriptor();
}
template <> struct is_proto_enum< ::simData::TextOutline> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::TextOutline>() {
  return ::simData::TextOutline_descriptor();
}
template <> struct is_proto_enum< ::simData::BackdropType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::BackdropType>() {
  return ::simData::BackdropType_descriptor();
}
template <> struct is_proto_enum< ::simData::BackdropImplementation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::BackdropImplementation>() {
  return ::simData::BackdropImplementation_descriptor();
}
template <> struct is_proto_enum< ::simData::TextAlignment> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simData::TextAlignment>() {
  return ::simData::TextAlignment_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_simData_2eproto
